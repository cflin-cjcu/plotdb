// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('plotDB');
x$.service('sampleTheme', ['$rootScope'].concat(function($rootScope){
  return plotdb.theme.sample;
}));
x$.service('themeService', ['$rootScope', '$http', 'IOService', 'sampleTheme', 'baseService', 'plNotify', 'eventBus'].concat(function($rootScope, $http, IOService, sampleTheme, baseService, plNotify, eventBus){
  var service, object, themeService;
  service = {
    sample: sampleTheme,
    link: function(theme){
      return "/theme/" + theme.key;
    },
    thumblink: function(theme){
      return "/s/theme/" + theme.key + ".png";
    },
    sharelink: function(chart){
      return plConfig.urlschema + "" + plConfig.domain + "/v/theme/" + chart.key;
    },
    list: function(){
      return IOService.listRemotely({
        name: 'theme',
        location: 'server'
      }).then(function(r){
        return r.map(function(it){
          return new object(it);
        });
      });
    }
  };
  object = function(src){
    var ref$;
    import$(this, {
      name: 'untitled',
      description: null,
      tags: null,
      theme: null,
      doc: {
        name: 'document',
        type: 'html',
        content: ((ref$ = service.sample[0]).doc || (ref$.doc = {})).content || ""
      },
      style: {
        name: 'stylesheet',
        type: 'css',
        content: ((ref$ = service.sample[0]).style || (ref$.style = {})).content || ""
      },
      code: {
        name: 'code',
        type: 'javascript',
        content: ((ref$ = service.sample[0]).code || (ref$.code = {})).content || ""
      },
      config: {},
      dimension: {},
      assets: [],
      likes: 0,
      parent: null,
      _type: {
        location: 'server',
        name: 'theme'
      }
    });
    import$(this, src);
    if (!Array.isArray(this.assets)) {
      this.assets = [];
    }
    return this;
  };
  object.prototype = {
    addFile: function(name, type, content){
      var file;
      content == null && (content = null);
      file = {
        name: name,
        type: type,
        content: content
      };
      this.assets.push(file);
      return file;
    },
    removeFile: function(file){
      var idx;
      idx = this.assets.indexOf(file);
      if (idx < 0) {
        return;
      }
      return this.assets.splice(idx, 1);
    }
  };
  themeService = baseService.derive('theme', service, object);
  return themeService;
}));
x$.controller('themeList', ['$scope', '$http', 'IOService', 'Paging', 'dataService', 'themeService'].concat(function($scope, $http, IOService, Paging, dataService, themeService){
  $scope.loading = true;
  $scope.load = function(theme){
    return window.location.href = themeService.link(theme);
  };
  $scope.link = function(it){
    return themeService.link(it);
  };
  $scope.paging = Paging;
  $scope.loadList = function(delay, reset){
    delay == null && (delay = 1000);
    reset == null && (reset = false);
    return Paging.load(function(){
      var payload, ref$;
      payload = (ref$ = {}, ref$.offset = Paging.offset, ref$.limit = Paging.limit, ref$);
      return IOService.listRemotely({
        name: 'theme'
      }, payload);
    }, delay, reset).then(function(ret){
      var this$ = this;
      return $scope.$apply(function(){
        var data;
        $scope.loading = false;
        data = (ret || []).map(function(it){
          return new themeService.theme(it);
        });
        Paging.flexWidth(data);
        return $scope.themes = (reset || !$scope.themes
          ? []
          : $scope.themes).concat(data);
      });
    });
  };
  $scope.loadList(0, true);
  return Paging.loadOnScroll(function(){
    return $scope.loadList();
  }, $('#list-end'));
}));
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}