// Generated by LiveScript 1.3.1
var x$;
window.lang = 'zh';
x$ = angular.module('plotDB');
x$.service('i18n', ['$rootScope'].concat(function($rootScope){
  var ret;
  return ret = {
    'Pricing': {
      zh: '方案與定價',
      en: 'Pricing'
    },
    'pricing-desc': {
      zh: "提升您的視覺力",
      en: "empower you with visualizations"
    },
    'price-free-desc': {
      zh: "所有用戶都能享有",
      en: "for all users to evaluation PlotDB"
    },
    'price-basic-desc': {
      zh: "適合個人快速製圖",
      en: "Best for individual expertise"
    },
    'price-expert-desc': {
      zh: "團隊功能與私人內容",
      en: "privacy, team and enterprise"
    },
    'Your Choice': {
      zh: "您的選擇"
    },
    'Select': {
      zh: "選取"
    },
    'annually': {
      zh: "年繳"
    },
    'or': {
      zh: "或"
    },
    'SHOWCASE': {
      zh: "使用案例"
    },
    'PALETTE': {
      zh: "配色"
    },
    'COLLECTIONS': {
      zh: "作品集"
    },
    'THEME': {
      zh: "設計主題"
    },
    'DATASET': {
      zh: "資料集"
    },
    'VISWORK': {
      zh: "視覺化"
    },
    'Storage Usage': {
      zh: "空間用量"
    },
    'Teams': {
      zh: "團隊"
    },
    'Settings': {
      zh: "設定"
    },
    'Billing': {
      zh: "付款資訊"
    },
    'Logout': {
      zh: "登出"
    },
    'Plan': {
      zh: "方案"
    },
    'Credit Card Number': {
      zh: "您的信用卡號"
    },
    'Subscribe': {
      zh: "購買"
    },
    'Expiration Date': {
      zh: "卡片到期日"
    },
    'CVC Code': {
      zh: "檢查碼"
    }
  };
}));
x$.filter('i18n', ['i18n'].concat(function(i18n){
  return function(it){
    return (i18n[it] && i18n[it][window.lang]) || it;
  };
}));
x$.filter('tags', function(){
  return function(it){
    if (Array.isArray(it)) {
      return it;
    } else {
      return (it || "").split(',');
    }
  };
});
x$.filter('nicedate', function(){
  return function(it){
    var date;
    date = new Date(it);
    return (date.getYear() + 1900) + "/" + (date.getMonth() + 1) + "/" + date.getDate();
  };
});
x$.filter('nicedatetime', function(){
  return function(it){
    var pad, date, Y, M, D, h, m, s;
    pad = function(it){
      return (it < 10 ? '0' : '') + "" + it;
    };
    date = new Date(it);
    Y = date.getYear() + 1900;
    M = pad(date.getMonth() + 1);
    D = pad(date.getDate());
    h = pad(date.getHours());
    m = pad(date.getMinutes());
    s = pad(date.getSeconds());
    return Y + "/" + M + "/" + D + " " + h + ":" + m + ":" + s;
  };
});
x$.filter('date', function(){
  return function(it){
    return new Date(it);
  };
});
x$.filter('timestamp', function(){
  return function(it){
    return new Date(it).getTime();
  };
});
x$.filter('datelite', function(){
  return function(it){
    var d;
    d = new Date(it);
    return (d.getYear() + 1900) + "/" + (d.getMonth() + 1) + "/" + d.getDate() + " " + d.getHours() + ":" + d.getMinutes();
  };
});
x$.filter('length', function(){
  return function(it){
    var k;
    return (function(){
      var results$ = [];
      for (k in it) {
        results$.push(k);
      }
      return results$;
    }()).length;
  };
});
x$.filter('size', function(){
  return function(it){
    if (!it || isNaN(it)) {
      return '0B';
    }
    if (it < 1000) {
      return it + "B";
    } else if (it < 1048576) {
      return parseInt(it / 102.4) / 10 + "KB";
    } else {
      return parseInt(it / 104857.6) / 10 + "MB";
    }
  };
});
x$.directive('ngfile', ['$compile'].concat(function($compile){
  return {
    require: [],
    restrict: 'A',
    scope: {
      model: '=ngData'
    },
    link: function(s, e, a, c){
      var this$ = this;
      return e.on('change', function(){
        return s.$apply(function(){
          return s.model = e[0].files;
        });
      });
    }
  };
}));
x$.directive('ngselect2', ['$compile', 'entityService'].concat(function($compile, entityService){
  return {
    require: [],
    restrict: 'A',
    scope: {
      model: '=ngData',
      istag: '@istag',
      type: '@type',
      detail: '=ngDetail'
    },
    link: function(s, e, a, c){
      var changed, config, this$ = this;
      changed = function(){
        var ref$, cval, nval;
        ref$ = [s.model, $(e).val()], cval = ref$[0], nval = ref$[1];
        if (!Array.isArray(cval)) {
          return cval !== nval;
        }
        ref$ = [cval, nval].map(function(it){
          return (it || []).join(",");
        }), cval = ref$[0], nval = ref$[1];
        return cval !== nval;
      };
      if (s.type) {
        config = entityService.config.select2[s.type];
      } else {
        config = {};
      }
      if (s.istag) {
        config.tags = true;
        config.tokenSeparators = [',', ' '];
      }
      $(e).select2(config);
      $(e).select2(config).on('change', function(){
        if (changed()) {
          return setTimeout(function(){
            return s.$apply(function(){
              s.model = $(e).val();
              if (a.$attr["ngDetail"]) {
                return s.detail = $(e).select2('data');
              }
            });
          }, 0);
        }
      });
      return s.$watch('model', function(vals){
        var html, i$, ref$, len$, val;
        if (config.tags) {
          html = "";
          for (i$ = 0, len$ = (ref$ = vals || []).length; i$ < len$; ++i$) {
            val = ref$[i$];
            html += $("<option></option>").val(val).text(val)[0].outerHTML;
          }
          $(e).html(html);
        }
        if (changed()) {
          return setTimeout(function(){
            return $(e).val(vals).trigger('change');
          }, 0);
        }
      }, true);
    }
  };
}));
x$.directive('readby', ['$compile'].concat(function($compile){
  return {
    scope: {
      readby: '&readby',
      encoding: '@encoding',
      askencoding: '&askencoding'
    },
    link: function(s, e, a, c){
      var handler, askencoding;
      handler = s.readby();
      askencoding = s.askencoding();
      return e.bind('change', function(event){
        var reader;
        reader = function(){
          var fr;
          fr = new FileReader();
          fr.onload = function(){
            s.$apply(function(){
              return handler(fr.result, event.target.files[0]);
            });
            return e.val("");
          };
          if (s.encoding) {
            return fr.readAsText(event.target.files[0], s.encoding);
          } else {
            return fr.readAsBinaryString(event.target.files[0]);
          }
        };
        return s.$apply(function(){
          if (askencoding) {
            return askencoding(reader);
          } else {
            return reader();
          }
        });
      });
    }
  };
}));