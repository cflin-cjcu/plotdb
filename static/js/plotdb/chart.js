// Generated by LiveScript 1.3.1
plotdb.chart = {
  corelib: {},
  create: function(config){
    return import$(import$({}, this.base), config);
  },
  base: {
    dimension: {
      value: {
        type: [],
        require: false
      }
    },
    config: {
      padding: {}
    },
    init: function(){},
    bind: function(){},
    resize: function(){},
    render: function(){}
  },
  dataFromDimension: function(dimension){
    var data, len, k, v, i$, i, ret, that, type, defval, value, parse, j$, to$, j;
    data = [];
    len = Math.max.apply(null, (function(){
      var ref$, results$ = [];
      for (k in ref$ = dimension) {
        v = ref$[k];
        results$.push(v);
      }
      return results$;
    }()).reduce(function(a, b){
      return a.concat(b.fields || []);
    }, []).filter(function(it){
      return it.data;
    }).map(function(it){
      return it.data.length;
    }).concat([0]));
    for (i$ = 0; i$ < len; ++i$) {
      i = i$;
      ret = {};
      for (k in dimension) {
        v = dimension[k];
        if (v.multiple) {
          ret[k] = (v.fields || (v.fields = [])).length ? (v.fields || (v.fields = [])).map(fn$) : null;
          v.fieldName = (v.fields || (v.fields = [])).map(fn1$);
        } else {
          ret[k] = (that = (v.fields || (v.fields = []))[0]) ? (that.data || (that.data = []))[i] : null;
          v.fieldName = (that = (v.fields || (v.fields = []))[0]) ? that.name : null;
        }
        if (ret[k] === null) {
          type = v.type[0] || plotdb.String;
          defval = plotdb[type.name]['default'];
          value = typeof defval === 'function'
            ? defval(k, v, i)
            : type['default'];
          ret[k] = v.multiple ? [value] : value;
        }
        if (v.type && v.type[0] && plotdb[v.type[0].name].parse) {
          parse = plotdb[v.type[0].name].parse;
          if (Array.isArray(ret[k])) {
            for (j$ = 0, to$ = ret[k].length; j$ < to$; ++j$) {
              j = j$;
              ret[k][j] = parse(ret[k][j]);
            }
          } else {
            ret[k] = parse(ret[k]);
          }
        }
      }
      data.push(ret);
    }
    return data;
    function fn$(it){
      return (it.data || (it.data = []))[i];
    }
    function fn1$(it){
      return it.name;
    }
  },
  dataFromHash: function(dimension, source){
    var k, v;
    if (!dimension || !source) {
      return [];
    }
    if (Array.isArray(source)) {
      return source;
    }
    if (typeof source === 'function') {
      source = source();
    }
    for (k in dimension) {
      v = dimension[k];
      v.fields = source[k] || [];
    }
    return plotdb.chart.dataFromDimension(dimension);
  },
  getSampleData: function(chart, dimension){
    dimension == null && (dimension = null);
    return plotdb.chart.dataFromHash(dimension || chart.dimension, chart.sample);
  },
  updateData: function(chart){
    return chart.data = plotdb.chart.dataFromDimension(chart.dimension);
  },
  updateAssets: function(chart, assets){
    var ret, i$, len$, file, raw, array, j$, to$, idx;
    assets == null && (assets = []);
    ret = {};
    for (i$ = 0, len$ = assets.length; i$ < len$; ++i$) {
      file = assets[i$];
      raw = atob(file.content);
      array = new Uint8Array(raw.length);
      for (j$ = 0, to$ = raw.length; j$ < to$; ++j$) {
        idx = j$;
        array[idx] = raw.charCodeAt(idx);
      }
      file.blob = new Blob([array], {
        type: file.type
      });
      file.url = URL.createObjectURL(file.blob);
      file.datauri = ["data:", file.type, ";charset=utf-8;base64,", file.content].join("");
      ret[file.name] = file;
    }
    return chart.assets = ret;
  },
  updateConfig: function(chart, config){
    var k, ref$, v, type, results$ = [];
    for (k in ref$ = chart.config) {
      v = ref$[k];
      type = (chart.config[k].type || []).map(fn$);
      if (!(config[k] != null)) {
        config[k] = v['default'];
      } else if (!(config[k].value != null)) {
        config[k] = (v || config[k])['default'];
      } else {
        config[k] = config[k].value;
      }
      if (type[0] && plotdb[type[0]].parse) {
        results$.push(config[k] = plotdb[type[0]].parse(config[k]));
      }
    }
    return results$;
    function fn$(it){
      return it.name;
    }
  }
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}