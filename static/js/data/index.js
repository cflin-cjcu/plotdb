// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('plotDB');
x$.service('dataService', ['$rootScope', '$http', 'IOService', 'sampleData', 'baseService', 'plNotify', 'eventBus'].concat(function($rootScope, $http, IOService, sampleData, baseService, plNotify, eventBus){
  var name, service, Field, Dataset, dataService;
  name = 'dataset';
  service = {
    sample: sampleData,
    init: function(){
      var this$ = this;
      return this.list().then(function(){
        return this$.localinfo.update();
      });
    },
    localinfo: {
      rows: 0,
      size: 0,
      update: function(){
        var i$, ref$, len$, item, results$ = [];
        this.rows = 0;
        this.size = 0;
        for (i$ = 0, len$ = (ref$ = service.items).length; i$ < len$; ++i$) {
          item = ref$[i$];
          if (item.type.location === 'local') {
            this.rows += item.rows;
            results$.push(this.size += item.size);
          }
        }
        return results$;
      }
    }
  };
  Field = function(name, dataset, field){
    dataset == null && (dataset = null);
    field == null && (field = null);
    if (!field && dataset) {
      field = dataset.fields.filter(function(it){
        return it.name === name;
      })[0];
    }
    if (field) {
      import$(this, field);
    }
    this.name = name;
    this._ = function(){};
    if (dataset) {
      this.setDataset(dataset);
    }
    return this;
  };
  Field.prototype = {
    dataset: {
      type: {},
      key: null
    },
    name: null,
    type: null,
    update: function(){
      var this$ = this;
      return this.getDataset().then(function(dataset){
        if (!dataset) {
          return;
        }
        this$.data = (dataset.data || (dataset.data = [])).map(function(it){
          return it[this$.name];
        });
        return this$.settype();
      });
    },
    setDataset: function(dataset){
      var ref$;
      dataset == null && (dataset = null);
      this._.dataset = dataset;
      if (dataset && dataset.type && dataset.key) {
        (ref$ = this.dataset, ref$.type = dataset.type, ref$.key = dataset.key, ref$).name = dataset.name;
      } else {
        ref$ = this.dataset.type;
        ref$.type = {};
        ref$.key = null;
        ref$.name = null;
      }
      return Promise.resolve(dataset);
    },
    getDataset: function(){
      var that, this$ = this;
      if (that = this._.dataset) {
        return Promise.resolve(that);
      }
      if (!this.dataset.type || !this.dataset.key) {
        return Promise.resolve(null);
      }
      return dataService.load(this.dataset.type, this.dataset.key).then(function(ret){
        var ref$;
        this$._.dataset = ret;
        (ref$ = this$.dataset, ref$.type = ret.type, ref$.key = ret.key, ref$).name = ret.name;
        return this$._.dataset;
      });
    },
    settype: function(){
      var types, i$, len$, type;
      types = ['Boolean', 'Percent', 'Number', 'Date', 'String'].concat([null]);
      for (i$ = 0, len$ = types.length; i$ < len$; ++i$) {
        type = types[i$];
        if (!type) {
          return this.type = 'String';
        }
        if (!this.data.map(fn$).filter(fn1$).length) {
          this.type = type;
          break;
        }
      }
      function fn$(it){
        return plotdb[type].test(it);
      }
      function fn1$(it){
        return !it;
      }
    }
  };
  Dataset = function(){
    var res$, i$, ref$, len$, f;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = this.fields || []).length; i$ < len$; ++i$) {
      f = ref$[i$];
      res$.push(new Field(f.name, this, f));
    }
    this.fields = res$;
    this.save = function(){
      var this$ = this;
      this.fields.map(function(it){
        var ref$;
        return ref$ = it.data, delete it.data, ref$;
      });
      return Dataset.prototype.save.call(this).then(function(){
        this$.fields.map(function(it){
          var ref$;
          return ref$ = it.dataset, ref$.type = this$.type, ref$.key = this$.key, ref$;
        });
        return this$.update();
      });
    };
    this.load = function(){
      var this$ = this;
      return Dataset.prototype.load.call(this).then(function(){
        return Dataset.call(this$);
      });
    };
    this.update();
    return this;
  };
  Dataset.prototype = {
    bind: function(field){},
    update: function(data){
      var names, res$, k, promises, i$, to$, i, that, this$ = this;
      data == null && (data = null);
      if (data) {
        this.data = data;
      }
      if (!this.data) {
        this.data = [];
      }
      res$ = [];
      for (k in this.data[0]) {
        res$.push(k);
      }
      names = res$;
      res$ = [];
      for (i$ = 0, to$ = names.length; i$ < to$; ++i$) {
        i = i$;
        if (that = this.fields[i]) {
          that;
        } else {
          this.fields.push(new Field(names[i], this));
        }
        this.fields[i].name = names[i];
        res$.push(this.fields[i].update());
      }
      promises = res$;
      return Promise.all(promises).then(function(){
        this$.size = angular.toJson(this$.data).length;
        return this$.rows = this$.data.length;
      });
    }
  };
  dataService = baseService.derive(name, service, Dataset);
  return dataService;
}));
x$.controller('dataEditCtrl', ['$scope', '$timeout', '$http', 'dataService', 'eventBus', 'plNotify'].concat(function($scope, $timeout, $http, dataService, eventBus, plNotify){
  import$($scope, {
    rawdata: "",
    dataset: null
  });
  $scope.name = null;
  $scope.save = function(locally){
    var config, this$ = this;
    locally == null && (locally = false);
    if (!$scope.name) {
      return;
    }
    if (!$scope.user.data || !$scope.user.data.key) {
      return $scope.auth.toggle(true);
    }
    if ($scope.dataset && $scope.dataset.type.location !== (locally ? 'local' : 'server')) {
      return;
    }
    $scope.parse.run(true);
    if (!$scope.dataset) {
      config = {
        name: $scope.name,
        type: {
          location: locally ? 'local' : 'server',
          name: 'dataset'
        },
        owner: null,
        permission: {
          'switch': ['public'],
          value: []
        },
        datatype: 'csv'
      };
      $scope.dataset = new dataService.dataset(config);
    }
    $scope.dataset.name = $scope.name;
    return $scope.dataset.update($scope.parse.result).then(function(){
      return $scope.dataset.save().then(function(){
        return $scope.$apply(function(){
          return plNotify.send('success', "dataset saved");
        });
      })['catch'](function(e){
        return $scope.$apply(function(){
          return plNotify.aux.error.io('save', 'data', e);
        });
      });
    });
  };
  $scope.loadDataset = function(dataset){
    var fields;
    $scope.dataset = dataset;
    $scope.name = dataset.name;
    fields = dataset.fields.map(function(it){
      return it.name;
    });
    return $scope.rawdata = ([fields.join(",")].concat(dataset.data.map(function(obj){
      return fields.map(function(it){
        return obj[it];
      }).join(',');
    }))).join('\n');
  };
  import$($scope, {
    reset: function(rawdata){
      return $scope.dataset = new dataService.dataset(), $scope.rawdata = rawdata, $scope;
    },
    init: function(){
      this.reset("");
      return $scope.$watch('rawdata', function(){
        return $scope.parse.run();
      });
    }
  });
  $scope.parse = {
    rows: 0,
    fields: 0,
    size: 0,
    result: null,
    loading: false,
    handle: null,
    run: function(force){
      var _, this$ = this;
      force == null && (force = false);
      this.loading = true;
      _ = function(){
        this$.handle = null;
        this$.result = {};
        return Papa.parse($scope.rawdata || "", {
          worker: true,
          header: true,
          step: function(arg$){
            var rows, i$, len$, row, lresult$, k, v, ref$, results$ = [];
            rows = arg$.data;
            for (i$ = 0, len$ = rows.length; i$ < len$; ++i$) {
              row = rows[i$];
              lresult$ = [];
              for (k in row) {
                v = row[k];
                lresult$.push(((ref$ = this$.result)[k] || (ref$[k] = [])).push(v));
              }
              results$.push(lresult$);
            }
            return results$;
          },
          complete: function(){
            var values, k, v;
            values = (function(){
              var ref$, results$ = [];
              for (k in ref$ = this.result) {
                v = ref$[k];
                results$.push(v);
              }
              return results$;
            }.call(this$)) || [];
            return $scope.$apply(function(){
              return this$.loading = false, this$.fields = values.length, this$.rows = (values[0] || []).length, this$;
            });
          }
        });
      };
      if (this.handle) {
        $timeout.cancel(this.handle);
      }
      if (force) {
        return _();
      } else {
        return this.handle = $timeout(function(){
          return _();
        }, force ? 0 : 1000);
      }
    }
  };
  $scope.parser = {
    encoding: 'UTF-8',
    csv: {
      toggle: function(){
        return setTimeout(function(){
          return $('#data-edit-csv-modal').modal('show');
        }, 0);
      },
      read: function(){
        var file, reader;
        file = $('#data-edit-csv-file')[0].files[0];
        reader = new FileReader();
        reader.onload = function(e){
          $scope.$apply(function(){
            return $scope.reset(e.target.result.trim());
          });
          return $('#data-edit-csv-modal').modal('hide');
        };
        reader.onerror = function(e){};
        return reader.readAsText(file, $scope.parser.encoding);
      }
    },
    gsheet: {
      url: null,
      toggle: function(){
        return setTimeout(function(){
          return $('#data-edit-gsheet-modal').modal('show');
        }, 0);
      },
      read: function(){
        var ret, key, url;
        ret = /\/d\/([^\/]+)/.exec($scope.parser.gsheet.url);
        if (!ret) {
          return;
        }
        key = ret[1];
        url = "https://spreadsheets.google.com/feeds/list/" + key + "/1/public/values?alt=json";
        return $http({
          url: url,
          method: 'GET'
        }).success(function(data){
          var fields, res$, k, lines;
          fields = {};
          data.feed.entry.map(function(it){
            var key, that, results$ = [];
            for (key in it) {
              if (that = /^gsx\$(.+)$/.exec(key)) {
                results$.push(fields[that[1]] = 1);
              }
            }
            return results$;
          });
          res$ = [];
          for (k in fields) {
            res$.push(k);
          }
          fields = res$;
          lines = [fields.join(',')].concat(data.feed.entry.map(function(it){
            var key;
            return (function(){
              var i$, ref$, len$, results$ = [];
              for (i$ = 0, len$ = (ref$ = fields).length; i$ < len$; ++i$) {
                key = ref$[i$];
                results$.push((it["gsx$" + key] || {
                  $t: ""
                }).$t);
              }
              return results$;
            }()).join(',');
          }));
          $scope.$apply(function(){
            return $scope.reset(lines.join('\n'));
          });
          return setTimeout(function(){
            return $('#data-edit-gsheet-modal').modal('hide');
          }, 0);
        });
      }
    },
    link: {
      url: null,
      toggle: function(){
        return setTimeout(function(){
          return $('#data-edit-link-modal').modal('show');
        }, 0);
      },
      read: function(){
        return $http({
          url: "http://crossorigin.me/" + $scope.parser.link.url,
          method: 'GET'
        }).success(function(d){
          $scope.$apply(function(){
            return $scope.reset(d.trim());
          });
          return $('#data-edit-link-modal').modal('hide');
        });
      }
    }
  };
  eventBus.listen('dataset.delete', function(key){
    if ($scope.dataset.key === key) {
      return $scope.dataset = null;
    }
  });
  eventBus.listen('dataset.edit', function(dataset){
    return $scope.loadDataset(dataset);
  });
  return $scope.init();
}));
x$.controller('dataFiles', ['$scope', 'dataService', 'plNotify', 'eventBus'].concat(function($scope, dataService, plNotify, eventBus){
  $scope.datasets = dataService.datasets;
  return dataService.list().then(function(ret){
    $scope.datasets = ret;
    $scope.edit = function(dataset){
      return eventBus.fire('dataset.edit', dataset);
    };
    $scope.chosen = {
      dataset: null,
      key: null
    };
    $scope.toggle = function(dataset){
      var ref$;
      if (!dataset || this.chosen.key === dataset.key) {
        return ref$ = this.chosen, ref$.dataset = null, ref$.key = null, ref$;
      }
      this.chosen.key = dataset.key;
      return this.chosen.dataset = dataset;
    };
    return $scope.remove = function(dataset){
      var this$ = this;
      return dataset['delete']().then(function(){
        return $scope.$apply(function(){
          return $scope.datasets = $scope.datasets.filter(function(it){
            return it.key !== dataset.key;
          });
        });
      });
    };
  });
}));
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}