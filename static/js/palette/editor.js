// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('plotDB');
x$.controller('palEditor', ['$scope', '$http', '$timeout'].concat(function($scope, $http, $timeout){
  var d3Scale, d3ScaleR, circles, outCircle, path;
  d3Scale = d3.scaleSqrt();
  d3ScaleR = d3.scaleLinear();
  $scope.preview = {
    type: 'map',
    init: function(){
      return $scope.$watch('preview.type', function(){
        return $scope.render();
      });
    }
  };
  $scope.preview.init();
  $scope.type = 1;
  $scope.count = 6;
  $scope.colors = [];
  $scope.blindtest = 'normal';
  $scope.generate = function(rand){
    var ref$, v1, v2, hclint, len, len2, v3, v4, hclint1, hclint2;
    if (rand) {
      $scope.colors = [];
    }
    if (!($scope.count != null) || $scope.count < 2) {
      $scope.count = 2;
    }
    if (!$scope.colors) {
      $scope.colors = [];
    }
    if ($scope.colors.length < $scope.count) {
      $scope.colors = $scope.colors.concat(d3.range($scope.count - $scope.colors.length).map(function(){
        var v;
        v = parseInt(Math.random() * 16777216).toString(16);
        return v = "#" + repeatString$('0', 6 - v.length) + v;
      }).map(function(d, i){
        return {
          value: d,
          idx: i
        };
      }));
    } else if ($scope.colors.length > $scope.count) {
      $scope.colors.splice($scope.count, $scope.colors.length - $scope.count);
    }
    if ($scope.type === 2) {
      ref$ = [$scope.colors[0].value, (ref$ = $scope.colors)[ref$.length - 1].value], v1 = ref$[0], v2 = ref$[1];
      hclint = d3.interpolateHcl(v1, v2);
      $scope.colors.map(function(d, i){
        var v;
        v = d3.rgb(hclint(i / ($scope.colors.length - 1 || 1)));
        return d.value = "#" + ['r', 'g', 'b'].map(function(it){
          return v[it].toString(16);
        }).map(function(it){
          return repeatString$("0", 2 - it.length) + it;
        }).join("");
      });
    } else if ($scope.type === 3) {
      len = $scope.colors.length;
      len2 = parseInt(len / 2);
      ref$ = [$scope.colors[0].value, $scope.colors[len2 - (len + 1) % 2].value], v1 = ref$[0], v2 = ref$[1];
      ref$ = [$scope.colors[len2 - len % 2].value, (ref$ = $scope.colors)[ref$.length - 1].value], v3 = ref$[0], v4 = ref$[1];
      hclint1 = d3.interpolateHcl(v1, v2);
      hclint2 = d3.interpolateHcl(v3, v4);
      len2 += len % 2;
      $scope.colors.map(function(d, i){
        var v;
        if (i < len2) {
          v = d3.rgb(hclint1(i / (len2 - 1 || 1)));
        } else {
          i -= len2 - len % 2;
          v = d3.rgb(hclint2(i / (len2 - 1 || 1)));
        }
        return d.value = "#" + ['r', 'g', 'b'].map(function(it){
          return v[it].toString(16);
        }).map(function(it){
          return repeatString$("0", 2 - it.length) + it;
        }).join("");
      });
    }
    return $scope.palette = "[" + $scope.colors.map(function(d){
      return "\"" + d.value + "\"";
    }).join(',') + "]";
  };
  $scope.generate();
  $scope.$watch('count', $scope.generate);
  circles = d3.range(150).map(function(){
    return {
      r: Math.random() * 30
    };
  });
  d3.packSiblings(circles);
  outCircle = d3.packEnclose(circles);
  $scope.circleGroup = d3.select('#pal-editor-preview').append('g');
  $scope.circleGroup.selectAll('circle').data(circles).enter().append('circle').attrs({
    cx: function(it){
      return it.x;
    },
    cy: function(it){
      return it.y;
    },
    r: function(it){
      return it.r;
    }
  });
  $scope.circleGroup.attrs({
    transform: function(){
      var r, rate;
      r = outCircle.r;
      rate = 190 / r;
      return "translate(400 250) scale(" + rate + ")";
    }
  });
  path = d3.geoPath().projection(d3.geoAlbersUsa().scale(900).translate([400, 200]));
  $http({
    url: '/assets/misc/us.json',
    method: 'GET'
  }).success(function(d){
    var features;
    features = topojson.feature(d, d.objects.counties).features;
    return d3.csv('/assets/misc/us-pop-2013.csv', function(data){
      var hash, i$, len$, item, ref$;
      hash = {};
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        item = data[i$];
        hash[item.code] = item[2013];
      }
      for (i$ = 0, len$ = (ref$ = features).length; i$ < len$; ++i$) {
        item = ref$[i$];
        item.value = parseInt(hash[item.id] || 0);
      }
      $scope.pathGroup = d3.select('#pal-editor-preview').append('g').attrs({
        transform: "translate(0 30)"
      });
      $scope.pathGroup.selectAll('path').data(features).enter().append('path').attrs({
        d: path,
        stroke: '#fff',
        "stroke-width": 0.5
      }).on('mousemove', function(d, i){});
      return $scope.render();
    });
  });
  $scope.handler = {
    handle: null,
    set: function(){
      if (this.handle) {
        $timeout.cancel(this.handle);
      }
      return this.handle = $timeout(function(){
        return $scope.generate();
      }, 100);
    }
  };
  $scope.config = {
    oncolorchange: function(){
      $scope.handler.set();
      return $scope.render();
    }
  };
  $scope.picker = {
    node: null,
    disabled: function(idx){
      var ref$, len, type;
      ref$ = [$scope.colors.length, $scope.type], len = ref$[0], type = ref$[1];
      if (type === 1) {
        return false;
      }
      if (type === 2 && (idx > 0 && idx < len - 1)) {
        return true;
      }
      if (type === 3 && (idx > 0 && idx < len - 1) && idx !== parseInt(len / 2) && idx !== parseInt(len / 2) - (len + 1) % 2) {
        return true;
      }
      return false;
    },
    toggle: function(e, c){
      var ref$, this$ = this;
      if ($scope.type === 2 && c.idx > 0 && c.idx < $scope.colors.length - 1) {
        return;
      }
      if (c.idx === this.idx) {
        this.isOn = !this.isOn;
      } else {
        this.isOn = true;
      }
      this.idx = c.idx;
      this.ptr = {
        left: (ref$ = e.target.getBoundingClientRect()).left,
        top: ref$.top
      };
      this.ptr.left -= 297;
      this.ptr.top += document.body.scrollTop;
      setTimeout(function(){
        return this$.ldcp.setColor($scope.colors[this$.idx].value);
      }, 0);
      e.preventDefault();
      e.cancelBubble = true;
      return e.stopPropagation();
    },
    idx: 0,
    isOn: false,
    config: {
      oncolorchange: function(c){
        return $scope.$apply(function(){
          $scope.colors[$scope.picker.idx].value = c;
          $scope.generate();
          return $scope.render();
        });
      }
    },
    init: function(){
      this.node = document.querySelector('#pal-editor-ldcp .ldColorPicker');
      return this.ldcp = new ldColorPicker(null, this.config, this.node);
    }
  };
  $scope.render = function(){
    var type, that;
    type = $scope.preview.type;
    d3Scale.domain([0, 1000, 13000, 160000, 2000000]).range(($scope.colors || []).map(function(it){
      return it.value;
    }));
    if (that = $scope.pathGroup) {
      that.attr('opacity', type !== 'bubble' ? '1' : '0');
      that.selectAll('path').attrs({
        fill: function(it){
          return d3Scale(it.value);
        }
      });
    }
    if (that = $scope.circleGroup) {
      d3ScaleR.domain(d3.range($scope.colors.length).map(function(it){
        return 30 * it / ($scope.colors.length - 1 || 1);
      })).range(($scope.colors || []).map(function(it){
        return it.value;
      }));
      that.attr('opacity', type === 'bubble' ? '1' : '0');
      return that.selectAll('circle').attrs({
        fill: function(it){
          return d3ScaleR(it.r);
        }
      });
    }
  };
  $scope.$watch('type', function(){
    $scope.generate();
    return $scope.render();
  });
  $scope.picker.init();
  document.body.addEventListener('click', function(e){
    return $scope.$apply(function(){
      return $scope.picker.isOn = false;
    });
  });
  return ['#pal-editor-output', '#pal-editor-output-copy'].map(function(eventsrc){
    var clipboard;
    clipboard = new Clipboard(eventsrc);
    clipboard.on('success', function(){
      $(eventsrc).tooltip({
        title: 'copied',
        trigger: 'click'
      }).tooltip('show');
      return setTimeout(function(){
        return $(eventsrc).tooltip('hide');
      }, 1000);
    });
    return clipboard.on('error', function(){
      $(eventsrc).tooltip({
        title: 'Press Ctrl+C to Copy',
        trigger: 'click'
      }).tooltip('show');
      return setTimeout(function(){
        return $(eventsrc).tooltip('hide');
      }, 1000);
    });
  });
}));
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}