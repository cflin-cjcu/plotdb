// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('plotDB');
x$.controller('plEditorNew', ['$scope', '$http', '$timeout', '$interval', '$sce', 'plConfig', 'IOService', 'dataService', 'chartService', 'paletteService', 'themeService', 'plNotify', 'eventBus', 'permService', 'license'].concat(function($scope, $http, $timeout, $interval, $sce, plConfig, IOService, dataService, chartService, paletteService, themeService, plNotify, eventBus, permService, license){
  var lastEdcode, build, sendMsg, dispatcher, init, reset;
  $scope.plotdbDomain = plConfig.urlschema + "" + plConfig.domain;
  $scope.editor = CodeMirror.fromTextArea(document.getElementById('editor-textarea'), {
    lineNumbers: true,
    mode: "javascript",
    theme: "default"
  });
  $scope.editortheme = function(it){
    $scope.editortheme.val = it;
    return $scope.editor.setOption('theme', it);
  };
  $scope.editortheme.val = 'default';
  $scope.colorblind = {
    val: 'normal',
    vals: ['normal', 'protanopia', 'protanomaly', 'deuteranopia', 'deuteranomaly', 'tritanopia', 'tritanomaly', 'achromatopsia', 'achromatomaly'],
    set: function(it){
      if (!in$(it, this.vals)) {
        return;
      }
      this.val = it;
      return import$(document.getElementById('editor-canvas').style, {
        "-webkit-filter": "url(#" + it + ")",
        "filter": "url(#" + it + ")"
      });
    }
  };
  $scope.rwdtest = {
    val: 'default',
    vals: ['default', 'QVGA', 'HVGA', 'Thumb', 'Custom'],
    map: {
      'default': [0, 0],
      QVGA: [240, 320],
      HVGA: [320, 480],
      Thumb: [308, 229]
    },
    custom: {
      width: 640,
      height: 480
    },
    init: function(){
      var this$ = this;
      return $scope.$watch('rwdtest.custom', function(){
        return this$.set();
      }, true);
    },
    set: function(it){
      var node, canvas, ref$, width, height, w, h;
      if (!in$(it, this.vals)) {
        it = this.val;
      }
      this.val = it;
      node = document.getElementById('editor-canvas');
      canvas = node.querySelector(".inner");
      ref$ = {
        width: (ref$ = node.getBoundingClientRect()).width,
        height: ref$.height
      }, width = ref$.width, height = ref$.height;
      if (this.val === 'default') {
        ref$ = ['100%', '100%'], w = ref$[0], h = ref$[1];
        ref$ = canvas.style;
        ref$.marginTop = 0;
        ref$.marginLeft = 0;
      } else {
        if (this.val === 'Custom') {
          ref$ = [this.custom.width, this.custom.height], w = ref$[0], h = ref$[1];
        } else {
          ref$ = this.map[this.val], w = ref$[0], h = ref$[1];
        }
        ref$ = canvas.style;
        ref$.marginTop = (height - h) / 2 + "px";
        ref$.marginLeft = (width - w) / 2 + "px";
        ref$ = [w, h].map(function(it){
          return it + "px";
        }), w = ref$[0], h = ref$[1];
      }
      ref$ = canvas.style;
      ref$.width = w;
      ref$.height = h;
      return canvas.style.boxShadow = '0 0 3px rgba(0,0,0,0.2)';
    }
  };
  $scope.rwdtest.init();
  $scope.code = {
    size: '',
    toggleLarge: function(){
      this.size = this.size === 'lg' ? '' : 'lg';
      return $scope.canvasResize();
    }
  };
  $scope.canvasResize = function(){
    return $timeout(function(){
      var left, node;
      left = Math.max.apply(null, Array.from(document.querySelectorAll('.editor-func-detail')).map(function(it){
        if (it.getAttribute('class').split(' ').indexOf('lg') >= 0) {
          return 0;
        }
        return it.getBoundingClientRect().width;
      })) + 100;
      node = document.querySelector('#editor-canvas');
      node.style.left = left + "px";
      node = document.querySelector('.editor-ctrls');
      node.style.left = left + "px";
      return $scope.rwdtest.set();
    }, 0);
  };
  $scope.$watch('edfunc', function(){
    return $scope.canvasResize();
  });
  lastEdcode = null;
  build = function(){
    var value;
    value = $scope.editor.getValue();
    if ($scope.chart) {
      $scope.chart[$scope.edcode].content = value;
    }
    if (lastEdcode === $scope.edcode) {
      reset($scope.chart);
    }
    return lastEdcode = $scope.edcode;
  };
  $scope.editor.on('change', build);
  $scope.updateCode = function(){
    if ($scope.chart) {
      return $scope.editor.getDoc().setValue($scope.chart[$scope.edcode].content);
    }
  };
  $scope.$watch('edcode', function(val){
    return $scope.updateCode();
  });
  $scope.edcode = 'code';
  $scope.library = {
    hash: {},
    load: function(list){
      var tasks, item, this$ = this;
      if (!list) {
        list = ($scope.chart || ($scope.chart = {})).library || [];
      }
      tasks = list.map(function(it){
        return [it, it.split('/')];
      }).filter(function(it){
        return !this$.hash[it[0]];
      });
      return Promise.all((function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = tasks).length; i$ < len$; ++i$) {
          item = ref$[i$];
          results$.push(fn$(item));
        }
        return results$;
        function fn$(item){
          return new Promise(function(res, rej){
            var url, that;
            url = item[1];
            url = "/lib/" + url[0] + "/" + url[1] + "/index." + ((that = url[2]) ? that + '.' : '') + "js";
            return $http({
              url: url,
              method: 'GET'
            }).success(function(js){
              var bloburl;
              bloburl = URL.createObjectURL(new Blob([js], {
                type: 'text/javascript'
              }));
              this$.hash[item[0]] = bloburl;
              return res();
            });
          });
        }
      }())).then(function(){
        var ret;
        ret = {};
        list.map(function(it){
          return ret[it] = this$.hash[it];
        });
        return ret;
      });
    }
  };
  $scope.updateData = function(data){
    var k, v, i$, to$, i, ref$, ref1$, key$;
    (function(){
      var ref$, results$ = [];
      for (k in ref$ = $scope.dimension) {
        v = ref$[k];
        results$.push(v);
      }
      return results$;
    }()).map(function(it){
      return it.fields = [];
    });
    for (i$ = 0, to$ = data.length; i$ < to$; ++i$) {
      i = i$;
      if (!data[i].bind || !$scope.dimension[data[i].bind]) {
        continue;
      }
      ((ref$ = (ref1$ = $scope.dimension)[key$ = data[i].bind] || (ref1$[key$] = {})).fields || (ref$.fields = [])).push(data[i]);
    }
    return sendMsg({
      type: 'update-data',
      data: $scope.dimension
    });
  };
  eventBus.listen('dataset.changed', function(data){
    $scope.updateData(data);
    return $scope.data = data;
  });
  $scope.loadSampleData = function(){
    return sendMsg({
      type: 'get-sample-data'
    });
  };
  $scope.iframe = document.querySelector('#editor-canvas iframe');
  $scope.framewin = $scope.iframe.contentWindow;
  sendMsg = function(it){
    return $scope.framewin.postMessage(it, $scope.plotdbDomain);
  };
  $scope.download = {
    loading: false,
    data: null,
    fetch: function(format){
      format == null && (format = 'svg');
      this.format = format;
      this.loading = true;
      this.data = false;
      this.ready = false;
      this.format = format;
      this.loading = true;
      return sendMsg({
        type: 'snapshot',
        format: format
      });
    }
  };
  dispatcher = function(evt){
    var res$, k, ref$, v, data;
    if (evt.data.type === 'inited') {
      $scope.dimension = JSON.parse(evt.data.dimension);
      res$ = [];
      for (k in ref$ = $scope.dimension) {
        v = ref$[k];
        res$.push({
          name: k,
          multiple: v.multiple
        });
      }
      $scope.dimkeys = res$;
    }
    if (evt.data.type === 'sample-data') {
      $scope.data = data = evt.data.data;
      eventBus.fire('dataset.update.fields', data, $scope.dimkeys);
      $scope.updateData(data);
    }
    if (evt.data.type === 'snapshot') {
      return $scope.$apply(function(){
        var ref$, payload, format, size, url, bytes, mime, buf, ints, i$, to$, idx;
        ref$ = evt.data, payload = ref$.payload, format = ref$.format;
        if (payload) {
          if (/svg/.exec(format)) {
            size = payload.length;
            url = URL.createObjectURL(new Blob([payload], {
              type: 'image/svg+xml'
            }));
          } else if (/png/.exec(format)) {
            bytes = atob(payload.split(',')[1]);
            mime = payload.split(',')[0].split(':')[1].split(';')[0];
            buf = new ArrayBuffer(bytes.length);
            ints = new Uint8Array(buf);
            for (i$ = 0, to$ = bytes.length; i$ < to$; ++i$) {
              idx = i$;
              ints[idx] = bytes.charCodeAt(idx);
            }
            size = bytes.length;
            url = URL.createObjectURL(new Blob([buf], {
              type: 'image/png'
            }));
          }
        }
        return import$($scope.download, {
          loading: false,
          ready: payload ? true : false,
          url: url,
          size: size,
          filename: 'tmp'
        });
      });
    }
  };
  window.addEventListener('message', dispatcher, false);
  init = function(code){
    if (typeof code === 'number') {
      return plotdb.load(code, function(chart){
        $scope.chart = JSON.parse(chart._._chart);
        $scope.updateCode();
        return reset($scope.chart);
      });
    }
  };
  reset = function(chart){
    $scope.iframe.src = "/dev/render.html";
    return $scope.iframe.onload = function(){
      return $scope.library.load(chart.library).then(function(library){
        return sendMsg({
          type: 'init',
          src: JSON.stringify(chart),
          library: library
        });
      });
    };
  };
  init(2241);
  return import$($scope, {
    settingPanel: {
      tab: 'publish',
      init: function(){
        var this$ = this;
        $scope.permtype = (window.permtype || (window.permtype = []))[1] || 'none';
        $scope.writable = permService.isEnough($scope.permtype, 'write');
        $scope.isAdmin = permService.isEnough($scope.permtype, 'admin');
        $scope.$watch('settingPanel.chart', function(cur, old){
          var k, v, results$ = [];
          for (k in cur) {
            v = cur[k];
            if (!v && !old[k]) {
              continue;
            }
            results$.push($scope.chart[k] = v);
          }
          return results$;
        }, true);
        $scope.$watch('chart.inherit', function(it){
          return this$.chart.inherit = it;
        }, true);
        $scope.$watch('chart.basetype', function(it){
          return this$.chart.basetype = it;
        });
        $scope.$watch('chart.visualencoding', function(it){
          return this$.chart.visualencoding = it;
        });
        $scope.$watch('chart.category', function(it){
          return this$.chart.category = it;
        });
        $scope.$watch('chart.tags', function(it){
          return this$.chart.tags = it;
        });
        return $scope.$watch('chart.library', function(it){
          return this$.chart.library = it;
        });
      },
      toggle: function(tab){
        if (tab) {
          this.tab = tab;
        }
        return this.toggled = !this.toggled;
      },
      toggled: false,
      chart: {
        basetype: null,
        visualencoding: null,
        category: null,
        tags: null,
        library: null,
        inherit: null
      }
    }
  });
}));
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}