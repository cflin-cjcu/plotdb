// Generated by LiveScript 1.3.1
var x$, slice$ = [].slice;
x$ = angular.module('plotDB');
x$.service('initWrap', ['$rootScope'].concat(function($rootScope){
  var init;
  init = function(it){
    (init.list || (init.list = [])).push(it);
    return import$(it, {
      promise: {},
      finish: function(name){
        var payload, res;
        name == null && (name = 'default');
        payload = slice$.call(arguments, 1);
        if (!this.promise[name]) {
          return;
        }
        res = this.promise[name].res;
        this.promise[name] = null;
        return res.apply(null, payload);
      },
      block: function(name){
        var this$ = this;
        name == null && (name = 'default');
        return new Promise(function(res, rej){
          return this$.promise[name] = {
            res: res,
            rej: rej
          };
        });
      }
    });
  };
  return init.run = function(){
    return (init.list || (init.list = [])).map(function(it){
      return it.init();
    });
  }, init;
}));
x$.directive('pldialog', ['$compile'].concat(function($compile){
  return {
    restrict: 'A',
    scope: {
      model: '=ngModel'
    },
    link: function(s, e, a, c){
      var ctrl;
      s.model.ctrl = ctrl = {
        promise: null,
        focus: function(){
          var n;
          n = e.find("input[tabindex='1']");
          if (n.length) {
            return n.focus();
          }
        },
        toggle: function(t, v){
          this.toggled = t
            ? t
            : !this.toggled;
          if (v) {
            this.value = v;
          }
          return this.focus();
        },
        toggled: false,
        value: null,
        reset: function(){
          return this.value = '';
        },
        init: function(){
          this.reset();
          return e.on('keydown', function(event){
            var key, tabindex, n;
            key = event.keyCode || event.which;
            if (key !== 13) {
              return;
            }
            tabindex = +event.target.getAttribute("tabindex") + 1;
            n = e.find("input[tabindex='" + tabindex + "']");
            if (n.length) {
              return n.focus();
            } else {
              return s.$apply(function(){
                return s.model.action('done');
              });
            }
          });
        }
      };
      s.model.action = function(a){
        if (a === 'done') {
          s.model.value = ctrl.value;
        }
        ctrl.toggle(false);
        if (ctrl.promise) {
          if (a === 'done') {
            ctrl.promise.res(ctrl.value);
          } else {
            ctrl.promise.rej(a);
          }
          return ctrl.promise = null;
        }
      };
      s.model.prompt = function(v){
        var this$ = this;
        s.$apply(function(){
          return ctrl.toggle(true, v);
        });
        return new Promise(function(res, rej){
          return ctrl.promise = {
            res: res,
            rej: rej
          };
        });
      };
      return s.model.ctrl.init();
    }
  };
}));
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}