// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('plotDB');
x$.servie('dataParser', $scope.parser = {
  progress: function(sec){
    var progress, this$ = this;
    sec == null && (sec = 2000);
    progress = 0;
    if (this.progressHandler) {
      $interval.cancel(this.progressHandler);
    }
    return this.progressHandler = $interval(function(){
      progress = progress + (100 - progress) / (progress < 80 ? 4 : 8);
      if (progress > 97) {
        $interval.cancel(this$.progressHandler);
        this$.progresHandler = 0;
      }
      return eventBus.fire('loading.dimmer.progress', progress);
    }, sec / 6);
  }
}, $scope.parser.plotdb = {
  toggle: function(v){
    return this.toggled = v != null
      ? v
      : !this.toggled;
  },
  toggled: false,
  load: function(dataset){
    var this$ = this;
    eventBus.fire('loading.dimmer.on', 1);
    $scope.parser.progress(3000);
    return $scope.load(dataset._type, dataset.key).then(function(){
      this$.toggle(false);
      return eventBus.fire('loading.dimmer.off');
    });
  }
}, $scope.parser.csv = {
  encodings: ['UTF-8', 'BIG5', 'GB2312', 'ISO-8859-1'],
  encoding: 'UTF-8',
  worker: null,
  toggle: function(v){
    return this.toggled = v != null
      ? v
      : !this.toggled;
  },
  toggled: false,
  askencoding: function(it){
    $scope.parser.csv.callback = it;
    return $scope.parser.csv.toggle(true);
  },
  gotencoding: function(){
    return this.callback();
  },
  'import': function(buf, file){
    var node;
    file == null && (file = {});
    if (file.name && !/\.csv$/.exec(file.name)) {
      alert("it's not a CSV file");
      return;
    }
    node = document.getElementById('dataset-import-dropdown') || document.getElementById('dataset-import-dropdown-inline');
    node.className = node.className.replace(/open/, '');
    $scope.parser.csv.buf = buf;
    $scope.parser.csv.toggle(false);
    return $scope.parser.csv.read();
  },
  read: function(_buf, verbose){
    var this$ = this;
    verbose == null && (verbose = true);
    return new Promise(function(res, rej){
      var buf, sec;
      buf = _buf;
      if (!(buf != null)) {
        buf = this$.buf;
      }
      if (!buf) {
        buf = "";
      }
      if (verbose) {
        eventBus.fire('loading.dimmer.on', 1);
      }
      sec = buf.length * 1.3 / 1000;
      $scope.parser.progress(sec);
      if (!this$.worker) {
        this$.worker = new Worker('/js/data/worker/csv.js');
      }
      this$.worker.onmessage = function(e){
        var data;
        data = e.data.data;
        $scope.$apply(function(){
          $scope.grid.data.rows = data.rows;
          $scope.grid.data.headers = data.headers;
          $scope.grid.data.types = data.types;
          return $scope.grid.data.size = buf.length;
        });
        return $scope.grid.render().then(function(){
          return $scope.$apply(function(){
            this$.toggle(false);
            this$.buf = null;
            if (verbose) {
              eventBus.fire('loading.dimmer.off');
            }
            $scope.loading = false;
            return res();
          });
        });
      };
      return this$.worker.postMessage({
        buf: buf
      });
    });
  }
}, $scope.parser.xls = {
  worker: null,
  sheets: {
    toggled: false,
    toggle: function(it){
      var res;
      this.toggled = it != null
        ? it
        : !this.toggled;
      if (!this.toggled && this.promise) {
        res = this.promise.res;
        this.promise = null;
        return res();
      }
    },
    list: [],
    title: null,
    choose: function(it){
      this.title = it;
      $scope.parser.progress($scope.parser.xls.sec);
      eventBus.fire('loading.dimmer.on', 1);
      this.toggle(false);
      return $scope.parser.xls.worker.postMessage({
        type: 'get-sheet',
        buf: $scope.parser.xls.buf,
        sheetName: this.title
      });
    }
  },
  read: function(buf, file){
    var xls, sec, node, this$ = this;
    xls = $scope.parser.xls;
    xls.sheets.title = null;
    xls.buf = buf;
    if (file.name && !/\.xlsx?/.exec(file.name)) {
      alert("it's not a Microsoft Excel file");
      return;
    }
    eventBus.fire('loading.dimmer.on', 1);
    xls.sec = sec = buf.length * 2.5 / 1000;
    $scope.parser.progress(sec);
    if (!xls.worker) {
      xls.worker = new Worker('/js/data/worker/excel.js');
      xls.worker.onmessage = function(e){
        return $scope.$apply(function(){
          var data;
          if (e.data.type === 'sheet-list') {
            xls.sheets.toggle(true);
            xls.sheets.list = e.data.data;
            eventBus.fire('loading.dimmer.off');
          }
          if (e.data.type === 'sheet') {
            data = e.data.data;
            $scope.grid.data.headers = data.headers;
            $scope.grid.data.rows = data.rows;
            $scope.grid.data.types = data.types;
            $scope.grid.data.size = buf.length;
            return $scope.grid.render().then(function(){
              return $scope.$apply(function(){
                eventBus.fire('dataset.changed', $scope.grid.data.fieldize());
                return eventBus.fire('loading.dimmer.off');
              });
            });
          }
        });
      };
    }
    node = document.getElementById('dataset-import-dropdown') || document.getElementById('dataset-import-dropdown-inline');
    node.className = node.className.replace(/open/, '');
    return $timeout(function(){
      return xls.worker.postMessage({
        type: 'get-sheet-list',
        buf: buf
      });
    }, 100);
  }
}, $scope.parser.gsheet = {
  url: null,
  apiKey: 'AIzaSyD3emlU63t6e_0n9Zj9lFCl-Rwod0OMTqY',
  clientId: '1003996266757-4gv30no8ije0sd8d8qsd709dluav0676.apps.googleusercontent.com',
  scopes: ['profile', 'https://www.googleapis.com/auth/drive.metadata.readonly', 'https://www.googleapis.com/auth/spreadsheets.readonly'].join(' '),
  init: function(){
    var this$ = this;
    if (typeof gapi == 'undefined' || gapi === null) {
      return;
    }
    return gapi.load('client:auth2', function(){
      gapi.client.load('drive', 'v3');
      gapi.client.setApiKey(this$.apiKey);
      gapi.auth2.init({
        client_id: this$.clientId,
        scope: this$.scopes
      });
      Paging.loadOnScroll(function(){
        return $scope.parser.gsheet.list();
      }, '#gsheet-list-end', '#gsheet-files');
      return $scope.$watch('parser.gsheet.title', function(n, o){
        if (n !== o) {
          return this$.list(true);
        }
      });
    });
  },
  files: [],
  auth: function(){
    var auth;
    if (typeof gapi == 'undefined' || gapi === null) {
      return;
    }
    auth = gapi.auth2.getAuthInstance();
    if (auth.isSignedIn.get()) {
      return auth;
    } else {
      eventBus.fire('loading.dimmer.on');
      return auth.signIn();
    }
  },
  list: function(flush){
    var this$ = this;
    flush == null && (flush = false);
    if (this.loading) {
      return;
    }
    this.loading = true;
    return this.auth().then(function(){
      var config, request;
      eventBus.fire('loading.dimmer.off');
      config = {
        pageSize: 40,
        fields: "nextPageToken, files(id, name)",
        q: "mimeType='application/vnd.google-apps.spreadsheet'" + (this$.title ? " and name contains '" + this$.title + "'" : '')
      };
      if (this$.pageToken) {
        config.pageToken = this$.pageToken;
      }
      request = gapi.client.drive.files.list(config);
      return request.execute(function(ret){
        if (flush) {
          this$.files = [];
        }
        this$.pageToken = ret.nextPageToken;
        return $scope.$apply(function(){
          this$.files = this$.files.concat((ret.files || (ret.files = [])).map(function(it){
            return {
              file: it
            };
          }));
          return this$.loading = false;
        });
      });
    });
  },
  toggle: function(it){
    this.toggled = it != null
      ? it
      : !this.toggled;
    if (this.toggled && !this.files.length) {
      return this.list();
    }
  },
  sheets: {
    toggled: false,
    toggle: function(it){
      var res;
      this.toggled = it != null
        ? it
        : !this.toggled;
      if (!this.toggled && this.promise) {
        res = this.promise.res;
        this.promise = null;
        return res();
      }
    },
    list: [],
    title: null,
    promise: null,
    load: function(file){
      var this$ = this;
      return gapi.client.sheets.spreadsheets.get({
        spreadsheetId: file.id
      }).then(function(ret){
        this$.list = ret.result.sheets.map(function(it){
          return it.properties.title;
        });
        if (this$.list.length === 1) {
          this$.title = this$.list[0];
          return Promise.resolve();
        }
        eventBus.fire('loading.dimmer.off');
        $scope.parser.gsheet.toggle(false);
        this$.toggle(true);
        return new Promise(function(res, rej){
          return this$.promise = {
            res: res,
            rej: rej
          };
        });
      });
    }
  },
  load: function(file){
    var this$ = this;
    file = file.file;
    eventBus.fire('loading.dimmer.on', 1);
    $scope.parser.progress(3000);
    return gapi.client.load('https://sheets.googleapis.com/$discovery/rest?version=v4').then(function(){
      return $scope.parser.gsheet.sheets.load(file);
    }).then(function(){
      return this$.toggle(false);
    }).then(function(){
      eventBus.fire('loading.dimmer.on', 1);
      $scope.parser.progress(3000);
      return gapi.client.sheets.spreadsheets.values.get({
        spreadsheetId: file.id,
        range: this$.sheets.title + "!A:ZZ"
      });
    }).then(function(ret){
      var list, data;
      list = ret.result.values;
      list = list.filter(function(it){
        return it.filter(function(it){
          return (it || "").trim().length;
        }).length;
      });
      data = $scope.grid.data;
      $scope.$apply(function(){
        var h;
        data.headers = h = list[0];
        list.splice(0, 1);
        data.rows = list;
        data.types = plotdb.Types.resolve(data);
        return data.size = (ret.body || "").length;
      });
      return $scope.grid.render().then(function(){
        return $scope.$apply(function(){
          this$.toggled = false;
          eventBus.fire('loading.dimmer.off');
          return eventBus.fire('dataset.changed', $scope.grid.data.fieldize());
        });
      });
    }, function(){
      var this$ = this;
      return $scope.$apply(function(){
        plNotify.send('danger', "can't load sheet, try again later?");
        return eventBus.fire('loading.dimmer.off');
      });
    });
  }
});