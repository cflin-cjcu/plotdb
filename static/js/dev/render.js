// Generated by LiveScript 1.3.1
var plotdbDomain, sendMsg, loadscript, loadlib, store, errorHandling, properEval, saveLocal, dispatcher, snapshot;
plotdbDomain = "http://localhost/";
sendMsg = function(msg){
  return window.parent.postMessage(msg, plotdbDomain);
};
loadscript = function(lib, url){
  return new Promise(function(res, rej){
    var x$, node;
    x$ = node = document.createElement('script');
    x$.type = 'text/javascript';
    x$.src = url;
    x$.onload = function(){
      return res(lib);
    };
    return document.head.appendChild(node);
  });
};
loadlib = function(payload){
  var head, k, promise, lib, url;
  head = document.getElementsByTagName("head")[0];
  if (!(function(){
    var results$ = [];
    for (k in payload.library || {}) {
      results$.push(k);
    }
    return results$;
  }()).length) {
    (payload.library || (payload.library = {}))['legacy/0.0.1'] = plotdbDomain + "/js/pack/legacy.js";
  }
  return promise = Promise.each((function(){
    var ref$, results$ = [];
    for (lib in ref$ = payload.library) {
      url = ref$[lib];
      results$.push({
        lib: lib,
        url: url
      });
    }
    return results$;
  }()), function(d){
    return loadscript(d.lib, d.url);
  });
};
store = {
  code: {}
};
errorHandling = function(e, lineno){
  /*
  msg = if store.code.url => if e.error.stack => "line #{e.lineno}: " + that.split(store.code.url).join("line ")
  else "line #{e.lineno}: #{e.message}"
  error-handling msg, e.lineno
  */
  var msg, reBloburl, ret, lines;
  lineno == null && (lineno = 0);
  if (!e) {
    msg = "failed with unknown error";
  } else if (typeof e !== typeof {}) {
    msg = e + "";
  } else if (!e.stack) {
    msg = e.toString();
  } else {
    msg = e.stack;
  }
  reBloburl = /blob:http%3A\/\/[^:]+:/;
  if (reBloburl.exec(msg)) {
    msg = msg.split(reBloburl).join("line ");
  }
  if (!lineno) {
    ret = /line (\d+):\d+/.exec(msg);
    lineno = ret ? parseInt(ret[1]) : 0;
  }
  if (msg.length > 1024) {
    msg = msg.substring(0, 1024) + "...";
  }
  lines = msg.split('\n');
  if (lines.length > 4) {
    msg = lines.splice(0, 4).join('\n');
  }
  return window.parent.postMessage({
    type: 'error',
    data: {
      msg: msg,
      lineno: lineno
    }
  }, plotdbDomain);
};
window.addEventListener('error', function(e){
  return errorHandling(e.error, e.lineno);
});
properEval = function(src){
  return new Promise(function(res, rej){
    var code, script;
    code = src.trim()[0] === '{'
      ? "(function() { store.module = " + src + ";})()"
      : "(function() { " + src + "; store.module = {}; })()";
    script = document.createElement("script");
    script.onload = function(){
      URL.revokeObjectURL(script.src);
      res(store.module);
      return document.body.removeChild(script);
    };
    script.src = (store.code || (store.code = {})).url = URL.createObjectURL(new Blob([code], {
      type: "text/javascript"
    }));
    return document.body.appendChild(script);
  });
};
saveLocal = function(chart, key){
  return function(cb){
    var req;
    req = new XMLHttpRequest();
    req.onload = function(){
      if (cb) {
        return cb();
      }
    };
    req.open('put', plotdbDomain + "/e/chart/" + key + "/local", true);
    req.setRequestHeader('Content-Type', "application/json;charset=UTF-8");
    return req.send(JSON.stringify(chart.local));
  };
};
dispatcher = function(evt){
  var chart, obj, data;
  if (evt.data.type === 'set-config') {
    chart = store.chart;
    chart.config(evt.data.config);
    chart.resize();
    chart.render();
  }
  if (evt.data.type === 'init') {
    obj = JSON.parse(evt.data.src);
    loadlib(evt.data).then(function(){
      return properEval(obj.code.content);
    }).then(function(module){
      var chart, data;
      store.chart = chart = new plotdb.view.chart(obj);
      chart.attach('body > div:first-of-type', {});
      sendMsg({
        type: 'inited',
        dimension: JSON.stringify(chart._.chart.dimension)
      });
      plotdb.chart.getSampleData(module);
      data = plotdb.chart.fieldsFromDimension(module.dimension);
      return sendMsg({
        type: 'sample-data',
        data: data
      });
    });
  }
  if (evt.data.type === 'save') {
    snapshot('png').then(function(payload){
      return sendMsg((payload.type = 'save', payload));
    });
  }
  if (evt.data.type === 'snapshot') {
    snapshot(evt.data.format).then(function(payload){
      return sendMsg((payload.type = 'snapshot', payload));
    });
  }
  if (evt.data.type === 'update-data') {
    chart = store.chart;
    chart.data(evt.data.data, true);
  }
  if (evt.data.type === 'get-local') {
    sendMsg({
      type: 'local-data',
      data: store.module.local
    });
  }
  if (evt.data.type === 'get-sample-data') {
    chart = store.module;
    if (!chart) {
      return;
    }
    plotdb.chart.getSampleData(chart);
    data = plotdb.chart.fieldsFromDimension(chart.dimension);
    return window.parent.postMessage({
      type: 'sample-data',
      data: data
    }, plotdbDomain);
  }
};
window.addEventListener('message', dispatcher, false);
snapshot = function(format){
  format == null && (format = 'snapshot');
  return new Promise(function(res, rej){
    var allsvg, list, i$, to$, i, g, box, svgnode, styles, idx, style, ref$, width, height, inlineStyle, rate, svg, rgbaPercentToValue, img, encoded, e;
    try {
      Array.from(document.querySelectorAll('body > div:first-of-type svg')).forEach(function(node){
        var ref$, width, height, x$;
        ref$ = node.getBoundingClientRect(), width = ref$.width, height = ref$.height;
        x$ = node;
        x$.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        x$.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
        x$.setAttribute("width", width);
        x$.setAttribute("height", height);
        return x$;
      });
      allsvg = document.querySelectorAll('body > div:first-of-type svg');
      if (allsvg.length > 1) {
        list = Array.from(allsvg).map(function(it){
          var box;
          box = it.getBoundingClientRect();
          return [it.cloneNode(true), (box.right - box.left) * (box.bottom - box.top), it];
        });
        list.sort(function(a, b){
          return b[1] - a[1];
        });
        for (i$ = 1, to$ = list.length; i$ < to$; ++i$) {
          i = i$;
          g = document.createElementNS("http://www.w3.org/2000/svg", "g");
          g.appendChild(list[i][0]);
          list[0][0].insertBefore(g, list[0][0].childNodes[0]);
          box = list[i][2].getBoundingClientRect();
          g.setAttribute("transform", "translate(" + box.left + "," + box.top + ")");
        }
        svgnode = list[0][0];
      } else {
        svgnode = document.querySelector('body > div:first-of-type svg').cloneNode(true);
      }
      styles = svgnode.querySelectorAll("style");
      for (i$ = 0, to$ = styles.length; i$ < to$; ++i$) {
        idx = i$;
        style = styles[idx];
        if (!style.generated) {
          continue;
        }
        svgnode.removeChild(style);
      }
      styles = document.querySelectorAll('html style');
      for (i$ = styles.length - 1; i$ >= 0; --i$) {
        idx = i$;
        style = styles[idx].cloneNode(true);
        style.generated = true;
        svgnode.insertBefore(style, svgnode.childNodes[0]);
      }
      ref$ = svgnode.getBoundingClientRect(), width = ref$.width, height = ref$.height;
      inlineStyle = svgnode.getAttribute('style');
      svgnode.setAttribute('style', inlineStyle + ";" + document.querySelector("body > div:first-of-type > div").getAttribute('style'));
      svgnode.setAttribute('xmlns', "http://www.w3.org/2000/svg");
      svgnode.setAttribute('xmlns:xlink', "http://www.w3.org/1999/xlink");
      ref$ = svgnode.getBoundingClientRect(), width = ref$.width, height = ref$.height;
      if (!width || !height) {
        width = +(svgnode.getAttribute("width") || 0) || +(svgnode.style.width || "").replace(/[^0-9]+$/, "");
        height = +(svgnode.getAttribute("height") || 0) || +(svgnode.style.height || "").replace(/[^0-9]+$/, "");
      }
      if (format === 'png-hd') {
        if (width > 1920 || height > 1920) {
          width = Math.round(width * 2.1);
          height = Math.round(height * 2.1);
        } else {
          rate = 4000 / ((height > width ? width : height) || 1);
          width = width * rate;
          height = height * rate;
        }
        svgnode.setAttribute("width", width);
        svgnode.setAttribute("height", height);
      }
      Array.from(svgnode.querySelectorAll('*')).forEach(function(it){
        if (it.style.opacity === 0 || it.getAttribute('opacity') === 0 || it.getAttribute('display') === 'none' || it.style.display === 'none') {
          return it.parentNode.removeChild(it);
        }
      });
      svg = svgnode.outerHTML;
      rgbaPercentToValue = function(text){
        var re, str, ret, des;
        re = new RegExp(["([a-zA-Z-]+)\\s*", "([=:]?)\\s*(['\"]?)\\s*", "rgba\\(\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+)\\s*\\)\\s*\\3"].join(""));
        str = text + "";
        for (;;) {
          ret = re.exec(str);
          if (!ret) {
            break;
          }
          des = [ret[1], ret[2] === ':' ? ':#' : '="#', [ret[4], ret[5], ret[6]].map(fn$).join(''), ret[2] === ':' ? ';' : '" ', ret[1], '-opacity', ret[2] === ':' ? ':' : '="', ret[7], ret[2] === ':' ? '' : '"'].join("");
          text = text.replace(ret[0], des);
          str = str.substring(ret.index + ret[1].length);
        }
        return text;
        function fn$(it){
          var v;
          if (it[it.length - 1] === '%') {
            v = Math.round(it.substring(0, it.length - 1) * 2.55).toString(16);
          } else {
            v = Math.round(+it).toString(16);
          }
          if (v.length < 2) {
            return "0" + v;
          } else {
            return v;
          }
        }
      };
      svg = rgbaPercentToValue(svg);
      svgnode.setAttribute('style', inlineStyle);
      if (format === 'svg') {
        res({
          format: 'svg',
          data: svg
        });
      }
      img = new Image();
      img.onload = function(){
        var canvas, ref$;
        canvas = (ref$ = document.createElement("canvas"), ref$.width = width, ref$.height = height, ref$);
        canvas.getContext('2d').drawImage(img, 0, 0, width, height, 0, 0, width, height);
        return res({
          format: format,
          data: canvas.toDataURL()
        });
      };
      encoded = base64.encode(utf8.encode(svg));
      return img.src = "data:image/svg+xml;charset=utf-8;base64," + encoded;
    } catch (e$) {
      e = e$;
      console.log(e);
      return res({
        format: format,
        data: null
      });
    }
  });
};