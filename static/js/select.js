// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('plotDB');
x$.controller('plSelectController', ['$scope'].concat(function($scope){
  $scope.portal = {
    data: [],
    options: []
  };
  $scope.init = function(data, type, scope){
    $scope.portal.data = data;
    $scope.type = type;
    return $scope.scope = scope;
  };
  $scope.getIdx = function(item){
    var idx, ret;
    idx = $scope.portal.data.indexOf(item);
    return idx < 0 ? (ret = $scope.portal.data.map(function(d, i){
      return [d.key === item.key, i];
    }).filter(function(it){
      return it[0];
    })[0], ret
      ? ret[1]
      : -1) : idx;
  };
  $scope.remove = function(item, $event){
    var idx;
    idx = $scope.getIdx(item);
    if (idx < 0) {
      return;
    }
    return $scope.portal.data.splice(idx, 1);
  };
  $scope.add = function(item, $event){
    var idx;
    idx = $scope.getIdx(item);
    if (idx < 0) {
      return;
    }
    return $scope.portal.data.push(item);
  };
  return $scope.toggle = function(item, $event){
    var idx;
    idx = $scope.getIdx(item);
    if (idx < 0) {
      return $scope.portal.data.push(item);
    } else {
      return $scope.portal.data.splice(idx, 1);
    }
  };
}));
x$.directive('plselect', ['$compile', '$timeout', 'entityService', '$http'].concat(function($compile, $timeout, entityService, $http){
  return {
    require: [],
    restrict: 'A',
    scope: {
      portal: '=ngPortal',
      type: '@ngType',
      scope: '@ngScope'
    },
    link: function(s, e, a, c){
      var dropdownCloseOnClick, autoHideInput, config, dropdown, input, paging, idmap, sync, fetch, repos, close;
      dropdownCloseOnClick = true;
      autoHideInput = false;
      config = entityService.config.plselect[s.type || 'entity'];
      dropdown = e.find('.select-dropdown');
      input = e.find('input');
      input.attr('placeholder', config.placeholder) || 'search...';
      paging = {
        limit: 20,
        offset: 0
      };
      idmap = {};
      sync = function(){
        var k, ref$, v;
        s.portal.options.map(function(it){
          return idmap[it.key] = it;
        });
        for (k in ref$ = idmap) {
          v = ref$[k];
          v.selected = false;
        }
        return s.portal.data.forEach(function(it){
          if (idmap[it.key] && it.type === idmap[it.key].type) {
            return idmap[it.key].selected = true;
          }
        });
      };
      s.$watch('portal.data', function(){
        return sync();
      }, true);
      s.$watch('portal.options', function(){
        return sync();
      }, true);
      fetch = function(keyword, reset){
        reset == null && (reset = false);
        s.portal.loading = (s.portal.loading || 0) + 1 || 1;
        return $timeout(function(){
          if (reset) {
            paging.offset = 0;
            s.portal.end = false;
          }
          return $http({
            url: config.ajax.url,
            method: 'GET',
            params: config.ajax.param(keyword, paging.limit, paging.offset, s.scope)
          }).success(function(d){
            if (!d || d.length === 0) {
              s.portal.end = true;
            }
            if (paging.offset === 0) {
              s.portal.options = d;
            } else {
              s.portal.options = (s.portal.options || []).concat(d);
            }
            s.portal.loading--;
            if (s.portal.loading < 0) {
              s.portal.loading = 0;
            }
            return paging.offset += paging.limit;
          });
        }, 1000);
      };
      repos = function(){
        var last, scrolltop, base, x, y, w;
        if (!e[0]) {
          return;
        }
        last = e.find('.select-input div.select-option:last-of-type')[0];
        scrolltop = e.find('.select-input')[0].scrollTop;
        base = e[0].getBoundingClientRect();
        if (last) {
          last = last.getBoundingClientRect();
        } else {
          last = {
            left: base.left,
            width: 0,
            top: base.top + 6,
            height: base.height
          };
        }
        x = last.left + last.width - base.left + 4;
        y = last.top - base.top - 1 + scrolltop;
        w = base.width - x - 10;
        repos.newline = false;
        if (w < last.width) {
          repos.newline = true;
          x = 6;
          y = last.bottom + 3 - base.top + scrolltop;
          w = base.width - 12;
        }
        input.css('left', x + "px");
        input.css('top', y + "px");
        input.css('width', w > 10 ? w + "px" : "100%");
        return input.css('position', 'absolute');
      };
      close = function(delay){
        if (close.closing) {
          $timeout.cancel(close.closing);
        }
        return close.closing = $timeout(function(){
          close.closing = 0;
          dropdown.hide();
          e.removeClass('open');
          if (autoHideInput && repos.newline) {
            return input.hide();
          }
        }, delay);
      };
      close.closing = 0;
      close.cancel = function(){
        if (close.closing) {
          $timeout.cancel(close.closing);
        }
        return close.closing = 0;
      };
      s.$watch('portal.data', function(){
        return $timeout(function(){
          return repos();
        }, 10);
      }, true);
      e.find('.select-input').on('click', function(it){
        repos();
        if (it.target.tagName === 'I' && it.target.className === "fa fa-close") {
          return;
        }
        input.show();
        input.focus();
        if (input.val()) {
          dropdown.show();
          e.addClass('open');
          return repos();
        }
      });
      dropdown.on('click', function(){
        if (dropdownCloseOnClick) {
          return;
        }
        close.cancel();
        input.show();
        input.focus();
        if (input.val()) {
          dropdown.show();
          e.addClass('open');
          return repos();
        }
      });
      input.on('blur', function(){
        return close(100);
      });
      input.on('keydown', function(ev){
        var keycode, lastValue;
        keycode = ev.keyCode;
        if (keycode === 27) {
          return input.blur();
        }
        e.addClass('open');
        dropdown.show();
        s.portal.options = [];
        lastValue = input.val();
        return $timeout(function(){
          paging = {
            limit: 20,
            offset: 0
          };
          s.portal.needchar = 3 - input.val().length;
          if (input.val().length >= 3) {
            fetch(input.val(), true);
          }
          if (ev.keyCode === 8 && !input.val() && !lastValue) {
            return s.$apply(function(){
              s.portal.data.splice(s.portal.data.length - 1, 1);
              return repos();
            });
          }
        }, 0);
      });
      return dropdown.on('scroll', function(ev){
        var base, last, y;
        base = dropdown[0].getBoundingClientRect();
        last = dropdown.find('.select-option');
        if (!last.length) {
          return;
        }
        last = last[last.length - 1].getBoundingClientRect();
        y = last.top + last.height - base.top - base.height;
        if (y < 5 && !s.portal.loading && !s.portal.end) {
          return s.$apply(function(){
            return fetch(input.val());
          });
        }
      });
    }
  };
}));
x$.controller('selecttest', ['$scope'].concat(function($scope){
  $scope.blah = [
    {
      key: 2,
      displayname: "Kirby",
      avatar: "team-29"
    }, {
      key: 3,
      displayname: "PlotDB",
      avatar: "team-32"
    }, {
      key: 4,
      displayname: "twstat",
      avatar: "team-33"
    }, {
      key: 5,
      displayname: "CWB",
      avatar: "team-29"
    }
  ];
  $scope.test = [];
  return $scope.gogo = function(){
    return $scope.blah = [{
      key: 123,
      displayname: '123',
      id: 123
    }];
  };
}));