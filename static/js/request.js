// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('plotDB');
x$.service('requestService', ['$rootScope', '$http', 'plConfig', 'sampleChart', 'IOService', 'baseService'].concat(function($rootScope, $http, plConfig, sampleChart, IOService, baseService){
  var service, object, requestService;
  service = {
    link: function(request){
      return "/request/" + request.key + "/";
    }
  };
  object = function(src, lazy){
    var ret;
    lazy == null && (lazy = false);
    import$(this, {
      name: 'untitled',
      owner: null
    });
    import$(this, src);
    this.brief = this.content.replace(/<[^>]+?>/g, "");
    ret = /<img src="([^"]+)"/.exec(this.content, 'm');
    this.img = ret ? ret[1] : "";
    return this;
  };
  requestService = baseService.derive('request', service, object);
  return requestService;
}));
x$.controller('plRequest', ['$scope', '$timeout', '$http', 'plNotify'].concat(function($scope, $timeout, $http, plNotify){
  var editor;
  editor = new MediumEditor($('#request-editor .editable')[0], {
    toolbar: {
      buttons: ['bold', 'italic', 'underline', 'list-extension']
    },
    extensions: {
      'list-extension': new MediumEditorList()
    },
    placeholder: {
      text: 'I want to make a chart of ....'
    },
    mediumEditorList: {
      newParagraphTemplate: '<li>...</li>',
      buttonTemplate: '<b>List</b>',
      addParagraphTemplate: 'Add new paragraph',
      isEditable: true
    }
  });
  $('#request-editor .editable').mediumInsert({
    editor: editor,
    addons: {
      images: {
        fileUploadOptions: {
          url: '/d/comment/image',
          acceptFileTypes: /(.|\/)(gif|jpe?g|png)$/i
        },
        deleteScript: '/d/comment/image',
        deleteMethod: 'DELETE'
      }
    }
  });
  $scope.name = "";
  $scope.config = {
    deadline: new Date(),
    ie8: false,
    mobile: false,
    realtime: false,
    'static': false
  };
  $scope.response = function(){
    var content, key;
    content = editor.serialize()["element-0"].value;
    if (!window.request || !window.request.key) {
      return;
    }
    key = window.request.key;
    return $http({
      url: "/d/request/" + key + "/comment",
      method: 'POST',
      data: {
        content: content
      }
    }).success(function(d){
      $timeout(function(){
        return window.location.href = "/request/" + key;
      }, 1000);
      return plNotify.send('success', "comment posted");
    }).error(function(){
      return plNotify.send('error', "fail to post comment. try again later?");
    });
  };
  return $scope.submit = function(){
    var content;
    content = editor.serialize()["element-0"].value;
    return $http({
      url: '/d/request/',
      method: 'POST',
      data: {
        name: $scope.name,
        content: content,
        config: $scope.config
      }
    }).success(function(d){
      $timeout(function(){
        return window.location.href = "/request/" + d.request;
      }, 1000);
      return plNotify.send('success', "request posted");
    }).error(function(){
      return plNotify.send('error', "fail to post request. try again later?");
    });
  };
}));
x$.controller('requestList', ['$scope', '$http', 'plNotify', 'Paging', 'requestService', 'IOService'].concat(function($scope, $http, plNotify, Paging, requestService, IOService){
  $scope.requests = [];
  $scope.loadList = function(delay, reset){
    delay == null && (delay = 1000);
    reset == null && (reset = false);
    return Paging.load(function(){
      var payload, ref$;
      payload = (ref$ = {}, ref$.offset = Paging.offset, ref$.limit = Paging.limit, ref$);
      return IOService.listRemotely({
        name: 'request'
      }, payload);
    }, delay, reset).then(function(ret){
      var this$ = this;
      return $scope.$apply(function(){
        var data;
        data = (ret || []).map(function(it){
          return new requestService.request(it, true);
        });
        Paging.flexWidth(data);
        return $scope.requests = (reset
          ? []
          : $scope.requests).concat(data);
      });
    });
  };
  Paging.loadOnScroll(function(){
    return $scope.loadList();
  }, $('#list-end'));
  $scope.link = function(it){
    return requestService.link(it);
  };
  $scope.paging = Paging;
  return $scope.loadList(500, true);
}));
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}