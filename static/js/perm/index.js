// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('plotDB');
x$.controller('test3', ['$scope'].concat(function($scope){
  return $scope.shown = false;
}));
x$.service('permService', ['$rootScope'].concat(function($rootScope){
  var permHandler;
  permHandler = {
    type: ['none', 'list', 'read', 'comment', 'fork', 'write', 'admin'],
    forkIdx: 4,
    isFullfilled: function(){},
    caltype: function(req, perm, owner, type){
      var val;
      val = this.calc(req, perm, owner);
      val = val < this.type.indexOf(type) ? 0 : val;
      return [val, this.type[val]];
    },
    test: function(req, perm, owner, type){
      return this.calc(req, perm, owner) >= this.type.indexOf(type);
    },
    calc: function(req, perm, owner){
      var maxlv, ref$, user, token, teams, max, this$ = this;
      maxlv = function(it){
        return Math.max.apply(null, it.map(function(it){
          return it._idx;
        }));
      };
      ref$ = [req.user || null, (req.query || (req.query = {})).token || null, (req.user || (req.user = {})).teams || null], user = ref$[0], token = ref$[1], teams = ref$[2];
      if (user && +owner && user.key === +owner) {
        return this.type.indexOf('admin');
      }
      if (!perm || !(perm.list || (perm.list = [])).length) {
        return this.forkIdx;
      }
      max = 0;
      perm.list.map(function(it){
        var val;
        it._idx = this$.type.indexOf(it.perm);
        val = it.type === 'global'
          ? it._idx
          : it.type === 'user' && user && user.key === +it.target
            ? it._idx
            : it.type === 'token' && token === it.target
              ? it._idx
              : it.type === 'team' && teams && teams.indexOf(+it.target) >= 0 ? it._idx : 0;
        if (max < val) {
          return max = val;
        }
      });
      return max;
    }
  };
  return permHandler;
}));
x$.controller('permEdit', ['$scope', '$timeout'].concat(function($scope, $timeout){
  $scope.setPerm = function(it){
    var ref$;
    $scope.perm = it || {
      list: [],
      'switch': 'draft'
    };
    if (!$scope.perm.list) {
      $scope.perm.list = [];
    }
    if (!$scope.perm['switch']) {
      $scope.perm['switch'] = 'draft';
    }
    $scope.check();
    if (((ref$ = $scope.perm).list || (ref$.list = [])).length === 0) {
      $scope.addGlobal();
    }
    return $scope.perm.list.forEach(function(it){
      if (it.type === 'global') {
        return it.displayname = "Everyone", it.username = "and anonymous user", it;
      }
    });
  };
  $scope.spec = {
    permlist: ['list', 'read', 'comment', 'fork', 'write', 'admin'],
    'switch': ['publish', 'protected', 'draft'],
    type: ['user', 'team', 'global'],
    permissionObject: {
      list: {
        perm: "...",
        target: "...",
        type: "..."
      },
      'switch': "..."
    }
  };
  $scope.entities = [];
  $scope.tab = "publish";
  $scope.perm = {
    list: [{
      target: null,
      type: "global",
      perm: "fork",
      displayname: "Everyone",
      username: "and anonymous user"
    }],
    'switch': "draft"
  };
  $scope.original = JSON.stringify($scope.perm);
  $scope.permdefault = [{
    target: null,
    type: "global",
    perm: "fork",
    displayname: "Everyone",
    username: "and anonymous user"
  }];
  $scope.permEdit = {
    list: [],
    perm: "read"
  };
  $scope.addToken = function(){
    var token;
    token = Math.round(1000000000000000 * Math.random()).toString(36);
    return $scope.perm.list.push({
      target: token,
      type: "token",
      perm: $scope.permEdit.perm,
      displayname: token,
      username: "token"
    });
  };
  $scope.addGlobal = function(){
    var ref$;
    if (!$scope.hasGlobal) {
      (ref$ = $scope.perm).list = ref$.list.concat($scope.permdefault);
      return $scope.hasGlobal = true;
    }
  };
  $scope.removeMember = function(it){
    var idx;
    idx = $scope.perm.list.indexOf(it);
    if (idx < 0) {
      return;
    }
    $scope.perm.list.splice(idx, 1);
    if ($scope.perm.list.length === 0) {
      $scope.hasGlobal = false;
      return $scope.addGlobal();
    } else {
      return $scope.check();
    }
  };
  $scope.addMember = function(){
    var i$, ref$, len$, node, ref1$, type, target, matched, ret, obj;
    for (i$ = 0, len$ = (ref$ = $scope.permEdit.list).length; i$ < len$; ++i$) {
      node = ref$[i$];
      ref1$ = [node.type, node.key], type = ref1$[0], target = ref1$[1];
      matched = $scope.perm.list.filter(fn$)[0];
      if (matched) {
        matched.perm = $scope.permEdit.perm;
      } else {
        ret = {
          target: target,
          type: type,
          perm: $scope.permEdit.perm,
          displayname: node.displayname,
          username: node.type,
          avatar: node.avatar
        };
        $scope.perm.list.push(ret);
      }
    }
    $scope.permEdit.list.splice(0);
    obj = {
      list: $scope.purify(),
      'switch': $scope.perm['switch']
    };
    if (JSON.stringify(obj) !== $scope.original) {
      return $scope.needSave = true;
    } else {
      return $scope.needSave = false;
    }
    function fn$(it){
      return it.type === type && it.target === +target;
    }
  };
  $scope.purify = function(){
    return $scope.perm.list.map(function(it){
      var ref$;
      return ref$ = {}, ref$.type = it.type, ref$.target = it.target, ref$.perm = it.perm, ref$;
    });
  };
  $scope.check = function(){
    var ref$;
    return $scope.hasGlobal = !!((ref$ = $scope.perm).list || (ref$.list = [])).filter(function(it){
      return it.type === 'global';
    }).length;
  };
  return $scope.check();
}));