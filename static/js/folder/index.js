// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('plotDB');
x$.service('folderService', ['$rootScope', '$http', 'IOService', 'baseService', 'plNotify', 'eventBus', 'plConfig'].concat(function($rootScope, $http, IOService, baseService, plNotify, eventBus, plConfig){
  var service, object, folderService;
  service = {};
  object = function(){};
  folderService = baseService.derive('folder', service, object);
  return folderService;
}));
x$.controller('folderList', ['$scope', '$http', 'IOService', 'folderService', 'Paging', 'plNotify', 'eventBus'].concat(function($scope, $http, IOService, folderService, Paging, plNotify, eventBus){
  $scope.loading = true;
  $scope.folders = [];
  $scope.q = {};
  $scope.qLazy = {
    keyword: null
  };
  $scope.loadList = function(delay, reset){
    delay == null && (delay = 1000);
    reset == null && (reset = false);
    return Paging.load(function(){
      var payload, ref$;
      payload = import$(import$((ref$ = {}, ref$.offset = Paging.offset, ref$.limit = Paging.limit, ref$), $scope.q), $scope.qLazy);
      return IOService.listRemotely({
        name: 'folder'
      }, payload);
    }, delay, reset).then(function(ret){
      var this$ = this;
      return $scope.$apply(function(){
        var data;
        data = (ret || []).map(function(it){
          return new folderService.folder(it, true);
        });
        Paging.flexWidth(data);
        return $scope.folders = (reset
          ? []
          : $scope.folders).concat(data);
      });
    });
  };
  $scope.$watch('q', function(){
    return $scope.loadList(500, true);
  }, true);
  $scope.$watch('qLazy', function(){
    return $scope.loadList(1000, true);
  }, true);
  Paging.loadOnScroll(function(){
    return $scope.loadList();
  }, $('#list-end'));
  $scope.open = function(folder){
    folder = new folderService.folder({
      key: folder.key || folder
    });
    console.log(folder);
    return folder.load().then(function(folder){
      return $scope.$apply(function(){
        return $scope.activeFolder = folder;
      });
    })['catch'](function(){
      return console.log('erro');
    });
  };
  $scope['delete'] = function(key){
    var folder;
    folder = new folderService.folder({
      key: key
    });
    return folder['delete']().then(function(){
      return console.log('ok');
    })['catch'](function(){
      return console.log('err');
    });
  };
  $scope.delfrom = function(folder, item, type){
    return $http({
      url: "/d/folder/" + folder + "/content/del",
      method: "POST",
      data: {
        item: item,
        type: type
      }
    }).success(function(d){
      return plNotify.send('success', "removed");
    }).error(function(d){
      if (d === 'non-existed') {
        return plNotify.send('error', "not in folder");
      } else {
        return plNotify.send('error', "failed to move from folder. try later?");
      }
    });
  };
  $scope.addto = function(folder, item, type){
    return $http({
      url: "/d/folder/" + folder + "/content",
      method: "POST",
      data: {
        item: item,
        type: type
      }
    }).success(function(d){
      return plNotify.send('success', "added");
    }).error(function(d){
      if (d === 'existed') {
        return plNotify.send('error', "already in folder");
      } else {
        return plNotify.send('error', "failed to move to folder. try later?");
      }
    });
  };
  $scope.active = function(it){
    return $scope.folder = it;
  };
  $scope.edit = {
    toggled: false,
    toggle: function(it){
      return this.toggled = !(it != null) ? !this.toggled : it;
    }
  };
  $scope.rename = function(){
    if ($scope.folder) {
      return $scope.folder.save().then(function(){
        return plNotify.send('success', "saved");
      })['catch'](function(){
        return plNotify.send('success', "save failed. try later?");
      });
    }
  };
  return $scope.createForm = {
    name: "unnamed folder",
    permission: {
      'switch': 'publish',
      list: []
    },
    create: function(){
      var folder, ref$, ref1$, ref2$;
      console.log(1);
      folder = new folderService.folder((ref$ = (ref2$ = {}, ref2$.permission = (ref1$ = $scope.createForm).permission, ref2$.name = ref1$.name, ref2$), ref$.key = null, ref$.owner = null, ref$));
      console.log(2);
      return folder.save().then(function(){
        console.log(3);
        return console.log('ok');
      })['catch'](function(){
        return console.log('err');
      });
    }
  };
}));
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}