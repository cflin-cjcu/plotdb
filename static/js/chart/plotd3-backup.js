// Generated by LiveScript 1.3.1
var plotd3;
plotd3 = {
  svg: {},
  html: {}
};
plotd3.html.popup = function(root, sel, cb){
  var popup, x$;
  popup = root.querySelector('.pdb-popup');
  if (!popup) {
    popup = d3.select(root).append('div').attr({
      'class': 'pdb-popup float'
    });
    popup.each(function(d, i){
      var x$;
      x$ = d3.select(this);
      x$.append('div').attr({
        'class': 'title'
      });
      x$.append('div').attr({
        'class': 'value'
      });
      return x$;
    });
  } else {
    popup = d3.select(popup);
  }
  x$ = sel;
  x$.on('mousemove', function(d, i){
    var ref$, x, y, pbox, rbox;
    ref$ = [d3.event.clientX, d3.event.clientY], x = ref$[0], y = ref$[1];
    cb.call(this, d, i, popup);
    popup.style({
      display: 'block'
    });
    pbox = popup[0][0].getBoundingClientRect();
    rbox = root.getBoundingClientRect();
    x = x - pbox.width / 2;
    y = y + 20;
    if (y > rbox.top + rbox.height - pbox.height - 50) {
      y = y - pbox.height - 40;
    }
    if (x < 10) {
      x = 10;
    }
    if (x > rbox.left + rbox.width - pbox.width - 10) {
      x = rbox.left + rbox.width - pbox.width - 10;
    }
    return popup.style({
      top: y + "px",
      left: x + "px"
    });
  });
  x$.on('mouseout', function(){
    if (sel.hidePopup) {
      clearTimeout(sel.hidePopup);
    }
    return sel.hidePopup = setTimeout(function(){
      return popup.style({
        display: 'none'
      });
    }, 1000);
  });
  return x$;
};
plotd3.svg.rwdAxis = function(){
  var ret;
  ret = d3.svg.axis();
  ret.autotick = function(size, fontSize, group){
    var maxCount, scale, orient, ref$, its, ots, tp, offset, format, count, ticks, step;
    fontSize == null && (fontSize = 12);
    maxCount = 10;
    scale = this.scale();
    orient = this.orient();
    ref$ = [this.innerTickSize(), this.outerTickSize(), this.tickPadding()], its = ref$[0], ots = ref$[1], tp = ref$[2];
    offset = d3.max([its, ots]) + tp + 1;
    format = this.tickFormat();
    if (orient === 'left' || orient === 'right') {
      count = size / (2 * fontSize || 16);
      ticks = scale.ticks
        ? this.tickValues() || scale.ticks(this.ticks())
        : scale.domain();
      count = Math.ceil(ticks.length / count);
      ticks = ticks.filter(function(d, i){
        return !(i % count);
      });
      this.tickValues(ticks);
      group.call(this);
      group.selectAll('.tick text').attr({
        'font-size': fontSize
      });
      this._offset = d3.max(group.selectAll('text')[0].map(function(d, i){
        return d.getBBox().width;
      }));
      return this._offset += offset;
    } else {
      ticks = scale.ticks
        ? this.tickValues() || scale.ticks(this.ticks())
        : scale.domain();
      group.call(this);
      group.selectAll('.tick text').attr({
        'font-size': fontSize
      });
      step = 2 * d3.max(group.selectAll('text')[0].map(function(d, i){
        return d.getBBox().width;
      }));
      count = Math.ceil(ticks.length / (size / step));
      ticks = ticks.filter(function(d, i){
        return !(i % count);
      });
      this.tickValues(ticks);
      this._offset = 2 * fontSize + offset;
      if (group) {
        return group.call(this);
      }
    }
  };
  ret.offset = function(){
    return this._offset;
  };
  return ret;
};