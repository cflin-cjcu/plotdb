// Generated by LiveScript 1.3.1
plotdb.view = {
  host: plConfig.urlschema + "" + plConfig.domainIO,
  loader: function(key, cb){
    var req;
    req = new XMLHttpRequest();
    req.onload = function(){
      var e;
      try {
        return cb(new plotdb.view.chart(JSON.parse(this.responseText), {}));
      } catch (e$) {
        e = e$;
        console.error("load chart " + key + " failed when parsing response: ");
        return console.error(e);
      }
    };
    if (typeof key === 'number') {
      req.open('get', this.host + "/d/chart/" + key, true);
    } else if (typeof key === 'string') {
      req.open('get', key, true);
    }
    return req.send();
  },
  chart: function(chart, arg$){
    var ref$, theme, fields, root, data;
    ref$ = arg$ != null
      ? arg$
      : {}, theme = ref$.theme, fields = ref$.fields, root = ref$.root, data = ref$.data;
    this._ = {
      handler: {},
      _chart: JSON.stringify(chart),
      chart: chart,
      fields: fields,
      root: root,
      inited: false
    };
    if (chart) {
      this._.chart = chart = import$(eval(chart.code.content), chart);
    }
    plotdb.chart.updateConfig(chart, chart.config);
    plotdb.chart.updateAssets(chart, chart.assets);
    if (data) {
      this.data(data);
    }
    if (fields) {
      this.sync(fields);
    }
    if (!data && (fields == null || !fields.length)) {
      this.data(chart.sample);
    }
    if (theme != null) {
      this.theme(theme);
    }
    if (fields != null) {
      this.sync(fields);
    }
    if (root) {
      this.attach(root);
    }
    return this;
  }
};
import$(plotdb.view.chart.prototype, {
  update: function(){
    var this$ = this;
    return ['resize', 'bind', 'render'].map(function(it){
      if (this$._.chart[it]) {
        return this$._.chart[it]();
      }
    });
  },
  loadlib: function(root){
    var libs;
    return libs = this._.chart.library || [];
  },
  attach: function(root){
    var ref$, chart, theme, resize;
    this._.root = root;
    ref$ = {
      chart: (ref$ = this._).chart,
      theme: ref$.theme
    }, chart = ref$.chart, theme = ref$.theme;
    root.setAttribute("class", ((root.getAttribute("class") || "").split(" ").filter(function(it){
      return it !== 'pdb-root';
    }).concat(['pdb-root'])).join(" "));
    root.innerHTML = [chart && chart.style ? "<style type='text/css'>/* <![CDATA[ */" + chart.style.content + "/* ]]> */</style>" : void 8, theme && theme.style ? "<style type='text/css'>/* <![CDATA[ */" + theme.style.content + "/* ]]> */</style>" : void 8, "<div style='position:relative;width:100%;height:100%;'><div style='height:0;'>&nbsp;</div>", chart.doc.content, "</div>", theme && (theme.doc || (theme.doc = {})).content ? theme.doc.content : void 8].join("");
    chart.root = root.querySelector("div:first-of-type");
    resize = function(){
      var this$ = this;
      if (resize.handle) {
        clearTimeout(resize.handle);
      }
      return resize.handle = setTimeout(function(){
        resize.handle = null;
        chart.resize();
        return chart.render();
      }, 500);
    };
    window.addEventListener('resize', function(){
      return resize();
    });
    chart.init();
    if (chart.parse) {
      chart.parse();
    }
    chart.resize();
    chart.bind();
    chart.render();
    root.setAttribute('class', (root.getAttribute('class') || "").split(' ').filter(function(it){
      return it !== 'loading';
    }).join(" ").trim());
    return this.inited = true;
  },
  config: function(config){
    return import$(this._.chart.config, config);
  },
  init: function(root){
    return this._.chart.init();
  },
  parse: function(){
    return this._.chart.parse();
  },
  resize: function(){
    return this._.chart.resize();
  },
  bind: function(){
    return this._.chart.bind();
  },
  render: function(){
    return this._.chart.render();
  },
  clone: function(){
    var ref$;
    return new plotdb.view.chart(JSON.parse(this._._chart), {
      theme: (ref$ = this._).theme,
      fields: ref$.fields
    });
  },
  on: function(event, cb){
    var ref$;
    return ((ref$ = this._.handler)[event] || (ref$[event] = [])).push(cb);
  },
  theme: function(theme){
    return this._.theme = import$(eval(theme.code.content), theme);
  },
  data: function(data){
    if (data == null) {
      return this._.data;
    }
    this._.data = data;
    return this.sync();
  },
  sync: function(fields){
    var hash, k, ref$, v;
    fields == null && (fields = []);
    if (this._.data) {
      return this._.chart.data = plotdb.chart.dataFromHash(this._.chart.dimension, this._.data);
    }
    hash = d3.map(fields, function(it){
      return it.key;
    });
    for (k in ref$ = this._.chart.dimension) {
      v = ref$[k];
      v.fields = (v.fields || []).map(fn$).filter(fn1$);
    }
    plotdb.chart.updateData(this._.chart);
    if (this.inited && this._.chart.parse) {
      return this._.chart.parse();
    }
    function fn$(it){
      return hash.get(it.key);
    }
    function fn1$(it){
      return it;
    }
  }
});
plotdb.load = function(key, cb){
  return plotdb.view.loader(key, cb);
};
plotdb.render = function(config, cb){
  return plotdb.view.render(config, cb);
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}