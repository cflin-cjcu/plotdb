// Generated by LiveScript 1.3.1
var plotdbDomain;
plotdbDomain = window.plConfig.urlschema + "" + window.plConfig.domain;
plotdb.load = function(arg$){
  var root, chart, theme, fields, fieldhash, k, ref$, v, resize;
  root = arg$.root, chart = arg$.chart, theme = arg$.theme, fields = arg$.fields;
  if (chart) {
    chart = import$(eval(chart.code.content), chart);
  }
  if (theme) {
    theme = import$(eval(theme.code.content), theme);
  }
  fieldhash = d3.map(fields, function(it){
    return it.key;
  });
  root.innerHTML = ["<style type='text/css'>/* <![CDATA[ */" + chart.style.content + "/* ]]> */</style>", theme && (theme.style || (theme.style = {})).content ? "<style type='text/css'>/* <![CDATA[ */" + theme.style.content + "/* ]]> */</style>" : void 8, "<div>", chart.doc.content, "</div>", theme && (theme.doc || (theme.doc = {})).content ? theme.doc.content : void 8].join("");
  for (k in ref$ = chart.dimension) {
    v = ref$[k];
    v.fields = v.fields.map(fn$).filter(fn1$);
    v.fields.forEach(fn2$);
  }
  plotdb.chart.updateData(chart);
  plotdb.chart.updateConfig(chart, chart.config);
  plotdb.chart.updateAssets(chart, chart.assets);
  if (!chart.data || !chart.data.length) {
    chart.data = plotdb.chart.getSampleData(chart);
  }
  chart.root = root.querySelector("div:first-of-type");
  chart.init();
  chart.resize();
  chart.bind();
  chart.render();
  root.setAttribute('class', root.getAttribute('class').split(' ').filter(function(it){
    return it !== 'loading';
  }).join(" "));
  resize = function(){
    var this$ = this;
    if (resize.handle) {
      clearTimeout(resize.handle);
    }
    return resize.handle = setTimeout(function(){
      resize.handle = null;
      chart.resize();
      return chart.render();
    }, 500);
  };
  window.addEventListener('resize', function(){
    return resize();
  });
  return {
    root: root,
    chart: chart,
    theme: theme,
    fields: fields
  };
  function fn$(it){
    return fieldhash.get(it.key);
  }
  function fn1$(it){
    return it;
  }
  function fn2$(it){
    return it.data = it.data.map(function(it){
      return parseFloat(it);
    });
  }
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}