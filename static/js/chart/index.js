// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('plotDB');
x$.service('chartService', ['$rootScope', '$http', 'sampleChart', 'IOService', 'baseService'].concat(function($rootScope, $http, sampleChart, IOService, baseService){
  var service, object, chartService;
  service = {
    sample: sampleChart,
    link: function(chart){
      return "/chart/?k=" + chart._type.location.charAt(0) + chart.key;
    },
    thumblink: function(chart){
      return this.sharelink(chart) + "/thumb";
    },
    sharelink: function(chart){
      return "http://localhost/v/chart/" + chart.key;
    }
  };
  object = function(src){
    import$(this, {
      name: 'untitled',
      owner: null,
      theme: null,
      parent: null,
      description: null,
      basetype: [],
      visualencoding: [],
      category: [],
      tags: [],
      likes: 0,
      searchable: false,
      doc: {
        name: 'document',
        type: 'html',
        content: service.sample[0].doc.content
      },
      style: {
        name: 'stylesheet',
        type: 'css',
        content: service.sample[0].style.content
      },
      code: {
        name: 'code',
        type: 'javascript',
        content: service.sample[0].code.content
      },
      assets: [],
      config: {},
      dimension: {},
      _type: {
        location: 'server',
        name: 'chart'
      }
    });
    import$(this, src);
    return this;
  };
  object.prototype = {
    like: function(v){
      var this$ = this;
      return new Promise(function(res, rej){
        var ref$;
        this$.likes = (ref$ = this$.likes + (v
          ? 1
          : -1)) > 0 ? ref$ : 0;
        return $http({
          url: "/d/chart/" + this$.key + "/like",
          method: 'PUT'
        }).success(function(){
          return res();
        }).error(function(d, status){
          var ref$;
          this$.likes = (ref$ = this$.likes - (v
            ? 1
            : -1)) > 0 ? ref$ : 0;
          return rej();
        });
      });
    },
    addFile: function(name, type, content){
      var file;
      content == null && (content = null);
      file = {
        name: name,
        type: type,
        content: content
      };
      this.assets.push(file);
      return file;
    },
    removeFile: function(file){
      var idx;
      idx = this.assets.indexOf(file);
      if (idx < 0) {
        return;
      }
      return this.assets.splice(idx, 1);
    },
    updateData: function(){
      var len, k, v, i$, i, ret, ref$, that, results$ = [];
      this.data = [];
      len = Math.max.apply(null, (function(){
        var ref$, results$ = [];
        for (k in ref$ = this.dimension) {
          v = ref$[k];
          results$.push(v);
        }
        return results$;
      }.call(this)).reduce(function(a, b){
        return a.concat(b.fields || []);
      }, []).filter(function(it){
        return it.data;
      }).map(function(it){
        return it.data.length;
      }).concat([0]));
      for (i$ = 0; i$ < len; ++i$) {
        i = i$;
        ret = {};
        for (k in ref$ = this.dimension) {
          v = ref$[k];
          if (v.multiple) {
            ret[k] = (v.fields || (v.fields = [])).length
              ? (v.fields || (v.fields = [])).map(fn$)
              : [];
            v.fieldName = (v.fields || (v.fields = [])).map(fn1$);
          } else {
            ret[k] = (that = (v.fields || (v.fields = []))[0]) ? (that.data || (that.data = []))[i] : null;
            v.fieldName = (that = (v.fields || (v.fields = []))[0]) ? that.name : null;
          }
          if (v.type.filter(fn2$).length) {
            if (Array.isArray(ret[k])) {
              ret[k] = ret[k].map(fn3$);
            } else {
              ret[k] = parseFloat(ret[k]);
            }
          }
        }
        results$.push(this.data.push(ret));
      }
      return results$;
      function fn$(it){
        return (it.data || (it.data = []))[i];
      }
      function fn1$(it){
        return it.name;
      }
      function fn2$(it){
        return it.name === 'Number';
      }
      function fn3$(it){
        return parseFloat(it);
      }
    }
  };
  chartService = baseService.derive('chart', service, object);
  return chartService;
}));
x$.controller('mychart', ['$scope', '$http', 'dataService', 'chartService'].concat(function($scope, $http, dataService, chartService){
  return chartService.list().then(function(ret){
    return $scope.$apply(function(){
      $scope.charts = ret;
      return $scope.goto = function(chart){
        return window.location.href = chartService.link(chart);
      };
    });
  });
}));
x$.controller('chartList', ['$scope', '$http', 'IOService', 'dataService', 'chartService', 'plNotify'].concat(function($scope, $http, IOService, dataService, chartService, plNotify){
  $scope.q = {
    type: null,
    enc: null,
    cat: null,
    dim: null,
    order: 'Latest'
  };
  $scope.qmap = {
    type: ["Other", "Bar Chart", "Line Chart", "Pie Chart", "Area Chart", "Bubble Chart", "Radial Chart", "Calendar", "Treemap", "Choropleth", "Cartogram", "Heatmap", "Sankey", "Venn Diagram", "Word Cloud", "Timeline", "Mixed"],
    enc: ["Other", "Position", "Position ( Non-aligned )", "Length", "Direction", "Angle", "Area", "Volume", "Curvature", "Shade", "Saturation"],
    cat: ["Other", "Infographics", "Geographics", "Interactive", "Journalism", "Statistics"],
    dim: [0, 1, 2, 3, 4, 5, "> 5"]
  };
  $scope.$watch('q', function(){
    if (!$scope.fullcharts || !$scope.fullcharts.length) {
      $scope.fullcharts = $scope.charts;
    }
    return $scope.charts = $scope.fullcharts.filter(function(it){
      return (!$scope.q.type || in$($scope.q.type, it.basetype || [])) && (!$scope.q.enc || in$($scope.q.enc, it.visualencoding || [])) && (!$scope.q.cat || in$($scope.q.cat, it.category || [])) && (!$scope.q.dim || it.dimlen === $scope.q.dim || ($scope.q.dim === 99 && it.dimlen.length > 5));
    });
  }, true);
  $scope.like = function(chart){
    var mylikes, ref$, ref1$, v;
    if (!chart) {
      return;
    }
    mylikes = (ref$ = (ref1$ = $scope.user.data).likes || (ref1$.likes = {})).chart || (ref$.chart = {});
    v = mylikes[chart.key] = !mylikes[chart.key];
    return chart.like(v)['catch'](function(){
      plNotify.error("Can't do favorite. try again later?");
      return mylikes[chart.key] = !v;
    });
  };
  $scope.charts = [];
  return IOService.listRemotely({
    name: 'chart'
  }, "q=all").then(function(ret){
    var this$ = this;
    return $scope.$apply(function(){
      var hit, i$, to$, i, d, width, map, k, ref$, v, results$ = [];
      $scope.charts = ret.map(function(it){
        return new chartService.chart(it);
      });
      hit = false;
      for (i$ = 0, to$ = $scope.charts.length; i$ < to$; ++i$) {
        i = i$;
        d = $scope.charts[i];
        width = 320;
        if (Math.random() > 0.6 && !hit) {
          width = Math.random() > 0.8 ? 960 : 640;
          hit = true;
        }
        if (i % 3 === 2) {
          if (!hit) {
            width = 640;
          }
          hit = false;
        }
        d.width = width;
      }
      if (window.location.search) {
        map = d3.nest().key(function(it){
          return it[0];
        }).map(window.location.search.replace('?', '').split('&').map(function(it){
          return it.split('=');
        }));
        for (k in ref$ = $scope.q) {
          v = ref$[k];
          if (map[k]) {
            results$.push($scope.q[k] = map[k][0][1]);
          }
        }
        return results$;
      }
    });
  });
}));
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}