// Generated by LiveScript 1.3.1
var plotdbDomain;
plotdbDomain = window.plConfig.urlschema + "" + window.plConfig.domain;
plotdb.viewer = {
  init: function(){},
  render: function(payload){
    var chart, assets, data, dimension, config, root, k, v, i$, ref$, len$, type, e, assetsmap, file, raw, array, j$, to$, idx, promise, this$ = this;
    chart = module.exports;
    assets = payload.assets;
    data = payload.data;
    dimension = payload.dimension;
    config = payload.config || {};
    root = document.getElementById('container');
    if ((!data || !data.length) && chart.sample) {
      data = chart.sample;
    }
    for (k in config) {
      v = config[k];
      for (i$ = 0, len$ = (ref$ = v.type).length; i$ < len$; ++i$) {
        type = ref$[i$];
        type = plotdb[type.name];
        try {
          if (type.test && type.parse && type.test(v.value)) {
            v.value = type.parse(v.value);
            break;
          }
        } catch (e$) {
          e = e$;
          console.log("plotdb type parsing error: " + type.name);
          console.log(e.stack + "");
        }
      }
    }
    for (k in ref$ = chart.config) {
      v = ref$[k];
      config[k] = !(config[k] != null) || !(config[k].value != null)
        ? v['default']
        : config[k].value;
    }
    chart.assets = assetsmap = {};
    for (i$ = 0, len$ = assets.length; i$ < len$; ++i$) {
      file = assets[i$];
      raw = atob(file.content);
      array = new Uint8Array(raw.length);
      for (j$ = 0, to$ = raw.length; j$ < to$; ++j$) {
        idx = j$;
        array[idx] = raw.charCodeAt(idx);
      }
      file.blob = new Blob([array], {
        type: file.type
      });
      file.url = URL.createObjectURL(file.blob);
      file.datauri = ["data:", file.type, ";charset=utf-8;base64,", file.content].join("");
      assetsmap[file.name] = file;
    }
    chart.config = config;
    chart.root = root;
    chart.data = data;
    chart.dimension = dimension;
    promise = Promise.resolve();
    if (chart.init) {
      promise = promise.then(function(){
        return chart.init();
      });
    }
    return promise.then(function(){
      chart.resize();
      if (chart.bind) {
        chart.bind();
      }
      chart.render();
      return document.body.className = "";
    });
  },
  resize: function(){
    var this$ = this;
    if (this.resize.handle) {
      clearTimeout(this.resize.handle);
    }
    return this.resize.handle = setTimeout(function(){
      var chart;
      this$.resize.handle = null;
      chart = module.exports;
      chart.resize();
      return chart.render();
    }, 500);
  }
};
window.addEventListener('resize', function(){
  return plotdb.viewer.resize();
});