// Generated by LiveScript 1.3.1
var plotdb;
plotdb = {};
import$(plotdb, {
  Number: {
    name: 'Number',
    test: function(it){
      return !isNaN(+it);
    },
    level: 3,
    parse: function(it){
      return parseFloat(it);
    }
  },
  String: {
    name: 'String',
    test: function(){
      return true;
    },
    level: 1,
    parse: function(it){
      return it;
    }
  },
  Date: {
    name: 'Date',
    level: 2,
    test: function(it){
      var d;
      d = new Date(it);
      return !(d instanceof Date) || isNaN(d.getTime()) ? false : true;
    },
    parse: function(it){
      return new Date(it);
    }
  },
  Choice: function(v){
    return {
      name: 'Choice',
      level: 4,
      test: function(it){
        return v && v.length && in$(it, v);
      },
      values: v
    };
  },
  Percent: {
    name: 'Percent',
    level: 3,
    test: function(it){
      return !!/[0-9.]+%/.exec(it);
    }
  },
  Color: {
    name: 'Color',
    level: 4,
    test: function(it){
      return !/(rgba?|hsla?)\([0-9.,]+\)|#[0-9a-f]{3,6}|[a-z0-9]+/.exec(it.trim());
    },
    'default': '#dc4521',
    gray: '#cccccc',
    subtype: {
      negative: "negative",
      positive: "positive"
    }
  },
  Palette: {
    name: 'Palette',
    level: 5,
    re: /^((rgb|hsl)\((\s*[0-9.]+\s*,){2}\s*[0-9.]+\s*\)|(rgb|hsl)a\((\s*[0-9.]+\s*,){3}\s*[0-9.]+\s*\)|\#[0-9a-f]{3}|\#[0-9a-f]{6}|[a-zA-Z][a-zA-Z0-9]*)$/,
    test: function(it){
      var e, this$ = this;
      if (!it) {
        return true;
      }
      if (typeof it === typeof "") {
        if (it.charAt(0) !== '[') {
          it = it.split(',');
        } else {
          try {
            it = JSON.parse(it);
          } catch (e$) {
            e = e$;
            return false;
          }
        }
      } else if (Array.isArray(it)) {
        return !it.filter(function(it){
          return !this$.re.exec(it.trim());
        }).length ? true : false;
      } else if (typeof it === 'object') {
        if (!(it.colors != null)) {
          return true;
        }
        if (it.colors.filter(function(it){
          return !it.hex;
        }).length) {
          return true;
        }
      }
      return false;
    },
    parse: function(it){
      var e;
      if (!it) {
        return it;
      }
      if (Array.isArray(it)) {
        return it;
      }
      if (typeof it === typeof "") {
        try {
          return JSON.parse(it);
        } catch (e$) {
          e = e$;
          return it.split(',').map(function(it){
            return {
              hex: it.trim()
            };
          });
        }
      }
      return it;
    },
    'default': {
      colors: ['#1d3263', '#226c87', '#f8d672', '#e48e11', '#e03215', '#ab2321'].map(function(it){
        return {
          hex: it
        };
      })
    },
    plotdb: {
      colors: ['#ed1d78', '#c59b6d', '#8cc63f', '#28aae2'].map(function(it){
        return {
          hex: it
        };
      })
    },
    qualitative: {
      colors: ['#c05ae0', '#cf2d0c', '#e9ab1e', '#86ffb5', '#64dfff', '#003f7d'].map(function(it){
        return {
          hex: it
        };
      })
    },
    binary: {
      colors: ['#ff8356', '#0076a1'].map(function(it){
        return {
          hex: it
        };
      })
    },
    sequential: {
      colors: ['#950431', '#be043e', '#ec326d', '#fc82a9', '#febed2', '#fee6ee'].map(function(it){
        return {
          hex: it
        };
      })
    },
    diverging: {
      colors: ['#74001a', '#cd2149', '#f23971', '#ff84ab', '#ffc3d7', '#f2f2dd', '#b8d9ed', '#81b1d0', '#3d8bb7', '#0071a8', '#003558'].map(function(it){
        return {
          hex: it
        };
      })
    },
    subtype: {
      qualitative: "qualitative",
      binary: "binary",
      sequential: "sequential",
      diverging: "diverging"
    },
    scale: {
      ordinal: function(pal){
        var c, range, domain;
        c = pal.colors;
        range = c.filter(function(it){
          return it.keyword;
        }).map(function(it){
          return it.hex;
        }).concat(c.filter(function(it){
          return !it.keyword;
        }).map(function(it){
          return it.hex;
        }));
        domain = c.map(function(it){
          return it.keyword;
        }).filter(function(it){
          return it;
        });
        return d3.scale.ordinal().domain(domain).range(range);
      }
    }
  },
  Boolean: {
    name: 'Boolean',
    level: 2,
    test: function(it){
      return !!/^(true|false|1|0|yes|no)$/.exec(it);
    },
    parse: function(it){
      if (it && typeof it === typeof "") {
        if (/^(yes|true)$/.exec(it.trim())) {
          return true;
        }
        if (/\d+/.exec(it.trim()) && it.trim() !== "0") {
          return true;
        }
        return false;
      }
      if (it) {
        return true;
      }
      return false;
    }
  }
});
plotdb.chart = {
  corelib: {},
  create: function(config){
    return import$(import$({}, this.base), config);
  },
  base: {
    dimension: {
      value: {
        type: [],
        require: false
      }
    },
    config: {
      padding: {
        type: [plotdb.Number],
        'default': 10
      }
    },
    init: function(root, data, config){},
    bind: function(root, data, config){},
    resize: function(root, data, config){},
    render: function(root, data, config){}
  }
};
plotdb.theme = {
  create: function(config){
    return import$(import$({}, this.base), config);
  },
  base: {
    palette: {
      'default': [],
      diverging: [],
      sequential: [],
      binary: [],
      qualitative: [],
      binaryDiverge: [],
      sequentialQualitative: [],
      sequentialSequential: [],
      divergingDiverging: []
    },
    config: {
      padding: {
        type: [plotdb.Number],
        'default': 10
      }
    }
  }
};
plotdb.data = {
  sample: {
    category: ['IT', 'RD', 'GM', 'FIN', 'LEGAL', 'HR', 'SALES'],
    name: ['James', 'Joe', 'Amelie', 'Doraemon', 'Cindy', 'David', 'Frank', 'Kim', 'Ken', 'Leland', 'Mike', 'Nick', 'Oliver', 'Randy'],
    generate: function(dimension){
      var ret, res$, i$, to$, i, node, k, v;
      res$ = [];
      for (i$ = 0, to$ = parseInt(Math.random() * 10 + 10); i$ < to$; ++i$) {
        i = i$;
        node = {};
        for (k in dimension) {
          v = dimension[k];
          if (!v.type || !v.type.length) {
            node[k] = this.name[parseInt(Math.random() * this.name.length)];
          } else {
            node[k] = parseInt(Math.random() * 8) + 2;
          }
        }
        res$.push(node);
      }
      ret = res$;
      return ret;
    },
    crimeanWar: {
      "month": {
        "name": "month",
        "data": ["01/04/1854", "01/05/1854", "01/06/1854", "01/07/1854", "01/08/1854", "01/09/1854", "01/10/1854", "01/11/1854", "01/12/1854", "01/01/1855", "01/02/1855", "01/03/1855", "01/04/1855", "01/05/1855", "01/06/1855", "01/07/1855", "01/08/1855", "01/09/1855", "01/10/1855", "01/11/1855", "01/12/1855", "01/01/1856", "01/02/1856", "01/03/1856"]
      },
      "army size": {
        "name": "army size",
        "data": [8571, 23333, 28333, 28722, 30246, 30290, 30643, 29736, 32779, 32393, 30919, 30107, 32252, 35473, 38863, 42647, 44614, 47751, 46852, 37853, 43217, 44212, 43485, 46140]
      },
      "death number by zymotic": {
        "name": "death number by zymotic",
        "data": [1, 12, 11, 359, 828, 788, 503, 844, 1725, 2761, 2120, 1205, 477, 508, 802, 382, 483, 189, 128, 178, 91, 42, 24, 15]
      },
      "death number by wound": {
        "name": "death number by wound",
        "data": [0, 0, 0, 0, 1, 81, 132, 287, 114, 83, 42, 32, 48, 49, 209, 134, 164, 276, 53, 33, 18, 2, 0, 0]
      },
      "death number by other": {
        "name": "death number by other",
        "data": [5, 9, 6, 23, 30, 70, 128, 106, 131, 324, 361, 172, 57, 37, 31, 33, 25, 20, 18, 32, 28, 48, 19, 35]
      },
      "zymotic rate(‰)": {
        "name": "zymotic rate(‰)",
        "data": [1.4, 6.2, 4.7, 150, 328.5, 312.2, 197, 340.6, 631.5, 1022.8, 822.8, 480.3, 177.5, 171.8, 247.6, 107.5, 129.9, 47.5, 32.8, 56.4, 25.3, 11.4, 6.6, 3.9]
      },
      "wound rate(‰)": {
        "name": "wound rate(‰)",
        "data": [0, 0, 0, 0, 0.4, 32.1, 51.7, 115.8, 41.7, 30.7, 16.3, 12.8, 17.9, 16.6, 64.5, 37.7, 44.1, 69.4, 13.6, 10.5, 5, 0.5, 0, 0]
      },
      "other rate(‰)": {
        "name": "other rate(‰)",
        "data": [7, 4.6, 2.5, 9.6, 11.9, 27.7, 50.1, 42.8, 48, 120, 140.1, 68.6, 21.2, 12.5, 9.6, 9.3, 6.7, 5, 4.6, 10.1, 7.8, 13, 5.2, 9.1]
      }
    }
  }
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}