// Generated by LiveScript 1.3.1
plotdb.view = {
  host: plConfig.urlschema + "" + plConfig.domainIO,
  loader: function(key, cb){
    var req;
    req = new XMLHttpRequest();
    req.onload = function(){
      var e;
      try {
        return cb(plotdb.view.chart(JSON.parse(this.responseText)));
      } catch (e$) {
        e = e$;
        console.error("load chart " + key + " failed when parsing response: ");
        return console.error(e);
      }
    };
    if (typeof key === 'number') {
      req.open('get', this.host + "/d/chart/" + key, true);
    } else if (typeof key === 'string') {
      req.open('get', key, true);
    }
    return req.send();
  },
  chart2: function(chart){
    if (chart) {
      chart = import$(eval(chart.code.content), chart);
    }
    plotdb.chart.updateConfig(chart, chart.config);
    plotdb.chart.updateAssets(chart, chart.assets);
    chart.setData = function(){};
    chart.update = function(){
      if (chart.parse) {
        chart.parse();
      }
      chart.resize();
      chart.bind();
      return chart.render();
    };
    chart.attach = function(arg$, cb){
      var root, theme, fields, data, config, fieldhash, k, ref$, v, resize;
      root = arg$.root, theme = arg$.theme, fields = arg$.fields, data = arg$.data, config = arg$.config;
      if (theme) {
        theme = import$(eval(theme.code.content), theme);
      }
      root.setAttribute("class", ((root.getAttribute("class") || "").split(" ").filter(function(it){
        return it !== 'pdb-root';
      }).concat(['pdb-root'])).join(" "));
      root.innerHTML = [chart && chart.style ? "<style type='text/css'>/* <![CDATA[ */" + chart.style.content + "/* ]]> */</style>" : void 8, theme && theme.style ? "<style type='text/css'>/* <![CDATA[ */" + theme.style.content + "/* ]]> */</style>" : void 8, "<div style='position:relative;width:100%;height:100%;'><div style='height:0;'>&nbsp;</div>", chart.doc.content, "</div>", theme && (theme.doc || (theme.doc = {})).content ? theme.doc.content : void 8].join("");
      fieldhash = d3.map(fields, function(it){
        return it.key;
      });
      if (!data) {
        for (k in ref$ = chart.dimension) {
          v = ref$[k];
          v.fields = (v.fields || []).map(fn$).filter(fn1$);
          v.fields.forEach(fn2$);
        }
        plotdb.chart.updateData(chart);
        chart.data = plotdb.chart.getSampleData(chart);
      } else {
        if (typeof data === 'function') {
          chart.sample = data;
          chart.data = plotdb.chart.getSampleData(chart);
          console.log(chart.data);
        } else {
          chart.data = data;
        }
      }
      import$(chart.config, config);
      chart.root = root.querySelector("div:first-of-type");
      chart.init();
      if (chart.parse) {
        chart.parse();
      }
      chart.resize();
      chart.bind();
      chart.render();
      root.setAttribute('class', (root.getAttribute('class') || "").split(' ').filter(function(it){
        return it !== 'loading';
      }).join(" ").trim());
      resize = function(){
        var this$ = this;
        if (resize.handle) {
          clearTimeout(resize.handle);
        }
        return resize.handle = setTimeout(function(){
          resize.handle = null;
          chart.resize();
          return chart.render();
        }, 500);
      };
      window.addEventListener('resize', function(){
        return resize();
      });
      if (cb) {
        return setTimeout(function(){
          return cb({
            root: root,
            chart: chart,
            theme: theme,
            fields: fields,
            config: config,
            data: data
          });
        }, 0);
      }
      function fn$(it){
        return fieldhash.get(it.key);
      }
      function fn1$(it){
        return it;
      }
      function fn2$(it){
        if ((v.type || []).filter(function(it){
          return it.name === 'Number';
        }).length) {
          return it.data = it.data.map(function(it){
            return parseFloat(it);
          });
        }
      }
    };
    return chart;
  },
  render2: function(arg$, cb){
    var root, chart, theme, fields, data, config, fieldhash, k, ref$, v, resize;
    root = arg$.root, chart = arg$.chart, theme = arg$.theme, fields = arg$.fields, data = arg$.data, config = arg$.config;
    if (theme) {
      theme = import$(eval(theme.code.content), theme);
    }
    fieldhash = d3.map(fields, function(it){
      return it.key;
    });
    root.setAttribute("class", ((root.getAttribute("class") || "").split(" ").filter(function(it){
      return it !== 'pdb-root';
    }).concat(['pdb-root'])).join(" "));
    root.innerHTML = [chart && chart.style ? "<style type='text/css'>/* <![CDATA[ */" + chart.style.content + "/* ]]> */</style>" : void 8, theme && theme.style ? "<style type='text/css'>/* <![CDATA[ */" + theme.style.content + "/* ]]> */</style>" : void 8, "<div style='position:relative;width:100%;height:100%;'><div style='height:0;'>&nbsp;</div>", chart.doc.content, "</div>", theme && (theme.doc || (theme.doc = {})).content ? theme.doc.content : void 8].join("");
    if (!data) {
      for (k in ref$ = chart.dimension) {
        v = ref$[k];
        v.fields = (v.fields || []).map(fn$).filter(fn1$);
        v.fields.forEach(fn2$);
      }
      plotdb.chart.updateData(chart);
      chart.data = plotdb.chart.getSampleData(chart);
    } else {
      if (typeof data === 'function') {
        chart.sample = data;
        chart.data = plotdb.chart.getSampleData(chart);
        console.log(chart.data);
      } else {
        chart.data = data;
      }
    }
    import$(chart.config, config);
    chart.root = root.querySelector("div:first-of-type");
    chart.init();
    chart.resize();
    chart.bind();
    chart.render();
    root.setAttribute('class', (root.getAttribute('class') || "").split(' ').filter(function(it){
      return it !== 'loading';
    }).join(" ").trim());
    resize = function(){
      var this$ = this;
      if (resize.handle) {
        clearTimeout(resize.handle);
      }
      return resize.handle = setTimeout(function(){
        resize.handle = null;
        chart.resize();
        return chart.render();
      }, 500);
    };
    window.addEventListener('resize', function(){
      return resize();
    });
    if (cb) {
      return setTimeout(function(){
        return cb({
          root: root,
          chart: chart,
          theme: theme,
          fields: fields,
          config: config,
          data: data
        });
      }, 0);
    }
    function fn$(it){
      return fieldhash.get(it.key);
    }
    function fn1$(it){
      return it;
    }
    function fn2$(it){
      if ((v.type || []).filter(function(it){
        return it.name === 'Number';
      }).length) {
        return it.data = it.data.map(function(it){
          return parseFloat(it);
        });
      }
    }
  }
};
plotdb.view.chart = function(chart, arg$){
  var theme, fields, root;
  theme = arg$.theme, fields = arg$.fields, root = arg$.root;
  this._ = {
    handler: {},
    chart: chart,
    fields: fields,
    root: root,
    inited: false
  };
  if (chart) {
    delete chart.config;
    delete chart.assets;
    chart = import$(eval(chart.code.content), chart);
  }
  plotdb.chart.updateConfig(chart, chart.config);
  plotdb.chart.updateAssets(chart, chart.assets);
  this.theme(theme);
  if (fields) {
    this.sync(fields);
  }
  if (root) {
    this.attach(root);
  }
  return this;
};
import$(plotdb.view.chart.prototype, {
  update: function(){
    var this$ = this;
    return ['resize', 'bind', 'render'].map(function(it){
      if (this$._.chart[it]) {
        return this$._.chart[it]();
      }
    });
  },
  attach: function(root){
    var ref$, chart, theme, resize;
    this._.root = root;
    ref$ = {
      chart: (ref$ = this._).chart,
      theme: ref$.theme
    }, chart = ref$.chart, theme = ref$.theme;
    root.setAttribute("class", ((root.getAttribute("class") || "").split(" ").filter(function(it){
      return it !== 'pdb-root';
    }).concat(['pdb-root'])).join(" "));
    root.innerHTML = [chart && chart.style ? "<style type='text/css'>/* <![CDATA[ */" + chart.style.content + "/* ]]> */</style>" : void 8, theme && theme.style ? "<style type='text/css'>/* <![CDATA[ */" + theme.style.content + "/* ]]> */</style>" : void 8, "<div style='position:relative;width:100%;height:100%;'><div style='height:0;'>&nbsp;</div>", chart.doc.content, "</div>", theme && (theme.doc || (theme.doc = {})).content ? theme.doc.content : void 8].join("");
    chart.root = root.querySelector("div:first-of-type");
    resize = function(){
      var this$ = this;
      if (resize.handle) {
        clearTimeout(resize.handle);
      }
      return resize.handle = setTimeout(function(){
        resize.handle = null;
        chart.resize();
        return chart.render();
      }, 500);
    };
    window.addEventListener('resize', function(){
      return resize();
    });
    chart.init();
    if (chart.parse) {
      chart.parse();
    }
    chart.bind();
    chart.resize();
    chart.render();
    root.setAttribute('class', (root.getAttribute('class') || "").split(' ').filter(function(it){
      return it !== 'loading';
    }).join(" ").trim());
    return this.inited = true;
  },
  config: function(config){
    return import$(this._.chart.config, config);
  },
  init: function(root){
    return this._.chart.init();
  },
  parse: function(){
    return this._.chart.parse();
  },
  resize: function(){
    return this._.chart.resize();
  },
  bind: function(){
    return this._.chart.bind();
  },
  render: function(){
    return this._.chart.render();
  },
  clone: function(){
    return new plotdb.view.chart(this._.chart, this._);
  },
  on: function(event, cb){
    var ref$;
    return ((ref$ = this._.handler)[event] || (ref$[event] = [])).push(cb);
  },
  theme: function(theme){
    return this._.theme = import$(eval(theme.code.content), theme);
  },
  data: function(data){
    if (data == null) {
      return this._.data;
    }
    this._.data = data;
    return this.sync();
  },
  sync: function(fields){
    var hash, k, ref$, v;
    fields == null && (fields = []);
    if (this._.data) {
      return this._.chart.data = plotdb.chart.dataFromHash(this._.chart.dimension, this._.data);
    }
    hash = d3.map(fields, function(it){
      return it.key;
    });
    for (k in ref$ = this._.chart.dimension) {
      v = ref$[k];
      v.fields = (v.fields || []).map(fn$).filter(fn1$);
    }
    plotdb.chart.updateData(this._.chart);
    return this._.chart.parse();
    function fn$(it){
      return hash.get(it.key);
    }
    function fn1$(it){
      return it;
    }
  }
});
plotdb.load = function(key, cb){
  return plotdb.view.loader(key, cb);
};
plotdb.render = function(config, cb){
  return plotdb.view.render(config, cb);
};
/*
plotdb.load = ({root, chart}, cb) ->
  if typeof(chart) == \object =>
    if chart.chart =>
      plotdb.view.render {
        root: root
        chart: chart.chart
        theme: chart.theme
        fields: chart.fields
      }, cb
    else if root => 
      plotdb.view.render {
        root: root
        chart: chart
      }, cb
  else if typeof(chart) == \number or typeof(chart) == \string =>
    plotdb.view.loader chart,((r) ->
      if root => plotdb.view.render {
          root: root
          chart: r
        }, cb
      else cb
    )
  else => throw new Error("plotdb.load is invoked with a non-supported chart type")
*/
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}