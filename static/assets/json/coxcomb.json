{"_type":{"location":"server","name":"chart"},"owner":4,"key":968,"permission":{"switch":"publish","list":[{"target":null,"type":"global","perm":"fork","displayname":"Everyone","username":"and anonymous user"}]},"name":"Nightingale's Rose","theme":null,"parent":null,"description":"A classic chart which was used by Nightingale in 1959 to depict the deaths in hospital in Crimea war.","basetype":["6"],"visualencoding":["6"],"category":["5"],"tags":["nightingale","crimeanwar"],"likes":null,"searchable":true,"doc":{"name":"document","size":0,"type":"html","lines":1,"content":""},"style":{"name":"stylesheet","size":0,"type":"css","lines":1,"content":""},"code":{"name":"code","size":7548,"type":"javascript","lines":197,"content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: function() { \n    var vlist = d3.range(3), list = d3.range(12);\n    return {\n      values: vlist.map(function(d,i) { return {\n        name: plotdb.data.sample.name[d],\n        data: list.map(function(d,j) { return Math.round(1 + Math.abs(6 - j) + Math.sin(i/2 + j * Math.PI / list.length) * (5 + i));  })\n      }; }),\n      order: [{name: \"Year\", data: list.map(function(d,i) { return d + 1995; })}]\n    };\n  },\n  dimension: {\n    values: { type: [plotdb.Number], require: true, multiple: true, desc: \"Wedge Size\" },\n    order: { type: [plotdb.Order], require: false, desc: \"Order of Wedge\" }\n  },\n  config: {\n    fontSize: {},\n    margin: {},\n    radialAxisLabel: {},\n    palette: {}\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.legendGroup = this.svg.append(\"g\").attr({class: \"legend-group\"});\n    this.dataGroup = this.svg.append(\"g\").attr({class: \"data-group\"});\n    this.popup = plotd3.html.popup(this.root).on(\"mousemove\", function(d,i,popup) {\n      popup.select(\".title\").text(that.names[d.field]);\n      popup.select(\".value div\").text(d.order);\n      popup.select(\".value span\").text(d.value);\n    });\n    this.popup.getPopupNode().select(\".value\").call(function(d,i) {\n      this.append(\"div\"); this.append(\"span\");\n    });\n    this.aAxisGroup = this.svg.append(\"g\").attr({class: \"axis angle\"});\n    this.rAxisGroup = this.svg.append(\"g\").attr({class: \"axis radius\"});\n  },\n  parse: function() {\n    var that = this, extents;\n    plotdb.Order.sort(this.data, \"order\");      \n    extents = this.data.map(function(d,i) { return d3.extent(d.values); });\n    this.valueRange = d3.extent([0,1].map(function(it) {\n      return d3.extent(extents.map(function(d,i) { return d[it]; }));\n    }).reduce(function(a,b) { return a.concat(b); },[]));\n    if(this.valueRange[0] == this.valueRange[1]) this.valueRange[1]++;\n    this.names = this.dimension.values.fieldName;\n    this.data.map(function(d,i) {\n      d.idx = i;\n      d.parsed = d.values.map(function(v,j) { return {value: v, order: d.order, idx: i, field: j};}); \n      d.parsed.sort(function(a,b) { return (b.value - a.value); });\n    });\n  },\n  bind: function() {\n    var that = this, sel;\n\n    sel = this.dataGroup.selectAll(\"g.data\").data(this.data);\n    sel.exit().remove();\n    sel = sel.enter().append(\"g\").attr({class: \"data\"}).each(function(d,i) {\n      var node = d3.select(this);\n      node.selectAll(\"path.data\").data(d.parsed)\n        .enter().append(\"path\").attr({class: \"data\"});\n    });\n    sel = this.aAxisGroup.selectAll(\"g.tick\").data(this.data);\n    sel.exit().remove();\n    sel.enter().append(\"g\").attr({class: \"tick\"}).each(function(d,i) {\n      var node = d3.select(this);\n      node.append(\"text\").attr({class: \"shadow\"});\n      node.append(\"text\");\n    });\n    this.popup.nodes(this.svg.selectAll(\"path.data\"));\n  },\n  resize: function() {\n    var that = this, box = this.root.getBoundingClientRect();\n    this.width = box.width;\n    this.height = box.height;\n    this.svg.attr({\n      width: this.width + \"px\", height: this.height + \"px\",\n      viewBox: [0,0,this.width,this.height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.popup.fontSize(this.config.fontSize);\n    this.cScale = plotdb.Palette.scale.ordinal(this.config.palette);\n    this.legend = plotd3.rwd.legend()\n      .scale(this.cScale)\n      .orient(\"right\")\n      .tickValues(this.names)\n      .size([220,this.height - 2 * this.config.margin])\n      .fontSize(this.config.fontSize);\n    this.legendGroup.call(this.legend).selectAll(\".legend\").on(\"mouseover\", function(d,i) {\n      that.activeGroup = i + 1;\n      that.render();\n    }).on(\"mouseout\", function(d,i) {\n      that.activeGroup = null;\n      that.render();\n    });\n    this.legendSize = this.legend.offset();\n    this.aScale = d3.scale.linear()\n      .domain([0, this.data.length])\n      .range([0, Math.PI * 2]);\n    var mw = this.width - this.config.margin * 2 - this.legendSize[0] - this.config.fontSize * 2;\n    var mh = this.height - this.config.margin * 2;\n    this.size = (mw > mh? mh : mw) / 2;\n\n    this.yScale = d3.scale.sqrt()\n      .domain([0, this.valueRange[1]])\n      .range([this.height/2, this.height/2 - this.size]);\n    this.rAxis = plotd3.rwd.axis()\n      .scale(this.yScale)\n      .orient(\"left\")\n      .fontSize(this.config.fontSize);\n    this.rAxis.label(this.config.radialAxisLabel || \"\");\n    this.rAxisGroup.call(this.rAxis).select(\".domain\").remove();\n    this.rAxisWidth = this.rAxis.offset();\n    mw = this.width - this.config.margin * 4 - this.legendSize[0] - this.rAxisWidth - this.config.fontSize*2;\n    this.size = (mw > mh? mh : mw) / 2 - this.config.fontSize;\n    this.yScale.range([this.height/2, this.height/2 - this.size]);\n    this.rAxisGroup.call(this.rAxis);\n    this.rAxisWidth = this.rAxis.offset();\n    this.rScale = d3.scale.sqrt()\n      .domain([0, this.valueRange[1]])\n      .range([0, this.size]);\n    this.maxWidth = this.size * Math.PI * 2 / (this.data.length || 1);\n  },\n  render: function() {\n    var that = this;\n    this.rAxisGroup.attr({\n      transform: [\"translate(\",\n        (this.width - this.legendSize[0])/2 - this.size - this.config.fontSize * 2,\n        0,\n        \")\"].join(\" \")\n    });\n    this.legendGroup.attr({\n      transform: [\"translate(\",\n        (this.width - this.legendSize[0] - this.config.margin),\n        (this.height - this.legendSize[1])/2,\n        \")\"].join(\" \")\n    });\n    this.aAxisGroup.attr({\n      transform: [\"translate(\", (this.width - this.legendSize[0])/2, this.height/2, \")\"].join(\" \")\n    }).selectAll(\".tick\").attr({\n      transform: function(d,i) {\n        var r = that.rScale(d3.max(d.values)) + that.config.fontSize /2;\n        var a = that.aScale(i + 0.5);\n        var x = Math.sin(a) * r;\n        var y = -Math.cos(a) * r;\n        return [\"translate(\", x, y, \") rotate(\", a * 180 / Math.PI, \")\"].join(\" \");\n      }\n    }).each(function(d,i) {\n      var node = d3.select(this);\n      node.selectAll(\"text\").text(d.order).attr({\n        \"font-size\": that.config.fontSize,\n        \"text-anchor\": \"middle\"\n      });\n      node.select(\"text.shadow\").attr({\n        stroke: \"#fff\",\n        \"stroke-width\": 2\n      });\n    });\n    this.dataGroup.attr({\n      transform: [\"translate(\", (this.width - this.legendSize[0])/2, this.height/2, \")\" ].join(\" \")\n    });\n    this.dataGroup.selectAll(\"path.data\").attr({\n      d: function(it) {\n  \t    var i = it.idx;\n        var largeArc = (that.data.length > 1 ? 0 : 1);\n        var r = that.rScale(it.value);\n        var x1 = (Math.sin(that.aScale(i)) * r);\n        var y1 = -(Math.cos(that.aScale(i)) * r);\n        var x2 = (Math.sin(that.aScale(i + 1)) * r);\n        var y2 = -(Math.cos(that.aScale(i + 1)) * r);\n        var ret = [\n          \"M\", 0, 0,\n          \"L\", x1, y1,\n          \"A\", r, r, 0, largeArc, 1, x2, y2,\n          \"L\", 0, 0,\n          \"Z\"\n        ].join(\" \");\n        return ret;\n      },\n      fill: function(d,i) { return that.cScale(that.names[d.field]); },\n      stroke: \"#fff\",\n      \"stroke-width\": 1.5\n    }).transition().attr({\n      opacity: function(d,i) {\n        return (!that.activeGroup || that.activeGroup == d.field + 1 ? 1 : 0.1);\n      },\n    });\n    var maxTick = d3.max(this.aAxisGroup.selectAll(\"text.shadow\")[0].map(function(d,i) {\n      return d.getBBox().width;\n    }));\n    if(this.maxWidth < maxTick) this.aAxisGroup.selectAll(\"g.tick\").attr({\n      opacity: function(d,i) { return (i%2?1:0);}\n    });\n  }\n});\n"},"assets":[],"config":{"fontSize":{"name":"Font Size","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":13,"category":"Text","value":12},"margin":{"name":"Margin","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":10,"category":"Layout","value":"10"},"radialAxisLabel":{"name":"Radial Axis Label","type":[{"name":"String","default":"","level":2,"basetype":[]}],"category":"Text","value":"score"},"palette":{"name":"Palette","type":[{"name":"Palette","level":30,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"qualitative":{"colors":[{"hex":"#c05ae0"},{"hex":"#cf2d0c"},{"hex":"#e9ab1e"},{"hex":"#86ffb5"},{"hex":"#64dfff"},{"hex":"#003f7d"}]},"binary":{"colors":[{"hex":"#ff8356"},{"hex":"#0076a1"}]},"sequential":{"colors":[{"hex":"#950431"},{"hex":"#be043e"},{"hex":"#ec326d"},{"hex":"#fc82a9"},{"hex":"#febed2"},{"hex":"#fee6ee"}]},"diverging":{"colors":[{"hex":"#74001a"},{"hex":"#cd2149"},{"hex":"#f23971"},{"hex":"#ff84ab"},{"hex":"#ffc3d7"},{"hex":"#f2f2dd"},{"hex":"#b8d9ed"},{"hex":"#81b1d0"},{"hex":"#3d8bb7"},{"hex":"#0071a8"},{"hex":"#003558"}]},"subtype":{"qualitative":"qualitative","binary":"binary","sequential":"sequential","diverging":"diverging"},"scale":{}}],"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"category":"Color","value":{"colors":[{"hex":"#7a322a"},{"hex":"#f93634"},{"hex":"#dddb83"},{"hex":"#ede6de"},{"hex":"#fdfffa"},{"hex":"#dbdbdb"},{"hex":"#48462d"}]}}},"dimension":{"values":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"require":true,"multiple":true,"desc":"Wedge Size","fields":[]},"order":{"type":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"require":false,"desc":"Order of Wedge","fields":[]}},"library":["d3/3.5.12/min","plotd3/0.1.0"],"dimlen":2,"createdtime":"2016-02-19T16:48:24.000Z","modifiedtime":"2016-08-09T09:38:36.000Z","local":null,"ownername":"plotdb","data":[]}