{"_type":{"location":"server","name":"chart"},"owner":4,"key":1039,"permission":{"switch":"publish","list":[{"target":null,"type":"global","perm":"fork","displayname":"Everyone","username":"and anonymous user"}]},"name":"Sankey Chord","theme":null,"parent":null,"description":"hybrid sankey chart with chord diagram","basetype":["6","12"],"visualencoding":["5","6"],"category":["1","4","5"],"tags":["chord","sankey","relation","relationship"],"likes":null,"searchable":true,"doc":{"name":"document","size":0,"type":"html","lines":1,"content":""},"style":{"name":"stylesheet","size":0,"type":"css","lines":1,"content":""},"code":{"name":"code","size":11336,"type":"javascript","lines":279,"content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: function() {\n    var list = d3.range(49);\n    var continents = [\"Asia\",\"North America\",\"South America\",\"Africa\",\"Europe\",\"Australia\",\"Oceania\"];\n    return {\n      src: [{name: \"Continent\", data: list.map(function(d,i) { return continents[i % continents.length]; })}],\n      des: [{name: \"Continent\", data: list.map(function(d,i) { return continents[parseInt(i / continents.length)]; })}],\n      size: [{name: \"Value\", data: list.map(function(d,i) { return Math.round(100 * Math.random()); })}]\n    };\n  },\n  dimension: {\n    src: { type: [], require: true, desc: \"name of source node\" },\n    des: { type: [], require: true, desc: \"name of destination node\" },\n    size: { type: [plotdb.Number], require: true, desc: \"flow size\" }\n  },\n  config: {\n    fontSize: {},\n    margin: {},\n    padding: {},\n    palette: {},\n    otherLimit: {rebindOnChange: true},\n    otherLabel: {rebindOnChange: true},\n    thick: { name: \"Thickness\", type: [plotdb.Number], default: 20 },\n  },\n  init: function() {\n    var that = this, it;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.srcGroup = this.svg.append(\"g\").attr({class: \"src arc\"});\n    this.desGroup = this.svg.append(\"g\").attr({class: \"des arc\"});\n    this.chordGroup = this.svg.append(\"g\").attr({class: \"chord connect arc\"});\n    /*this.popupArc = plotd3.html.popup(this.root).on(\"mousemove\", function(d,i,popup) {\n      popup.select(\".title\").text(d.key);\n      popup.select(\".value\").text(d.sum);\n    });\n    this.popupChord = plotd3.html.popup(this.root).on(\"mousemove\", function(d,i,popup) {\n      popup.select(\".value:nth-of-type(1)\").text(d.src);\n      popup.select(\".value:nth-of-type(2)\").text(\"â†“ ( \" + d.size +\" )\");\n      popup.select(\".value:nth-of-type(3)\").text(d.des);\n    });\n    this.popupChord.getPopupNode().call(function(d,i) {\n      this.select(\".title\").remove();\n      this.append(\"div\").attr({class: \"value\"});\n      this.append(\"div\").attr({class: \"value\"});\n    });*/\n  },\n  parse: function() {\n    var that = this;\n    var dessize = {}, srcsize = {};\n    if(!this.dimension.src.fields.length) this.data.map(function(d,i) { d.src = \"?\"; });\n    if(!this.dimension.des.fields.length) this.data.map(function(d,i) { d.des = \"?\"; });\n    if(!this.dimension.size.fields.length) this.data.map(function(d,i) { d.size = 1; });\n    this.data = this.data.filter(function(it) { return it.src && it.des; });\n    this.data.forEach(function(d,i) {\n      dessize[d.des] = (dessize[d.des] || 0) + d.size;\n      srcsize[d.src] = (srcsize[d.src] || 0) + d.size;\n    });\n    this.data.forEach(function(d,i) {\n      if(dessize[d.des] < that.config.otherLimit) d.des = that.config.otherLabel;\n      if(srcsize[d.src] < that.config.otherLimit) d.src = that.config.otherLabel;\n    });\n    dessize = {}, srcsize = {};\n    this.data.forEach(function(d,i) {\n      dessize[d.des] = (dessize[d.des] || 0) + d.size;\n      srcsize[d.src] = (srcsize[d.src] || 0) + d.size;\n    });\n    var dsmap = {};\n    var parsed = [];\n    this.data.forEach(function(d,i) {\n      var name = \"[\" + d.src +\"][\" + d.des + \"]\";\n      if(!dsmap[name]) {\n        dsmap[name] = {src: d.src, des: d.des, size: 0};\n        parsed.push(dsmap[name]);\n      }\n      dsmap[name].size += d.size;\n    });\n    this.data = parsed;\n    this.nameLen = d3.max(this.data.map(function(it) { return [it.src, it.des]; })\n      .reduce(function(a,b) { return a.concat(b); }, [])\n      .map(function(it) { return (it || \"\").length; }));\n    var mapper = function(key) {\n      var ret = d3.nest().key(function(it) { return it[key]; }).entries(that.data).map(function(it) {\n        it.sum = it.values.reduce(function(a,b) { return a + b.size; }, 0);\n        return it;\n      });\n      var total = ret.reduce(function(a,b) { return a + b.sum; }, 0);\n      var offset = 0;\n      ret.sort(function(a,b) { return b.sum - a.sum; });\n      for(var i = 0; i < ret.length; i++) {\n        it = ret[i];\n        it.percent = it.sum / total;\n        it.offset = offset;\n        it._offset = 0;\n        offset += it.percent;\n        it.side = key;\n      }\n      return ret;\n    };\n    this.srcmap = mapper(\"src\");\n    this.desmap = mapper(\"des\");\n    this.data.sort(function(a,b) {\n      var ret = dessize[b.des] - dessize[a.des];\n      if(ret!=0) return ret;\n      return srcsize[b.src] - srcsize[a.src];\n    });\n    for(var i = 0, src, des; i < this.data.length; i++) {\n      it = this.data[i];\n      src = this.srcmap.filter(function(v) { return v.key == it.src; })[0];\n      des = this.desmap.filter(function(v) { return v.key == it.des; })[0];\n      it.coord = {\n        src: {node: src, offset: src._offset, percent: it.size / src.sum },\n        des: {node: des, offset: des._offset, percent: it.size / des.sum }\n      };\n      src._offset += (it.size / src.sum);\n      des._offset += (it.size / des.sum);\n    }\n  },\n  bind: function() {\n    var that = this,sel,n1,n2;\n    sel = this.srcGroup.selectAll(\"path.arc.src\").data(this.srcmap);\n    sel.exit().remove();\n    n1 = sel.enter().append(\"path\").attr({class: \"arc src\"});\n    sel = this.desGroup.selectAll(\"path.arc.des\").data(this.desmap);\n    sel.exit().remove();\n    n2 = sel.enter().append(\"path\").attr({class: \"arc des\"});\n    sel = this.chordGroup.selectAll(\"path.chord\").data(this.data);\n    sel.exit().remove();\n    sel.enter().append(\"path\").attr({class: \"chord\"});\n    sel = this.svg.selectAll(\"text.label.src\").data(this.srcmap);\n    sel.exit().remove();\n    sel.enter().append(\"text\").attr({class: \"label src\"});\n    sel = this.svg.selectAll(\"text.label.des\").data(this.desmap);\n    sel.exit().remove();\n    sel.enter().append(\"text\").attr({class: \"label des\"});\n    //this.popupChord.nodes(this.svg.selectAll(\"path.chord\"));\n    //this.popupArc.nodes(n1).nodes(n2);\n    this.svg.selectAll(\"path.chord\").on(\"mouseover\", function(d,i) {\n      if(that.handle) {\n        clearTimeout(that.handle);\n        that.handle = null;\n      }\n      that.target = {src: d.src, side: null, des: d.des};\n      that.render();\n    }).on(\"mouseout\", function(d,i) {\n      that.handle = setTimeout(function() {\n        that.target = null; \n        that.render();\n      }, 1000);\n    });\n    this.svg.selectAll(\"path.arc\").on(\"mouseover\", function(d,i) {\n      if(that.handle) {\n        clearTimeout(that.handle);\n        that.handle = null;\n      }\n      that.target = {src: d.src || d.key, side: d.side, des: d.des || d.key};\n      that.render();\n    }).on(\"mouseout\", function(d,i) {\n      that.handle = setTimeout(function() {\n        that.target = null; \n        that.render();\n      }, 1000);\n    });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height;\n    var mw = width - this.config.fontSize * ( this.nameLen + 5);\n    var mh = height - this.config.fontSize * 2;\n    var size = this.size = (mw > mh ? mh : mw ) / 2\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    //this.popupChord.fontSize(this.config.fontSize);\n    //this.popupArc.fontSize(this.config.fontSize);\n    this.thick = this.config.thick * ( this.width < 640 ? 0.5 : 1);\n    this.arc = d3.svg.arc().innerRadius(size - this.thick).outerRadius(size);\n    this.srcAscale = d3.scale.linear().domain([0,1]).range([-Math.PI/6,-Math.PI*5/6]);\n    this.desAscale = d3.scale.linear().domain([0,1]).range([Math.PI/6,Math.PI*5/6]);\n    this.color = d3.scale.ordinal().range(that.config.palette.colors.map(function(it) { return it.hex; }));\n  },\n  render: function() {\n    var that = this;\n    this.svg.selectAll(\"text.label\").attr({\n      transform: function(d,i) {\n        var scale = (d3.select(this).classed(\"src\") ? that.srcAscale : that.desAscale);\n        var a = ( scale(d.offset) + scale(d.offset + d.percent)) / 2;\n        var x = Math.sin(a) * (that.size + that.config.fontSize);\n        var y = -Math.cos(a) * (that.size + that.config.fontSize * 1.5);\n        return [\n          \"translate(\",\n          x + that.width / 2,\n          y + that.height / 2,\n          \")\"\n        ].join(\" \");\n      },\n      \"text-anchor\": function(d,i) {\n        return d3.select(this).classed(\"src\") ? \"end\" : \"start\";\n      },\n      \"dominant-baseline\": \"central\",\n      dx: function(d,i) {\n        return that.config.fontSize * (d3.select(this).classed(\"src\") ? -0 : 0);\n      },\n      \"font-size\": that.config.fontSize\n    }).text(function(d,i) { return d.key; });\n    this.svg.selectAll(\"g.arc\").attr({\n      transform: \"translate(\" + (that.width /2) + \",\" + (that.height / 2) + \")\"\n    });\n    this.svg.selectAll(\"path.arc\").attr({\n      d: function(d,i) {\n        scale = (d3.select(this).classed(\"src\") ? that.srcAscale : that.desAscale);\n        return that.arc.startAngle(scale(d.offset)).endAngle(scale(d.offset + d.percent))();\n      },\n      fill: function(d,i) {\n        return that.color(d.key);\n      },\n      stroke: \"#fff\",\n      \"stroke-width\": 1\n    }).transition().duration(1000).attr({\n      opacity: function(d,i) {\n        var issrc = d3.select(this).classed(\"src\");\n        return (!that.target || (\n          (issrc && that.target.side == \"src\" && d.key == that.target.src) || \n          (!issrc && that.target.side == \"des\" && d.key == that.target.des) ||\n          (that.target.side == null && (\n            (d.key == that.target.src && issrc) ||\n            (d.key == that.target.des && !issrc)\n          ))\n        ) ? 1 : 0.2);\n      },\n    });\n    getp = function(p) {\n      return [Math.sin(p) * (that.size - that.thick),\n        -Math.cos(p) * (that.size - that.thick)];\n    };\n    getc = function(p, q, r) {\n      if(typeof(r) == \"undefined\") r = 3;\n      return [\"C\", p[0]/r, p[1]/r, q[0]/r, q[1]/r, q[0], q[1]];\n    }\n    this.svg.selectAll(\"path.chord\").attr({\n      d: function(d,i) {\n        var src = d.coord.src, des = d.coord.des;\n        var src1 = that.srcAscale(src.node.offset + src.node.percent * src.offset);\n        var src2 = that.srcAscale(src.node.offset + src.node.percent * (src.offset + src.percent));\n        var des1 = that.desAscale(des.node.offset + des.node.percent * des.offset);\n        var des2 = that.desAscale(des.node.offset + des.node.percent * (des.offset + des.percent));\n        var c1 = 0, c2 = 0;\n        var p1 = getp(src1), p2 = getp(src2), p3 = getp(des1), p4 = getp(des2);\n        var s = that.size - that.thick;\n        return [\n          [\"M\", p1[0], p1[1]],\n          [\"A\", s, s, 0, 0, 0, p2[0], p2[1]],\n          getc(p2, p4),\n          [\"A\", s, s, 0, 0, 0, p3[0], p3[1]],\n          getc(p3, p1)\n        ].reduce(function(a,b) { return a.concat(b); }, []).join(\" \");\n      },\n      fill: function(d,i) {\n        return that.color(d.coord.des.node.key);\n      },\n      stroke: \"#fff\",\n      \"stroke-width\": 1\n    }).transition().duration(1000).attr({\n      opacity: function(d,i) {\n        if(!that.target) return 0.5;\n        if(that.target && (\n          (that.target.side == \"src\" && that.target.src == d.src) ||\n          (that.target.side == \"des\" && that.target.des == d.des) ||\n          (that.target.side == null && that.target.src == d.src && that.target.des == d.des)\n        )) return 1;\n        else return 0.1;\n      }\n    });\n  }\n});\n"},"assets":[],"config":{"fontSize":{"name":"Font Size","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":13,"category":"Text","value":"12"},"margin":{"name":"Margin","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":10,"category":"Layout","value":10},"padding":{"name":"Padding","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":10,"category":"Layout","value":10},"palette":{"name":"Palette","type":[{"name":"Palette","level":30,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"qualitative":{"colors":[{"hex":"#c05ae0"},{"hex":"#cf2d0c"},{"hex":"#e9ab1e"},{"hex":"#86ffb5"},{"hex":"#64dfff"},{"hex":"#003f7d"}]},"binary":{"colors":[{"hex":"#ff8356"},{"hex":"#0076a1"}]},"sequential":{"colors":[{"hex":"#950431"},{"hex":"#be043e"},{"hex":"#ec326d"},{"hex":"#fc82a9"},{"hex":"#febed2"},{"hex":"#fee6ee"}]},"diverging":{"colors":[{"hex":"#74001a"},{"hex":"#cd2149"},{"hex":"#f23971"},{"hex":"#ff84ab"},{"hex":"#ffc3d7"},{"hex":"#f2f2dd"},{"hex":"#b8d9ed"},{"hex":"#81b1d0"},{"hex":"#3d8bb7"},{"hex":"#0071a8"},{"hex":"#003558"}]},"subtype":{"qualitative":"qualitative","binary":"binary","sequential":"sequential","diverging":"diverging"},"scale":{}}],"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"category":"Color","value":{"colors":[{"hex":"#f4502a"},{"hex":"#f1c227"},{"hex":"#008a6d"},{"hex":"#00acdb"},{"hex":"#0064a8"}]}},"otherLimit":{"rebindOnChange":true,"name":"Small Data Threshold","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"desc":"Data smaller than this value will be clustered into one set of data","default":0,"category":"Value","value":"0"},"otherLabel":{"rebindOnChange":true,"name":"Label for 'other'","type":[{"name":"String","default":"","level":2,"basetype":[]}],"default":"Other","category":"Text","value":"Other"},"thick":{"name":"Thickness","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":20,"value":20}},"dimension":{"src":{"type":[],"require":true,"desc":"name of source node","fields":[]},"des":{"type":[],"require":true,"desc":"name of destination node","fields":[]},"size":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"require":true,"desc":"flow size","fields":[]}},"library":["d3/3.5.12/min","plotd3/0.1.0"],"dimlen":3,"createdtime":"2016-04-17T13:24:25.000Z","modifiedtime":"2016-07-07T22:03:03.000Z","local":null,"ownername":"plotdb","data":[]}