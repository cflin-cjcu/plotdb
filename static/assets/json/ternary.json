{"_type":{"location":"server","name":"chart"},"owner":4,"key":2013,"permission":{"switch":"publish","list":[{"target":null,"type":"global","perm":"fork","displayname":"Everyone","username":"and anonymous user"}]},"name":"Ternary Plot","theme":null,"parent":null,"description":"ternary plot is useful when we want to visualize 3 dimensional data that sum up to a constant. For example, we can define one's characteristic with  courage, wisdom and strength, summing up them to 100%, and use ternary plot to identify charisma of characters.","basetype":["18"],"visualencoding":["1"],"category":["5"],"tags":["attribute","character"],"likes":0,"searchable":true,"doc":{"name":"document","size":0,"type":"html","lines":1,"content":""},"style":{"name":"stylesheet","size":0,"type":"css","lines":1,"content":""},"code":{"name":"code","size":6234,"type":"javascript","lines":160,"content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: function() {\n    var list = d3.range(10);\n    return {\n      value1: [{name: \"Value1\", data: list.map(function(d,i) { return Math.round(100*Math.random()); })}],\n      value2: [{name: \"Value2\", data: list.map(function(d,i) { return Math.round(100*Math.random()); })}],\n      value3: [{name: \"Value3\", data: list.map(function(d,i) { return Math.round(100*Math.random()); })}],\n    };\n  },\n  dimension: {\n    value1: { type: [plotdb.Number], require: true, desc: \"\" },\n    value2: { type: [plotdb.Number], require: true, desc: \"\" },\n    value3: { type: [plotdb.Number], require: true, desc: \"\" }\n  },\n  config: {\n    margin: {},\n    fontSize: {},\n    gridStroke: {},\n    palette: {default: {colors:[{hex:\"#f00\"},{hex:\"#0f0\"},{hex:\"#00f\"}]}},\n    value1Label: { name: \"Value 1 Label\", extend: \"xAxisLabel\" },\n    value2Label: { name: \"Value 2 Label\", extend: \"xAxisLabel\" },\n    value3Label: { name: \"Value 3 Label\", extend: \"xAxisLabel\" },\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.gridGroup = this.svg.append(\"g\").attr({class: \"grid-group\"});\n    this.dataGroup = this.svg.append(\"g\").attr({class: \"data-group\"});\n    this.frame = this.gridGroup.append(\"path\").attr({class: \"frame\"});\n    this.tooltip = plotd3.html.tooltip(this.root).on(\"mousemove\", function(d,i,popup) {\n      popup.select(\".value\").text([d.value1,d.value2,d.value3].join(\" / \"));\n    });\n    this.gridGroup.append(\"text\").attr({class: \"value1\"});\n    this.gridGroup.append(\"text\").attr({class: \"value2\"});\n    this.gridGroup.append(\"text\").attr({class: \"value3\"});\n  },\n  calc: function(v) {\n    var SQRT32 = Math.sqrt(3)/2;\n    return [\n      0.5 * (2 * v[1] + v[2]) / (v[0] + v[1] + v[2]),\n      SQRT32 * v[2] / (v[0] + v[1] + v[2])\n    ];\n  },\n  parse: function() {\n    var that = this;\n    var SQRT32 = Math.sqrt(3)/2;\n    this.data.map(function(d,i) {\n      if(!d.value1) d.value1 = 0;\n      if(!d.value2) d.value2 = 0;\n      if(!d.value3) d.value3 = 0;\n      d.sum = d.value1 + d.value2 + d.value3;\n      if(d.sum==0) d.value1 = d.sum = 1;\n      d.values = [d.value1, d.value2, d.value3].map(function(v,i) { return v/d.sum; });\n      d.coord = that.calc(d.values);\n    });\n  },\n  bind: function() {\n    var that = this,sel;\n    sel = this.dataGroup.selectAll(\"circle.data\").data(this.data);\n    sel.exit().remove();\n    sel = sel.enter().append(\"circle\").attr({class: \"data\"});\n    this.tooltip.nodes(sel);\n    this.ticks = d3.range(4).map(function(d,i) { return (d/5) + (1/5); });\n    [\"value1\",\"value2\",\"value3\"].map(function(name) {\n      sel = that.gridGroup.selectAll(\"line.grid.\" + name).data(that.ticks);\n      sel.exit().remove();\n      sel.enter().append(\"line\").attr({class: \"grid \" + name});\n    });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height;\n    var SQRT32 = Math.sqrt(3)/2;\n    if(width > height - this.config.fontSize * 4) {\n      this.size = (height - this.config.margin * 2 - this.config.fontSize * 4) / SQRT32;\n    } else {\n      this.size = (width - this.config.margin * 2);\n    }\n    this.xMin = (this.width - this.size)/2;\n    this.xMax = (this.width + this.size)/2;\n    this.yMin = (this.height - this.size * SQRT32)/2;\n    this.yMax = (this.height + this.size * SQRT32)/2;\n    this.tooltip.fontSize(this.config.fontSize);\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.xScale = d3.scale.linear()\n      .domain([0,1])\n      .range([this.xMin, this.xMax]);\n    this.yScale = d3.scale.linear()\n      .domain([0,SQRT32])\n      .range([this.yMax, this.yMin]);\n  },\n  render: function() {\n    var that = this;\n    var SQRT32 = Math.sqrt(3)/2;\n    var c1 = d3.rgb((this.config.palette.colors[0] || {}).hex || \"#f00\");\n    var c2 = d3.rgb((this.config.palette.colors[1] || {}).hex || \"#0f0\");\n    var c3 = d3.rgb((this.config.palette.colors[2] || {}).hex || \"#00f\");\n    this.frame.attr({\n      d: [\n        \"M\", this.xMin, this.yMax,\n        \"L\", this.xMax, this.yMax,\n        \"L\", (this.width/2), this.yMin,\n        \"Z\"\n      ].join(\" \"),\n      fill: \"none\",\n      stroke: \"black\",\n      \"stroke-width\": 2\n    });\n    this.dataGroup.selectAll(\"circle.data\").attr({\n      cx: function(d,i) { return that.xScale(d.coord[0]); },\n      cy: function(d,i) { return that.yScale(d.coord[1]); },\n      r: 4,\n      fill: \"white\",\n      stroke: function(d,i) {\n        var c = [\"r\",\"g\",\"b\"].map(function(v,i) {\n          return parseInt(c1[v] * d.values[i] + c2[v] * d.values[i] + c3[v] * d.values[i]);\n        });\n        return d3.rgb(c[0], c[1], c[2]).toString()\n      },\n      \"stroke-width\": 2\n    });\n    [\"value1\",\"value2\",\"value3\"].map(function(name,i) {\n      that.gridGroup.selectAll(\"line.grid.\"+name).each(function(d) {\n        var p1 = [1,0], p2 = [0,1],v = (d/(1-d));\n        p1.splice(i,0,v);\n        p2.splice(i,0,v);\n        p1 = that.calc(p1);\n        p2 = that.calc(p2);\n        d3.select(this).attr({\n          x1: that.xScale(p1[0]), x2: that.xScale(p2[0]),\n          y1: that.yScale(p1[1]), y2: that.yScale(p2[1]),\n          stroke: that.config.gridStroke,\n          \"stroke-width\": 1\n        });\n      });\n    });\n    this.gridGroup.selectAll(\"text\").attr(\"font-size\", this.config.fontSize);\n    this.gridGroup.select(\"text.value1\").attr({\n      x: this.xMin, y: this.yMax, dy: this.config.fontSize * 1.3,\n      fill: c1.darker().toString()\n    }).text(this.config.value1Label || this.dimension.value1.fieldName || \" \");\n    this.gridGroup.select(\"text.value2\").attr({\n      x: this.xMax, y: this.yMax, dy: this.config.fontSize * 1.3, \"text-anchor\": \"end\",\n      fill: c2.darker().toString()\n    }).text(this.config.value2Label || this.dimension.value2.fieldName || \" \");\n    this.gridGroup.select(\"text.value3\").attr({\n      x: this.width/2, y: this.yMin, dy: -this.config.fontSize * 0.5, \"text-anchor\": \"middle\",\n      fill: c3.darker().toString()\n    }).text(this.config.value3Label || this.dimension.value3.fieldName || \" \");\n\n  }\n});\n"},"assets":[],"config":{"margin":{"name":"Margin","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":10,"category":"Layout","value":10},"fontSize":{"name":"Font Size","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":13,"category":"Text","value":"12"},"gridStroke":{"name":"Grid Stroke Color","type":[{"name":"Color","level":10,"default":"#dc4521","Gray":"#cccccc","Positive":"#3f7ab5","Negative":"#d93510","Neutral":"#cccccc","Empty":"#ffffff","subtype":{"negative":"negative","positive":"positive","neutral":"neutral"}}],"desc":"Stroke color for Grid Lines","default":"#ccc","category":"Color","value":"#cccccc"},"palette":{"default":{"colors":[{"hex":"#f00"},{"hex":"#0f0"},{"hex":"#00f"}]},"name":"Palette","type":[{"name":"Palette","level":30,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"qualitative":{"colors":[{"hex":"#c05ae0"},{"hex":"#cf2d0c"},{"hex":"#e9ab1e"},{"hex":"#86ffb5"},{"hex":"#64dfff"},{"hex":"#003f7d"}]},"binary":{"colors":[{"hex":"#ff8356"},{"hex":"#0076a1"}]},"sequential":{"colors":[{"hex":"#950431"},{"hex":"#be043e"},{"hex":"#ec326d"},{"hex":"#fc82a9"},{"hex":"#febed2"},{"hex":"#fee6ee"}]},"diverging":{"colors":[{"hex":"#74001a"},{"hex":"#cd2149"},{"hex":"#f23971"},{"hex":"#ff84ab"},{"hex":"#ffc3d7"},{"hex":"#f2f2dd"},{"hex":"#b8d9ed"},{"hex":"#81b1d0"},{"hex":"#3d8bb7"},{"hex":"#0071a8"},{"hex":"#003558"}]},"subtype":{"qualitative":"qualitative","binary":"binary","sequential":"sequential","diverging":"diverging"},"scale":{}}],"category":"Color","value":{"colors":[{"hex":"#f00"},{"hex":"#0f0"},{"hex":"#00f"}]}},"value1Label":{"name":"Value 1 Label","extend":"xAxisLabel","type":[{"name":"String","default":"","level":2,"basetype":[]}],"category":"Text","value":"zymotic rate"},"value2Label":{"name":"Value 2 Label","extend":"xAxisLabel","type":[{"name":"String","default":"","level":2,"basetype":[]}],"category":"Text","value":"wound rate"},"value3Label":{"name":"Value 3 Label","extend":"xAxisLabel","type":[{"name":"String","default":"","level":2,"basetype":[]}],"category":"Text","value":"other"}},"dimension":{"value1":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"require":true,"desc":"","fields":[{"dataset":null,"location":"sample","name":"zymotic rate(‰)","datatype":null,"data":[],"datasetname":"Crimean War 1854"}]},"value2":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"require":true,"desc":"","fields":[{"dataset":null,"location":"sample","name":"wound rate(‰)","datatype":null,"data":[],"datasetname":"Crimean War 1854"}]},"value3":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"require":true,"desc":"","fields":[{"dataset":null,"location":"sample","name":"other rate(‰)","datatype":null,"data":[],"datasetname":"Crimean War 1854"}]}},"library":["d3/3.5.12/min","plotd3/0.1.0"],"dimlen":3,"createdtime":"2016-07-24T00:32:02.000Z","modifiedtime":"2016-07-24T18:21:03.000Z","local":null,"ownername":"plotdb","data":[]}