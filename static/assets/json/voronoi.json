{"_type":{"location":"server","name":"chart"},"owner":4,"key":1017,"permission":{"list":[{"perm":"fork","type":"global","target":null,"username":"and anonymous user","displayname":"Everyone"}],"value":[],"switch":"publish"},"name":"Voronoi Treemap","theme":null,"parent":null,"description":"Specialized treemap in which the area is divided by weighted voronoi diagram.","basetype":["8"],"visualencoding":["6"],"category":["1","4"],"tags":["voronoi","treemap","area"],"likes":null,"searchable":true,"doc":{"name":"document","size":0,"type":"html","lines":1,"content":""},"style":{"name":"stylesheet","size":0,"type":"css","lines":1,"content":""},"code":{"name":"code","size":6518,"type":"javascript","lines":185,"content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: function() {\n    var list = d3.range(20);\n    return {\n      value: [{name: \"Score\", data: list.map(function(d,i) { return Math.round(Math.random() * 90 + 10); })}],\n      name: [{name: \"Name\", data: list.map(function(d,i) { return plotdb.data.sample.name.rand(); })}],\n      category: [{name: \"Dept\", data: list.map(function(d,i) { return plotdb.data.sample.category.rand(); })}]\n    };\n  },\n  dimension: {\n    value: { type: [plotdb.Number], require: true, desc: \"size of the block\" },\n    name: { type: [], require: false, desc: \"name of the block\" },\n    category: { type: [], require: false, desc: \"parent of the block\"}\n  },\n  config: {\n    fontSize: {},\n    margin: {},\n    palette: {},\n    legendLabel: {},\n    labelShadowSize: {},\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.legendGroup = this.svg.append(\"g\").attr({class: \"legend-group\"});\n    setInterval(function() {\n      that.tick();\n    }, 30);\n  },\n  parse: function() {\n    this.data.map(function(it) { \n      it.key = it.name;\n      it.data = it.value;\n    });\n    this.categories = d3.map(this.data, function(d,i) { return d.category; }).keys();\n    this.parsed = {children: d3.nest().key(function(it) { return it.category; }).entries(this.data).map(function(it) {\n      it.children = it.values;\n      return it;\n    })};\n  },\n  bind: function() {\n    var that = this, sel;\n    var sites = this.treemap.getSites();\n    sel = this.svg.selectAll(\"path.data\").data(this.treemap.getPolygons());\n    sel.exit().remove();\n    sel.enter().append(\"path\").attr({\"class\": \"data\", opacity: 1});\n    this.svg.selectAll(\"path.data\").attr({\n      class: function(d,i) {\n        return (sites[i].lv <=0 ? \"data group\" : \"data\");\n      }\n    });\n    this.polygons = this.svg.selectAll(\"path.data\");\n    sel = this.svg.selectAll(\"g.label\").data(sites);\n    sel.exit().remove();\n    sel.enter().append(\"g\").attr({\"class\": \"label\"}).each(function(it) {\n      var node = d3.select(this);\n      node.append(\"text\").attr({\"class\": \"name shadow\"});\n      node.append(\"text\").attr({\"class\": \"value shadow\"});\n      node.append(\"text\").attr({\"class\": \"name\"});\n      node.append(\"text\").attr({\"class\": \"value\"});\n    });\n    this.sites = this.svg.selectAll(\"g.label\");\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.cScale = plotdb.Palette.scale.ordinal(this.config.palette);\n    this.legend = plotd3.rwd.legend()\n      .scale(this.cScale)\n      .orient(\"bottom\")\n      .tickValues(this.categories)\n      .size([this.width - 2 * this.config.margin, 100])\n      .fontSize(this.config.fontSize);\n    this.legend.label(this.config.legendLabel || this.dimension.value.fieldName || \"\");\n    this.legendGroup.call(this.legend).selectAll(\".legend\").on(\"mouseover\", function(d,i) {\n      var sites = that.treemap.getSites();\n      that.activeGroup = d;\n      that.polygons.transition().attr({\n        opacity: function(d,i) {\n          var data = sites[i];\n          return (!that.activeGroup || that.activeGroup == data.key || that.activeGroup == data.category ? 1 : 0.1);\n        }\n      });\n    }).on(\"mouseout\", function(d,i) {\n      that.activeGroup = null;\n      that.polygons.transition().attr({ opacity: 1 });\n    });\n    this.legendSize = this.legend.offset();\n    this.xScale = d3.scale.linear().domain([0,width]).range([\n      this.config.margin, \n      width - this.config.margin\n    ]);\n    this.yScale = d3.scale.linear().domain([0,height]).range([\n      this.config.margin, \n      height - this.config.margin - this.legendSize[1] - this.config.fontSize\n    ]);\n    this.treemap = new Voronoi.Treemap(this.parsed, Voronoi.Polygon.create(width, height, 60), width, height);\n  },\n  tick: function() {\n    this.treemap.compute();\n    this.render();\n  },\n  render: function() {\n    var that = this;\n    var sites = this.treemap.getSites();\n    var polygons = this.treemap.getPolygons();\n    this.legendGroup.attr({\n      transform: [\"translate(\", (this.width - this.legendSize[0])/2, (this.height - this.legendSize[1] - this.config.margin), \")\"].join(\" \")\n    });\n    this.polygons.data(polygons).attr({\n      d: function(it) {\n        if(!it || !it.length) return \"\"\n        ret = [\"M\", that.xScale(it[0].x), that.yScale(it[0].y)];\n        for(var idx = 0; idx < it.length; idx++) {\n          ret.push(\"L\");\n          ret.push(that.xScale(it[idx].x));\n          ret.push(that.yScale(it[idx].y));\n        }\n        ret.push(\"L\");\n        ret.push(that.xScale(it[0].x));\n        ret.push(that.yScale(it[0].y));\n        return ret.join(\" \");\n      },\n      fill: function(it,i) {\n        if(sites[i].lv == 0) return that.cScale(sites[i].key);\n        else return \"none\"\n      },\n      stroke: \"#000\",\n      \"stroke-width\": function(it,i) {\n        if(sites[i].lv <= 0) return 5;\n        return 1;\n      }\n    });\n    this.sites.attr({\n      transform: function(it) {\n        var x = that.xScale(it.x);\n        var y = that.yScale(it.y);\n        if(isNaN(x)) x = -10000;\n        if(isNaN(y)) y = -10000;\n        return [\"translate(\", x, y, \")\"].join(\" \");\n      },\n      \"font-size\": that.config.fontSize,\n    }).each(function(it) {\n      var node = d3.select(this);\n      attr = {\n        fill: function(it) {\n          var hsl = d3.hsl(that.cScale(it.category));\n          if(hsl.l > 0.65) return \"#000\";\n          return \"#fff\";\n        },\n        \"text-anchor\": \"middle\",\n        \"dominant-baseline\": \"central\"\n      };\n      node.selectAll(\"text.name\").attr(attr).attr(\"dy\", -that.config.fontSize/2).text(function(it) {\n        if(it.lv >= 1) return it.name;\n        return \"\";\n      });\n      node.selectAll(\"text.value\").attr(attr).attr({\n        dy: that.config.fontSize/2,\n        \"font-size\": \"0.8em\",\n        \"font-weight\": \"200\"\n      }).text(function(it) {\n        if(it.lv >= 1) return Math.round(100*it.data)/100;\n        return \"\";\n      });\n      node.selectAll(\"text.shadow\").attr({\n        stroke: function(it) {\n          var hsl = d3.hsl(that.cScale(it.category));\n          if(hsl.l > 0.65) return \"#fff\";\n          return \"#000\";\n        },\n        \"stroke-width\": that.config.labelShadowSize\n      });\n    });\n  }\n});\n"},"assets":[],"config":{"fontSize":{"name":"Font Size","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":13,"category":"Text","value":"12"},"margin":{"name":"Margin","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":10,"category":"Layout","value":"10"},"palette":{"name":"Palette","type":[{"name":"Palette","level":30,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"qualitative":{"colors":[{"hex":"#c05ae0"},{"hex":"#cf2d0c"},{"hex":"#e9ab1e"},{"hex":"#86ffb5"},{"hex":"#64dfff"},{"hex":"#003f7d"}]},"binary":{"colors":[{"hex":"#ff8356"},{"hex":"#0076a1"}]},"sequential":{"colors":[{"hex":"#950431"},{"hex":"#be043e"},{"hex":"#ec326d"},{"hex":"#fc82a9"},{"hex":"#febed2"},{"hex":"#fee6ee"}]},"diverging":{"colors":[{"hex":"#74001a"},{"hex":"#cd2149"},{"hex":"#f23971"},{"hex":"#ff84ab"},{"hex":"#ffc3d7"},{"hex":"#f2f2dd"},{"hex":"#b8d9ed"},{"hex":"#81b1d0"},{"hex":"#3d8bb7"},{"hex":"#0071a8"},{"hex":"#003558"}]},"subtype":{"qualitative":"qualitative","binary":"binary","sequential":"sequential","diverging":"diverging"},"scale":{}}],"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"category":"Color","value":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]}},"legendLabel":{"name":"Legend Label","type":[{"name":"String","default":"","level":2,"basetype":[]}],"category":"Text"},"labelShadowSize":{"name":"Label Shadow Size","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":2,"category":"Text","value":"2"}},"dimension":{"value":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"require":true,"desc":"size of the block","fields":[]},"name":{"type":[],"require":false,"desc":"name of the block","fields":[]},"category":{"type":[],"require":false,"desc":"parent of the block","fields":[]}},"library":["d3/3.5.12/min","plotd3/0.1.0","voronoijs/0.0.1/min"],"dimlen":3,"createdtime":"2016-02-29T16:47:57.000Z","modifiedtime":"2016-08-09T09:48:27.000Z","local":null,"ownername":"plotdb","data":[]}