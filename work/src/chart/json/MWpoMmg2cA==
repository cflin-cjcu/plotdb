{"theme":null,"data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"1jh2h6p","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"Bullet Chart","desc":"a standard bullet chart. bullet chart is a variation of bar chart by Stephen Few.","tags":["stephen few"],"doc":{"name":"document","type":"html","content":"<h2 style=\"text-align:center\">Performance Index</h2>","lines":1,"size":52},"style":{"name":"stylesheet","type":"css","content":".domain {\n  fill: none;\n  stroke: #000;\n}\n.tick line {\n  stroke: #000;\n}","lines":7,"size":72},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: d3.range(10).map(function() {\n    var base = parseInt(Math.random() * 10) + 1;\n    var g = 1 * base;\n    var s = (Math.random() * 0.3 + 0.6) * base;\n    var b = (Math.random() * 0.3 + 0.2) * base;\n    return {\n      performance: Math.random() * base,\n      comparative: Math.random() * base,\n      good: g,\n      satisfactory: s,\n      bad: b,\n      name: [\"ROI\", \"CTA\", \"Revenue\", \"Traffic\", \"Market Share\", \"Growth\"][parseInt(Math.random()* 6)],\n      unit: [\"dollar ($)\", \"% (/ppl)\", \"ppl\", \"Visit(s)\"][parseInt(Math.random() * 4)]\n    };\n  }),\n  dimension: {\n    performance: { type: [plotdb.Number], require: true, desc: \"performance value\" },\n    comparative: { type: [plotdb.Number], require: true, desc: \"comparative value\" },\n    bad: { type: [plotdb.Number], require: true, desc: \"qualitative value: bad\" },\n    satisfactory: { type: [plotdb.Number], require: true, desc: \"qualitative value: satisfactory\" },\n    good: { type: [plotdb.Number], require: true, desc: \"qualitative value: good\" },\n    name: { type: [], require: false, desc: \"name of thie performance value\"},\n    unit: {type: [], require: false, desc: \"unit of performance\"}\n  },\n  config: {\n    fontSize: { name: \"Font Size\", type: [plotdb.Number], default: 12},\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10 },\n    margin: { name: \"Margin\", type: [plotdb.Number], default: 10 },\n    performance: { name: \"Performance\", type: [plotdb.Color], default: plotdb.Color['default']},\n    bad: { name: \"Bad\", type: [plotdb.Color], default: plotdb.Color['default']},\n    satisfactory: { name: \"Satisfactory\", type: [plotdb.Color], default: plotdb.Color['default']},\n    good: { name: \"Good\", type: [plotdb.Color], default: plotdb.Color['default']},\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.vps = this.data.map(function(it) { return it.performance; });\n    this.vcs = this.data.map(function(it) { return it.comparative; });\n    this.vbs = this.data.map(function(it) { return it.bad; });\n    this.vss = this.data.map(function(it) { return it.satisfactory; });\n    this.vgs = this.data.map(function(it) { return it.good; });\n    this.values = this.vps.concat(this.vcs).concat(this.vbs).concat(this.vss).concat(this.vgs);\n    this.vrange = d3.extent(this.values);\n    this.names = this.data.map(function(it) { return it.name; });\n    this.units = this.data.map(function(it) { return it.unit; });\n    this.nameMax = d3.max(this.names.map(function(it) { return (it || \"\").length; }));\n    this.unitMax = d3.max(this.units.map(function(it) { return (it || \"\").length; }));\n    this.xscales = this.data.map(function(it) {\n      values = [it.performance, it.comparative, it.bad, it.satisfactory, it.good];\n      return d3.scale.linear().domain([0,d3.max(values)]);\n    });\n  },\n  bind: function() {\n    var that = this;\n    this.svg.selectAll(\"g.bar\").data(this.data).enter().append(\"g\").attr({class: \"bar\"}).each(function(d,i) {\n      var node = d3.select(this);\n      node.append(\"rect\").attr({class: \"good\"});\n      node.append(\"rect\").attr({class: \"satisfactory\"});\n      node.append(\"rect\").attr({class: \"bad\"});\n      node.append(\"rect\").attr({class: \"comparative\"});\n      node.append(\"rect\").attr({class: \"performance\"});\n      node.append(\"text\").attr({class: \"name\"});\n      node.append(\"text\").attr({class: \"unit\"});\n      node.append(\"g\").attr({class: \"axis horizontal\"});\n    });\n    \n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var svgbox = this.svg[0][0].getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height - 10 - svgbox.top;\n    var barHeight = this.barHeight = this.config.fontSize * 3;\n    this.axisHeight = this.config.fontSize + 10;\n    var chartHeight = (this.config.margin * 2) + \n        (this.barHeight + this.config.padding + this.axisHeight) * this.data.length;\n    if(height < chartHeight) height = chartHeight;\n    this.nameWidth = ( this.nameMax + 2 ) * this.config.fontSize;\n    this.unitWidth = ( this.unitMax + 4 ) * this.config.fontSize / 2;\n    this.labelWidth = d3.max([this.nameWidth,this.unitWidth]);\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.labelWidth = 100;\n    this.xscale = d3.scale.linear().domain([0,this.vrange[1]]).range([\n      this.labelWidth, width - 2 * this.config.margin\n    ]);\n    this.xscales.forEach(function(it) {\n      it.range([\n        that.labelWidth, width - 2 * that.config.margin\n      ]);\n    });\n    this.axes = this.xscales.map(function(it) {\n      return d3.svg.axis().orient(\"bottom\").scale(it);\n    });\n  },\n  render: function() {\n    var that = this;\n    var bh = that.barHeight;\n    this.svg.selectAll(\"g.bar\").attr({\n      transform: function(d,i) {\n        return [\n          \"translate(\",\n          that.config.margin,\n          \",\",\n          that.config.margin + (i * (bh + that.config.padding + that.axisHeight)),\n          \")\"\n        ].join(\"\");\n      }\n    }).each(function(d,i) {\n      var node = d3.select(this);\n      node.select(\"rect.performance\").attr({\n        x: function(d) { return that.xscales[i](0); },\n        y: bh * 0.4, height: bh * 0.2,\n        width: function(d) {\n          return that.xscales[i](d.performance) - that.xscales[i](0);\n        },\n        fill: that.config.performance\n      });\n      node.select(\"rect.comparative\").attr({\n        y: bh * 0.2, height: bh * 0.6, width: 4,\n        x: function(d) {\n          return that.xscales[i](d.comparative) - 2;\n        },\n        fill: that.config.performance\n      });\n      node.select(\"rect.bad\").attr({\n        x: function(d) { return that.xscales[i](0); },\n        y: 0, height: bh, \n        width: function(d) { return that.xscales[i](d.bad) - that.xscales[i](0); },\n        fill: that.config.bad\n      });\n      node.select(\"rect.satisfactory\").attr({\n        x: function(d) { return that.xscales[i](0); },\n        y: 0, height: bh,\n        width: function(d) { return that.xscales[i](d.satisfactory) - that.xscales[i](0); },\n        fill: that.config.satisfactory\n      });\n      node.select(\"rect.good\").attr({\n        x: function(d) { return that.xscales[i](0); },\n        y: 0, height: bh,\n        width: function(d) { return that.xscales[i](d.good) - that.xscales[i](0); },\n        fill: that.config.good\n      });\n      node.select(\"text.name\").attr({\n        x: that.labelWidth / 2,\n        y: bh/2 - that.config.fontSize / 2 - 2,\n        \"text-anchor\": \"middle\",\n        \"dominant-baseline\": \"central\",\n        \"font-size\": that.config.fontSize\n      }).text(function(it) { return it.name; });\n      node.select(\"text.unit\").attr({\n        x: that.labelWidth / 2,\n        y: bh/2 + that.config.fontSize / 2 + 2,\n        \"text-anchor\": \"middle\",\n        \"dominant-baseline\": \"central\",\n        \"font-size\": (that.config.fontSize / 1.5 < 12\n                      ?(that.config.fontSize>12?12:that.config.fontSize)\n                      :that.config.fontSize / 1.5)\n      }).text(function(it) { return it.unit; });\n      node.select(\"g.axis\").attr({\n        transform: \"translate(0,\"+bh+\")\"\n      }).call(that.axes[i]);\n      node.select(\"g.axis\").selectAll(\"text\").attr({\n        \"font-size\": that.config.fontSize\n      });\n    });\n  }\n});","lines":174,"size":7457},"config":{"fontSize":{"name":"Font Size","type":[{"name":"Number","level":3}],"default":12,"value":"13"},"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"value":10},"margin":{"name":"Margin","type":[{"name":"Number","level":3}],"default":10,"value":"30"},"performance":{"name":"Performance","type":[{"name":"Color","level":4,"default":"#dc4521"}],"default":"#dc4521","value":"#313131"},"bad":{"name":"Bad","type":[{"name":"Color","level":4,"default":"#dc4521"}],"default":"#dc4521","value":"#e7684a"},"satisfactory":{"name":"Satisfactory","type":[{"name":"Color","level":4,"default":"#dc4521"}],"default":"#dc4521","value":"#f0df98"},"good":{"name":"Good","type":[{"name":"Color","level":4,"default":"#dc4521"}],"default":"#dc4521","value":"#6ae487"}},"dimension":{"performance":{"type":[{"name":"Number","level":3}],"require":true,"desc":"performance value"},"comparative":{"type":[{"name":"Number","level":3}],"require":true,"desc":"comparative value"},"bad":{"type":[{"name":"Number","level":3}],"require":true,"desc":"qualitative value: bad"},"satisfactory":{"type":[{"name":"Number","level":3}],"require":true,"desc":"qualitative value: satisfactory"},"good":{"type":[{"name":"Number","level":3}],"require":true,"desc":"qualitative value: good"},"name":{"type":[],"require":false,"desc":"name of thie performance value"},"unit":{"type":[],"require":false,"desc":"unit of performance"}},"assets":[],"isType":false,"createdTime":1457528413227,"modifiedTime":1458278938317,"ownerName":"Kirby Wu","likes":0,"parent":null,"basetype":"1","visualencoding":["1"],"category":["6"]}