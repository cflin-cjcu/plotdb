{"theme":null,"config":{"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":true,"value":10},"marginV":{"name":"V. Margin","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":false,"value":10},"marginH":{"name":"H. Margin","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":false,"value":10},"palette":{"name":"Palette","type":[{"name":"Palette","level":5,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"qualitative":{"colors":[{"hex":"#c05ae0"},{"hex":"#cf2d0c"},{"hex":"#e9ab1e"},{"hex":"#86ffb5"},{"hex":"#64dfff"},{"hex":"#003f7d"}]},"binary":{"colors":[{"hex":"#ff8356"},{"hex":"#0076a1"}]},"sequential":{"colors":[{"hex":"#950431"},{"hex":"#be043e"},{"hex":"#ec326d"},{"hex":"#fc82a9"},{"hex":"#febed2"},{"hex":"#fee6ee"}]},"diverging":{"colors":[{"hex":"#74001a"},{"hex":"#cd2149"},{"hex":"#f23971"},{"hex":"#ff84ab"},{"hex":"#ffc3d7"},{"hex":"#f2f2dd"},{"hex":"#b8d9ed"},{"hex":"#81b1d0"},{"hex":"#3d8bb7"},{"hex":"#0071a8"},{"hex":"#003558"}]},"subtype":{"qualitative":"qualitative","binary":"binary","sequential":"sequential","diverging":"diverging"}}],"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"hint":"qualitative","value":{"colors":[{"hex":"#f4502a"},{"hex":"#f1c227"},{"hex":"#008a6d"},{"hex":"#00acdb"},{"hex":"#0064a8"}]}},"discrete":{"name":"Discrete Direction","type":[{"name":"Boolean","level":2}],"default":true,"value":true},"discreteDiv":{"name":"Discrete Division","type":[{"name":"Number","level":3}],"default":36,"value":"36"},"title":{"name":"Chart Title","type":[{"name":"String","level":1}],"default":"Stacked Bar Chart","value":"Radial Bubbles"}},"dimension":{"direction":{"type":[{"name":"Number","level":3}],"require":true,"desc":"direction of bubble. support only data have similar characteristic with angle.","fields":[]},"distance":{"type":[{"name":"Number","level":3}],"require":true,"desc":"distance of bubble from chart centroid","fields":[]},"size":{"type":[{"name":"Number","level":3}],"require":true,"desc":"bubble size","fields":[]},"value":{"type":[{"name":"Number","level":3}],"require":true,"desc":"value","fields":[]},"valueAlt":{"type":[{"name":"Number","level":3}],"desc":"value for comparing","fields":[]}},"data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"1qv9ia1","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"Radial Bubble Chart","desc":"radial bubble chart with following 4 dimensions: direction, distance, color, size.","tags":[""],"doc":{"name":"document","type":"html","content":"<div id=\"popup\" class=\"popup box\">\n  <div class=\"shape\"></div>\n  <div class=\"title\"></div>\n  <div class=\"desc\"></div>\n</div>\n<svg></svg>\n","lines":7,"size":137},"style":{"name":"stylesheet","type":"css","content":"svg, body, text {\n  font-family: arial;\n  color: #222;\n  fill: #222;\n  font-size: 12px;\n}\ntext {\n  text-anchor: middle;\n  dominant-baseline: central;\n}\ncircle, rect, path {\n  fill: #eee;\n  stroke: #555;\n  stroke-width: 2;\n}\nh3 {\n  text-align: center;\n  font-family: Arial;\n}\n\n.axis.horizontal {\n}\n.axis .tick {\n  display: none;\n}\n.axis .tick:nth-of-type(3n+1) {\n  display: block;\n}\n.axis .tick line {\n  stroke: #222;\n  stroke-width: 2\n}\n.axis.horizontal .tick text {\n}\n\n.axis .domain {\n  fill: none;\n}\n\n.axis.horizontal .label {\n}\n\n.popup {\n  position: absolute;\n  background: rgba(0,0,0,1.0);\n  color: #fff;\n  padding: 5px 10px;\n  border-radius: 5px;\n  display: none;\n}\n.popup .title, .popup .desc {\n  margin-left: 23px;\n}\n.popup .shape {\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  background: #fff;\n  position: absolute;\n  left: 10px;\n  top: 5px;\n}\n.popup:after {\n  content: \" \";\n  display: block;\n  width: 10px;\n  height: 10px;\n  background: #ff0;\n  position: absolute;\n  transform: rotate(45deg);\n  background: rgba(0,0,0,1.0);\n  top: 50%;\n  margin-top: -5px;\n}\n.popup.left:after {\n  right: -5px;\n}\n.popup.right:after {\n  left: -5px;\n}\n.legend {\n  text-align: center;\n}\n.legend .entry{\n  display: inline-block;\n  padding: 5px 15px 5px 5px;\n  margin-right: 5px;\n  cursor: pointer;\n\n}\n.legend .entry:hover {\n  background: rgba(255,255,255,0.5);\n  transform: scale(1.2);\n}\n.legend .entry .mark {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  vertical-align: middle;\n  margin-right: 5px;\n}\n.legend .entry .name {\n  display: inline-block;\n  vertical-align: middle;\n}\n","lines":107,"size":1612},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: d3.range(100).map(function() { return {\n      direction: Math.random(), distance: Math.random(), size: Math.random(), value: Math.random()      \n    }; \n  }),\n  dimension: {\n    direction: { type: [plotdb.Number], require: true, desc: \"direction of bubble. support only data have similar characteristic with angle.\" },\n    distance: { type: [plotdb.Number], require: true, desc: \"distance of bubble from chart centroid\" },\n    size: { type: [plotdb.Number], require: true, desc: \"bubble size\" },\n    value: { type: [plotdb.Number], require: true, desc: \"value\" },\n    valueAlt: { type: [plotdb.Number], desc: \"value for comparing\" },\n\n  },\n  config: {\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10, rebindOnChange: true },\n    marginV: { name: \"V. Margin\", type: [plotdb.Number], default: 10, rebindOnChange: false},\n    marginH: { name: \"H. Margin\", type: [plotdb.Number], default: 10, rebindOnChange: false},\n    palette: { name: \"Palette\", type: [plotdb.Palette], default: plotdb.Palette.default,\n             hint: plotdb.Palette.subtype.qualitative},\n    discrete: { name: \"Discrete Direction\", type: [plotdb.Boolean], default: true },\n    discreteDiv: { name: \"Discrete Division\", type: [plotdb.Number], default: 36}, \n    title: { name: \"Chart Title\", type: [plotdb.String], default: \"Stacked Bar Chart\"}\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).select(\"svg\");\n    this.grid = this.svg.append(\"circle\").attr({\"class\": \"grid\"});\n    this.name = this.svg.append(\"text\").attr({\"class\": \"title\"});\n    this.distances = this.data.map(function(it) { return it.distance; });\n    this.directions = this.data.map(function(it) { return it.direction; });\n    this.sizes = this.data.map(function(it) { return it.size; });\n    this.values = this.data.map(function(it) { return it.value; });\n    this.valueAlt = this.data.map(function(it) { return it.valueAlt; });\n    this.valueAll = this.values.concat(this.valueAlt);\n  },\n  bind: function() {\n    var that = this;\n    this.lines = this.svg.selectAll(\"g.lines\").data(this.data)\n      .enter().append(\"g\").attr(\"class\", \"lines chart\").each(function(d,i) {\n        d3.select(this).append(\"line\").attr({class: \"connect\"});\n      });\n\n    this.bubbles = this.svg.selectAll(\"g.bubbles\").data(this.data)\n      .enter().append(\"g\").attr(\"class\", \"bubbles chart\").each(function(d,i) {\n        var node = d3.select(this)\n        node.append(\"circle\").attr(\"class\",\"node data\");\n      });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height - 10;\n    var mv = this.config.marginV;\n    var mh = this.config.marginH;\n    this.size = (width > height? height : width);\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.dscale = d3.scale.linear()\n      .domain([0,d3.max(this.distances)])\n      .range([this.size/4, (this.size / 2.1) - 20]);\n    this.ascale = d3.scale.linear().domain([0,d3.max(this.directions)]).range([0, Math.PI * 2]);\n    this.dascale = function(it) { \n      if(that.config.discrete) {\n        return Math.PI * 2 * (\n          parseInt((that.config.discreteDiv || 1)* (that.ascale(it) / (Math.PI * 2))) / (that.config.discreteDiv || 1)\n        );\n      } else return that.ascale(it);\n    };\n    this.rscale = d3.scale.sqrt().domain([0,d3.max(this.sizes)]).range([2, 10]);\n    colorhex = that.config.palette.colors.map(function(it) { return it.hex; });\n    this.colors = d3.scale.linear().domain(\n      d3.range(colorhex.length).map(function(it) { \n        return d3.quantile(d3.extent(that.values), it / colorhex.length); \n      })\n    ).range(colorhex);\n  },\n  render: function() {\n    var that = this;\n    this.name.attr({\n      x: function(it) { return that.width / 2;},\n      y: function(it) { return that.height / 2; },\n    }).style({\n      \"text-anchor\": \"middle\",\n      \"dominant-baseline\": \"central\"\n    }).text(that.config.title);\n    this.grid.attr({\n      cx: function(it) { return that.width / 2;},\n      cy: function(it) { return that.height / 2;},\n      r: function(it) { return that.size / 6; },\n    }).style({\n      stroke: \"rgba(0,0,0,0.5)\",\n      \"stroke-width\": 1\n    });\n    this.svg.selectAll(\"g.chart\")\n      .attr({\n        transform: function(it) {\n          var x,y;\n          x = that.width / 2;\n          y = that.height / 2;\n          return \"translate(\"+x+\",\"+y+\")\";\n        }\n      });\n    this.bubbles.selectAll(\"circle\")\n      .attr({\n         cx: function(it) { \n           return Math.cos(that.dascale(it.direction)) * that.dscale(it.distance);\n         },\n         cy: function(it) { \n           return Math.sin(that.dascale(it.direction)) * that.dscale(it.distance);\n         },\n         r: function(it) {\n           return that.rscale(it.size);\n         }\n      }).style({\n         fill: function(it) {\n           return that.colors(it.value);\n         },\n         stroke: \"rgba(0,0,0,0.2)\"\n      });\n    this.lines.selectAll(\"line\")\n      .attr({\n        x1: function(it) { return Math.cos(that.dascale(it.direction)) * that.size / 6; },\n        x2: function(it) { return Math.cos(that.dascale(it.direction)) * that.dscale(it.distance); },\n        y1: function(it) { return Math.sin(that.dascale(it.direction)) * that.size / 6; },\n        y2: function(it) { return Math.sin(that.dascale(it.direction)) * that.dscale(it.distance); },\n        stroke: \"#999\"\n      });\n  }\n});","lines":134,"size":5639},"assets":[],"isType":false,"createdTime":1455818216295,"modifiedTime":1458552644191,"ownerName":"Kirby Wu","likes":0,"parent":null,"basetype":"6","visualencoding":["3","4","6","9"],"category":["1"]}