{"theme":null,"data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"mb8xkz","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"Cycle Plot","desc":"a cycle plot based on date.","tags":[""],"doc":{"name":"document","type":"html","content":"","lines":1,"size":0},"style":{"name":"stylesheet","type":"css","content":".domain, .axis .tick line {\n  fill: none;\n  stroke: #000;\n}","lines":4,"size":59},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: d3.range(100).map(function(it) {\n    var now = new Date().getTime();\n    return {\n      value: Math.random() + Math.abs(( it % 7 ) / 3),\n      date: new Date(now - 86400 * 1000 * it)\n    };\n  }),\n  dimension: {\n    value: { type: [plotdb.Number], require: true, desc: \"Value ( y-axis ) \" },\n    date: { type: [plotdb.Date], require: true, desc: \"Date of value ( x-axis )\" }\n  },\n  config: {\n    fontSize: { name: \"Font Size\", type: [plotdb.Number], default: 12 },\n    margin: { name: \"Margin\", type: [plotdb.Number], default: 10 },\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10 }\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.yAxisGroup = this.svg.append(\"g\").attr({class: \"axis vertical\"});\n    this.gridGroup = this.svg.append(\"g\").attr({class: \"grid-group\"});\n    this.valuerange = d3.extent(this.data.map(function(it) { return it.value; }));\n    this.parsed = d3.nest().key(function(it) { return new Date(it.date).getDay(); }).entries(this.data);\n    this.groupSize = d3.max(this.parsed.map(function(it) { return it.values.length; }));\n    this.parsed.map(function(it) { it.mean = d3.mean(it.values,function(it) { return it.value; }); });\n  },\n  bind: function() {\n    var that = this;\n    this.svg.selectAll(\"g.data-group\").data(this.parsed)\n    .enter().append(\"g\").attr({class: \"data-group\"}).each(function(d,i) {\n      var node = d3.select(this);\n      node.append(\"path\").attr({class: \"connect\"});\n      node.append(\"text\").attr({class: \"label\"});\n      node.append(\"line\").attr({class: \"\"});\n    });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height - 10;\n    this.xAxisHeight = 3 * this.config.fontSize;\n    this.yAxisWidth = 10 * this.config.fontSize;\n    this.blockWidth = ( width - 2 * this.config.margin - this.yAxisWidth ) / 7;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.yscale = d3.scale.linear().domain([0, this.valuerange[1]*1.01]).range([\n      height - this.xAxisHeight - this.config.margin,\n      this.config.margin\n    ]);\n    this.yticks = this.yscale.ticks(10);\n    this.xscale = d3.scale.linear().domain([0,this.groupSize]).range([\n      this.config.padding / 2, this.blockWidth - this.config.padding\n    ]);\n    this.line = d3.svg.line()\n      .x(function(d,i) { return that.xscale(i); })\n      .y(function(it) { return that.yscale(it.value);});\n    this.yAxis = d3.svg.axis().orient(\"left\").scale(this.yscale);\n    this.yAxisGroup.call(this.yAxis);\n    var update = this.gridGroup.selectAll(\"line.grid.horizontal\").data(this.yticks);\n    update.exit().remove();\n    update.enter().append(\"line\").attr({class: \"grid horizontal\"});\n  },\n  render: function() {\n    var that = this;\n    this.gridGroup.attr({\n      transform: \"translate(0,\" + this.config.margin +\")\"\n    });\n\n    this.gridGroup.selectAll(\"line.grid.horizontal\").attr({\n      x1: this.config.margin + this.yAxisWidth,\n      x2: this.width - this.config.margin,\n      y1: function(it) { return that.yscale(it); },\n      y2: function(it) { return that.yscale(it); },\n      stroke: \"#bbb\",\n      \"stroke-dasharray\": \"2 4\"\n    });\n    this.yAxisGroup.attr({\n      transform: \"translate(\" + ( that.yAxisWidth + that.config.margin - that.config.fontSize ) + \",\"+this.config.margin+\")\"\n    });\n    this.svg.selectAll(\"g.data-group\").attr({\n      transform: function(d,i) {\n        return \"translate(\" + ( that.yAxisWidth + that.config.margin + that.blockWidth * i ) + \",\"+ that.config.margin + \")\";\n      }\n    }).each(function(d,i) {\n      var node = d3.select(this);\n      node.select(\"path\").attr({\n        d: that.line(d.values),\n        stroke: \"#000\",\n        fill: \"none\"\n      });\n      node.select(\"text\").attr({\n        y: that.height - that.xAxisHeight - that.config.margin + that.config.fontSize,\n        x: that.blockWidth / 2 + that.config.padding / 2,\n        \"text-anchor\": \"middle\",\n        \"dominant-baseline\": \"central\"\n      }).text([\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thr\",\"Fri\",\"Sat\"][d.key]);\n      node.select(\"line\").attr({\n        x1: that.config.padding / 2,\n        y1: that.yscale(d.mean),\n        x2: that.blockWidth - that.config.padding / 2,\n        y2: that.yscale(d.mean),\n        stroke: \"#000\",\n        opacity: 0.3,\n        \"stroke-width\": 4\n      });\n    });\n  }\n});","lines":114,"size":4582},"config":{"fontSize":{"name":"Font Size","type":[{"name":"Number","level":3}],"default":12,"value":"12"},"margin":{"name":"Margin","type":[{"name":"Number","level":3}],"default":10,"value":10},"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"value":10}},"dimension":{"value":{"type":[{"name":"Number","level":3}],"require":true,"desc":"Value ( y-axis ) "},"date":{"type":[{"name":"Date","level":2}],"require":true,"desc":"Date of value ( x-axis )"}},"assets":[],"isType":false,"createdTime":1457969428505,"modifiedTime":1458279698012,"ownerName":"Kirby Wu","likes":0,"parent":null,"basetype":"2","visualencoding":["1","2"],"category":["5"]}