{"theme":null,"data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"muha9e","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"Voronoi Treemap","desc":"Specialized treemap in which the area is divided by weighted voronoi diagram.","tags":["voronoi","treemap","area"],"doc":{"name":"document","type":"html","content":"","lines":1,"size":0},"style":{"name":"stylesheet","type":"css","content":"","lines":1,"size":0},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: [\n    {value: 100, name: \"James\", category: \"RD\"},\n    {value: 200, name: \"Kirby\", category: \"RD\"},\n    {value: 500, name: \"William\", category: \"RD\"},\n    {value: 800, name: \"Michael\", category: \"IT\"},\n    {value: 400, name: \"Nick\", category: \"IT\"},\n    {value: 400, name: \"Albert\", category: \"HR\"},\n    {value: 300, name: \"Xavier\", category: \"HR\"}, \n    {value: 100, name: \"Bob\", category: \"HR\"},    \n    {value: 200, name: \"Cindy\", category: \"LEGAL\"},    \n    {value: 500, name: \"David\", category: \"LEGAL\"},    \n    {value: 500, name: \"Eva\", category: \"IT\"},    \n    {value: 300, name: \"Frank\", category: \"FIN\"},    \n    {value: 600, name: \"Jimmy\", category: \"FIN\"},    \n    {value: 700, name: \"Kirk\", category: \"GM\"},    \n    {value: 900, name: \"Timonthy\", category: \"GM\"},    \n\n  ],\n  dimension: {\n    value: { type: [plotdb.Number], require: true, desc: \"size of the block\" },\n    name: { type: [], require: false, desc: \"name of the block\" },\n    category: { type: [], require: false, desc: \"parent of the block\"}\n  },\n  config: {\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10, rebindOnChange: true },\n    margin: { name: \"Madding\", type: [plotdb.Number], default: 10, rebindOnChange: true },\n    palette: { name: \"Palette\", type: [plotdb.Palette], default: plotdb.Palette[\"default\"]}\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.data.map(function(it) { \n      it.key = it.name;\n      it.data = it.value;\n    });\n    this.parsed = {children: d3.nest().key(function(it) { return it.category; }).entries(this.data).map(function(it) {\n      it.children = it.values;\n      return it;\n    })};\n    setInterval(function() {\n      that.tick();\n    }, 30);\n  },\n  bind: function() {\n    var that = this;\n    this.polygons = this.svg.selectAll(\"path.data\").data(this.treemap.getPolygons())\n      .enter().append(\"path\").attr({\"class\": \"data\"});\n    this.sites = this.svg.selectAll(\"g.data\").data(this.treemap.getSites())\n      .enter().append(\"g\").attr({\"class\": \"data\"}).each(function(it) {\n      var node = d3.select(this);\n      node.append(\"text\").attr({\"class\": \"name\"});\n      node.append(\"text\").attr({\"class\": \"value\"});\n    });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height - 10;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.xscale = d3.scale.linear().domain([0,width]).range([\n      this.config.margin, \n      width - this.config.margin\n    ]);\n    this.yscale = d3.scale.linear().domain([0,height]).range([\n      this.config.margin, \n      height - this.config.margin\n    ]);\n    this.colors = d3.scale.ordinal().range(this.config.palette.colors.map(function(it) { return it.hex; }));\n    this.treemap = new Voronoi.Treemap(this.parsed, Voronoi.Polygon.create(width, height, 60), width, height);\n  },\n  tick: function() {\n    this.treemap.compute();\n    this.render();\n  },\n  render: function() {\n    var that = this;\n    var sites = this.treemap.getSites();\n    var polygons = this.treemap.getPolygons();\n\n    this.polygons.data(polygons).attr({\n      d: function(it) {\n        if(!it || !it.length) return \"\"\n        ret = [\"M\", that.xscale(it[0].x), that.yscale(it[0].y)];\n        for(var idx = 0; idx < it.length; idx++) {\n          ret.push(\"L\");\n          ret.push(that.xscale(it[idx].x));\n          ret.push(that.yscale(it[idx].y));\n        }\n        ret.push(\"L\");\n        ret.push(that.xscale(it[0].x));\n        ret.push(that.yscale(it[0].y));\n        return ret.join(\" \");\n      },\n      fill: function(it,i) {\n        if(sites[i].lv == 0) return that.colors(sites[i].key);\n        else return \"none\"\n      },\n      stroke: \"#000\",\n      \"stroke-width\": function(it,i) {\n        if(sites[i].lv <= 0) return 5;\n        return 1;\n      }\n    });\n    this.sites.attr({\n      transform: function(it) {\n        return [\"translate(\", it.x, \", \", it.y, \")\"].join(\"\");\n      }\n    }).each(function(it) {\n      attr = {\n        fill: function(it) {\n          var hsl = d3.hsl(that.colors(it.category));\n          if(hsl.l > 0.65) return \"#000\";\n          return \"#fff\";\n        },\n        \"text-anchor\": \"middle\",\n        \"dominant-baseline\": \"central\"\n      };\n      d3.select(this).select(\"text.name\").attr(attr).attr(\"dy\", -10).text(function(it) {\n        if(it.lv >= 1) return it.name;\n        return \"\";\n      });\n      d3.select(this).select(\"text.value\").attr(attr).attr({\n        dy: 10,\n        \"font-size\": \"0.8em\",\n        \"font-weight\": \"200\"\n      }).text(function(it) {\n        if(it.lv >= 1) return parseInt(10*it.data)/10;\n        return \"\";\n      });\n\n    });\n  }\n});","lines":140,"size":4901},"config":{"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":true,"value":10},"margin":{"name":"Madding","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":true,"value":10},"palette":{"name":"Palette","type":[{"name":"Palette","level":5,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]}}],"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"value":{"colors":[{"hex":"#bf40b8"},{"hex":"#3a66cb"},{"hex":"#0ebeba"},{"hex":"#fee476"},{"hex":"#feae01"},{"hex":"#e62b0f"}]}}},"dimension":{"value":{"type":[{"name":"Number","level":3}],"require":true,"desc":"size of the block"},"name":{"type":[],"require":false,"desc":"name of the block"},"category":{"type":[],"require":false,"desc":"parent of the block"}},"assets":[],"isType":false,"createdTime":1456850877507,"modifiedTime":1458279727804,"likes":0,"ownerName":"Kirby Wu","parent":null,"basetype":"8","visualencoding":["6"],"category":["1","4"]}