{"theme":"1fater3","basetype":"2","data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"2gykwh","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"Slopegraph","desc":"a standard slopegraph","tags":[""],"doc":{"name":"document","type":"html","content":"<h2 style=\"text-align:center\">Slopegraph</h2>","lines":1,"size":45},"style":{"name":"stylesheet","type":"css","content":"","lines":1,"size":0},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: d3.range(70).map(function(it) {\n    return {\n      oldValue: Math.random(),\n      newValue: Math.random(),\n      name: [\"Abby\",\"Alley\",\"Betty\",\"Candy\",\"Dance\",\"Emerald\",\"Franklin\",\"Gothic\"][parseInt(Math.random()*8)]\n    };\n  }),\n  dimension: {\n    oldValue: { type: [plotdb.Number], require: true, desc: \"old value\" },\n    newValue: { type: [plotdb.Number], require: true, desc: \"new value\"},\n    name: { type: [plotdb.Number], reqire: true, desc: \"name for this value set\"}\n  },\n  config: {\n    fontSize: { name: \"Font Size\", type: [plotdb.Number], default: 12},\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10},\n    margin: { name: \"Margin\", type: [plotdb.Number], default: 10},\n    negativeColor: {name: \"Negative\", type: [plotdb.Color], default: \"#ff994\",\n                    hint: plotdb.Color.subtype.negative },\n    positiveColor: {name: \"Positive\", type: [plotdb.Color], default: \"#44ff99\",\n                    hint: plotdb.Color.subtype.positive },\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.oldValues = this.data.map(function(it) { return it.oldValue; });\n    this.newValues = this.data.map(function(it) { return it.newValue; });\n    this.names = this.data.map(function(it) { return it.name; });\n    this.maxNameLength = d3.max(this.names.map(function(it) { return (it || \"\").length; }));\n    this.oldrange = d3.extent(this.oldValues);\n    this.newrange = d3.extent(this.newValues);\n    this.minDeltaOld = -1;\n    this.minDeltaNew = -1;\n    var dOld = 0;\n    var dNew = 0;\n    this.oldValues.sort();\n    this.newValues.sort();\n    for(var i=0;i<this.data.length - 1; i++) {\n      dOld = this.oldValues[i + 1] - this.oldValues[i];\n      dNew = this.newValues[i + 1] - this.newValues[i];\n      if(dOld < this.minDeltaOld || this.minDeltaOld < 0) this.minDeltaOld = dOld;\n      if(dNew < this.minDeltaNew || this.minDeltaNew < 0) this.minDeltaNew = dNew;\n    }\n    this.minDelta = d3.min(this.minDeltaOld, this.minDeltaNew);\n    this.heightRate = this.config.fontSize / this.minDelta;\n  },\n  bind: function() {\n    var that = this;\n    this.svg.selectAll(\"g.data\").data(this.data)\n    .enter().append(\"g\").attr({class: \"data\"}).each(function(d,i) {\n      var node = d3.select(this);\n      node.append(\"text\").attr({class: \"label left\"});\n      node.append(\"text\").attr({class: \"label right\"});\n      node.append(\"line\").attr({class: \"connect\"});\n      node.append(\"circle\").attr({class: \"node left\"});\n      node.append(\"circle\").attr({class: \"node right\"});\n    });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = ( this.config.fontSize * 2 ) * (this.data.length + 1);\n    this.labelWidth = (this.maxNameLength + 4 ) * this.config.fontSize + this.config.margin;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n  },\n  yscale: function(d,i, isLeft) {\n    attr = (isLeft?\"oldValue\":\"newValue\");\n    return  (( 2 * this.config.fontSize ) * this.data.length) \n      - this[attr+\"s\"].indexOf(d[attr]) * (2 * this.config.fontSize);\n  },\n  color: function(d,i,dark) {\n    var c = (d.newValue >= d.oldValue ? this.config.positiveColor : this.config.negativeColor);\n    if(dark) {\n      c = d3.rgb(c).darker(1.4).toString();\n    }\n    return c;\n  },\n  render: function() {\n    var that = this;\n    this.svg.selectAll(\"text.label.left\").attr({\n      x: this.labelWidth,\n      y: function(d,i) { return that.yscale(d,i,true); },\n      \"text-anchor\": \"end\",\n      \"dominant-baseline\": \"central\",\n      dx: -this.config.fontSize\n    }).text(function(it) { return it.name; });\n    this.svg.selectAll(\"text.label.right\").attr({\n      x: this.width - this.labelWidth,\n      y: function(d,i) { return that.yscale(d,i,false); },\n      \"text-anchor\": \"start\",\n      \"dominant-baseline\": \"central\",\n      dx: this.config.fontSize\n    }).text(function(it) { return it.name; });\n    this.svg.selectAll(\"circle.node.left\").attr({\n      cx: this.labelWidth,\n      cy: function(d,i) { return that.yscale(d,i,true); },\n      r: this.config.fontSize / 3,\n      fill: function(d,i) { return that.color(d,i,false); },\n    });\n    this.svg.selectAll(\"circle.node.right\").attr({\n      cx: this.width - this.labelWidth,\n      cy: function(d,i) { return that.yscale(d,i,false); },\n      r: this.config.fontSize / 3,\n      fill: function(d,i) { return that.color(d,i,false); },\n    });\n    this.svg.selectAll(\"line.connect\").attr({\n      x1: this.labelWidth,\n      y1: function(d,i) { return that.yscale(d,i,true); },      \n      x2: this.width - this.labelWidth,\n      y2: function(d,i) { return that.yscale(d,i,false); },\n      stroke: function(d,i) { return that.color(d,i,false); },\n      class: function(it) {\n        return \"connect \" + (it.newValue >= it.oldValue ? \"positive\" : \"negative\");\n      },\n    });\n  }\n});","lines":123,"size":5080},"config":{"fontSize":{"name":"Font Size","type":[{"name":"Number","level":3}],"default":12,"value":20},"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"value":10},"margin":{"name":"Margin","type":[{"name":"Number","level":3}],"default":10,"value":"30"},"negativeColor":{"name":"Negative","type":[{"name":"Color","level":4,"default":"#dc4521","subtype":{"negative":"negative","positive":"positive"}}],"default":"#ff994","hint":"negative","value":"#ff6a6a"},"positiveColor":{"name":"Positive","type":[{"name":"Color","level":4,"default":"#dc4521","subtype":{"negative":"negative","positive":"positive"}}],"default":"#44ff99","hint":"positive","value":"#979797"}},"dimension":{"oldValue":{"type":[{"name":"Number","level":3}],"require":true,"desc":"old value"},"newValue":{"type":[{"name":"Number","level":3}],"require":true,"desc":"new value"},"name":{"type":[{"name":"Number","level":3}],"reqire":true,"desc":"name for this value set"}},"assets":[],"isType":false,"createdTime":1457597491557,"modifiedTime":1458543844379,"ownerName":"Kirby Wu","likes":0,"parent":null,"visualencoding":["1","4"],"category":["4","5"]}