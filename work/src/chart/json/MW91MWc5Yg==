{"theme":"1fater3","data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"1ou1g9b","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"Sankey Diagram","desc":"A standard sankey diagram","tags":[""],"doc":{"name":"document","type":"html","content":"<h2 style=\"text-align: center\"> Sankey Diagram</h2>","lines":1,"size":51},"style":{"name":"stylesheet","type":"css","content":"","lines":1,"size":0},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: [\n    {src: \"Asia\", des: \"America\", value: 10},\n    {src: \"Asia\", des: \"Europe\", value: 5},\n    {src: \"Asia\", des: \"Africa\", value: 3},\n    {src: \"Asia\", des: \"Australia\", value: 2},\n    {src: \"America\", des: \"Europe\", value: 7},\n    {src: \"America\", des: \"Africa\", value: 4},\n    {src: \"Europe\", des: \"Asia\", value: 4},\n    {src: \"Europe\", des: \"Africa\", value: 3},\n    {src: \"Europe\", des: \"America\", value: 6},\n    {src: \"Australia\", des: \"America\", value: 1}\n  ],\n  dimension: {\n    src: { type: [], require: true, desc: \"source\" },\n    des: { type: [], require: true, desc: \"destination\" },\n    value: { type: [plotdb.Number], require: true, desc: \"amount of flow\" }\n  },\n  config: {\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10, rebindOnChange: false },\n    margin: { name: \"Margin\", type: [plotdb.Number], default: 10, rebindOnChange: false },\n    width: { name: \"Bar Width\", type: [plotdb.Number], default: 10},\n    fontSize: { name: \"Font Size\", type: [plotdb.Number], default: 12},\n    palette: { \n      name: \"Palette\", type: [plotdb.Palette], default: plotdb.Palette[\"default\"],\n      hint: plotdb.Palette.subtype.qualitative\n    }\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.defs = this.svg.append(\"defs\");\n    this.srcrange = d3.map(this.data, function(it) { return it.src; }).keys();\n    this.desrange = d3.map(this.data, function(it) { return it.des; }).keys();\n    this.srcamount = {};\n    this.desamount = {};\n    this.srctotal = 0;\n    this.destotal = 0;\n    this.srcrange.sort();\n    this.desrange.sort();\n    this.srcCharCount = d3.max(this.srcrange.map(function(it) { return it.length; }));\n    this.desCharCount = d3.max(this.desrange.map(function(it) { return it.length; }));\n    for(var idx = 0; idx < this.srcrange.length; idx++) {\n      var name = this.srcrange[idx];\n      this.srcamount[name] = {size: 0, name: name, _offset: 0, des: {}}\n    }\n    for(var idx = 0; idx < this.desrange.length; idx++) {\n      var name = this.desrange[idx];\n      this.desamount[name] = {size: 0, name: name, _offset: 0};\n    }\n    this.data.forEach(function(it) {\n      that.srcamount[it.src].size += it.value;\n      that.desamount[it.des].size += it.value;\n      that.srctotal += it.value;\n      that.destotal += it.value;\n      if(!that.srcamount[it.src].des[it.des]) {\n        that.srcamount[it.src].des[it.des] = 0;\n      }\n      that.srcamount[it.src].des[it.des] += it.value;\n    });\n    var lastY = 0;\n    for(var idx = 0; idx < this.srcrange.length; idx++) {\n      var node = this.srcamount[this.srcrange[idx]];\n      node.y = lastY;\n      lastY = node.y + node.size;\n    }\n    lastY = 0;\n    for(var idx = 0; idx < this.desrange.length; idx++) {\n      var node = this.desamount[this.desrange[idx]];\n      node.y = lastY;\n      lastY = node.y + node.size;\n    }\n    this.yrange = [0, lastY];\n    this.parsed = {};\n    this.parsed.src = this.srcrange.map(function(it) { return that.srcamount[it]; });\n    this.parsed.des = this.desrange.map(function(it) { return that.desamount[it]; });\n    this.parsed.links = [];\n    this.gradients = {};\n    for(var idx = 0; idx < this.srcrange.length; idx++) {\n      var node = this.srcamount[this.srcrange[idx]];\n      var keys = d3.map(node.des).keys();\n      for(var jdx = 0; jdx < keys.length; jdx++) {\n        var src = this.srcamount[this.srcrange[idx]];\n        var des = this.desamount[keys[jdx]];\n        var size = src.des[keys[jdx]];\n        this.parsed.links.push({\n          source: src,\n          target: des,\n          size: size,\n          srcy: src._offset,\n          desy: des._offset\n        });\n        src._offset += size;\n        des._offset += size;\n        if(!this.gradients[this.srcrange[idx]]) this.gradients[this.srcrange[idx]] = {};\n        if(!this.gradients[this.srcrange[idx]][keys[jdx]]) {\n          var node = this.gradients[this.srcrange[idx]][keys[jdx]] = {};\n          node.id = this.getGID(this.srcrange[idx],keys[jdx]); \n          var g = this.defs.append(\"linearGradient\").attr({\n            x1: \"0%\", y1: \"0%\", x2: \"100%\", y2: \"0%\", id: node.id\n          });\n          node.g1 = g.append(\"stop\").attr({offset: \"0%\"});\n          node.g2 = g.append(\"stop\").attr({offset: \"100%\"});          \n        }\n      }\n    }\n  },\n  getGID: function(src, des) {\n    return encodeURIComponent(src)+\"/\"+encodeURIComponent(des); \n  },\n  bind: function() {\n    var that = this;\n    this.svg.selectAll(\"rect.src\").data(this.parsed.src)\n      .enter().append(\"rect\").attr({class: \"src\"});\n    this.svg.selectAll(\"rect.des\").data(this.parsed.des)\n      .enter().append(\"rect\").attr({class: \"des\"});  \n    this.svg.selectAll(\"text.src\").data(this.parsed.src)\n      .enter().append(\"text\").attr({class: \"src\"});\n    this.svg.selectAll(\"text.des\").data(this.parsed.des)\n      .enter().append(\"text\").attr({class: \"des\"});\n    this.svg.selectAll(\"path.connect\").data(this.parsed.links)\n      .enter().append(\"path\").attr({class: \"connect\"});\n    for(var idx = 0; idx < this.srcrange.length; idx++) {\n      var src = this.srcrange[idx];\n      var node = this.srcamount[src];\n      var keys = d3.map(node.des).keys();\n      for(var jdx = 0; jdx < keys.length; jdx++) {\n        var des = keys[jdx];\n        var hsl1 = d3.hsl(this.cscale(src));\n        var hsl2 = d3.hsl(this.cscale(des));\n        hsl1.s /= 2;\n        hsl2.s /= 2;\n        this.gradients[src][des].g1.style({\"stop-color\": hsl1.toString()});\n        this.gradients[src][des].g2.style({\"stop-color\": hsl2.toString()});\n      }\n    }\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var h2box = d3.select(this.root).select(\"svg\")[0][0].getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height - 10 - h2box.top;\n    var m = this.config.margin;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.yscale = d3.scale.linear().domain(this.yrange).range([m, height - m]);\n    this.cscale = d3.scale.ordinal().range(\n      this.config.palette.colors.map(function(it) { return it.hex; })\n    );\n    \n  },\n  render: function() {\n    var that = this;\n    var barWidth = this.config.width;\n    this.svg.selectAll(\"rect.src\").attr({\n      x: this.config.margin + (this.srcCharCount + 1) * this.config.fontSize,\n      y: function(it) { return that.yscale(it.y); },\n      width: barWidth,\n      height: function(it) { return that.yscale(it.y + it.size) - that.yscale(it.y); },\n      fill: function(it) { return that.cscale(it.name); }\n    });\n    this.svg.selectAll(\"rect.des\").attr({\n      x: this.width - barWidth - this.config.margin - (this.desCharCount + 1) * this.config.fontSize,\n      y: function(it) { return that.yscale(it.y); },\n      width: barWidth,\n      height: function(it) { return that.yscale(it.y + it.size) - that.yscale(it.y); },\n      fill: function(it) { return that.cscale(it.name); }\n    });\n    this.svg.selectAll(\"text.src\").attr({\n      x: this.config.margin + this.srcCharCount * this.config.fontSize,\n      y: function(it) { \n        return ( that.yscale(it.y + it.size) + that.yscale(it.y) ) / 2;\n      },\n      \"text-anchor\": \"end\",\n      \"dominant-baseline\": \"central\"\n    }).text(function(it) { return it.name; });\n    this.svg.selectAll(\"text.des\").attr({\n      x: this.width - this.config.margin - this.desCharCount * this.config.fontSize,\n      y: function(it) { \n        return ( that.yscale(it.y + it.size) + that.yscale(it.y) ) / 2;\n      },\n      \"text-anchor\": \"start\",\n      \"dominant-baseline\": \"central\"\n    }).text(function(it) { return it.name; });\n    this.svg.selectAll(\"path.connect\").attr({\n      d: function(it) {\n        var x1 = that.config.margin + barWidth\n               + (that.srcCharCount + 1) * that.config.fontSize;\n        var x2 = that.width - that.config.margin - barWidth\n               - (that.desCharCount + 1) * that.config.fontSize;\n        var x3 = x1 * 0.67 + x2 * 0.33;\n        var x4 = x1 * 0.33 + x2 * 0.67;\n        var y1 = that.yscale(it.source.y + it.srcy);\n        var y2 = that.yscale(it.source.y + it.srcy + it.size);\n        var y3 = that.yscale(it.target.y + it.desy);\n        var y4 = that.yscale(it.target.y + it.desy + it.size);\n\n        var ret = [\n          \"M\",x1, y2,\n          \"L\",x1, y1,\n          \"C\",x3, y1, x4, y3, x2, y3,\n          \"L\",x2, y4,\n          \"C\",x4, y4, x3, y2, x1, y2\n        ];\n        return ret.join(\" \");\n      },\n      fill: function(it) {\n        return [\"url(#\",that.getGID(it.source.name, it.target.name),\")\"].join(\"\");\n      },\n      opacity: 0.3\n    });\n  }\n});","lines":218,"size":8770},"config":{"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":false,"value":10},"margin":{"name":"Margin","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":false,"value":10},"width":{"name":"Bar Width","type":[{"name":"Number","level":3}],"default":10,"value":"40"},"fontSize":{"name":"Font Size","type":[{"name":"Number","level":3}],"default":12,"value":20},"palette":{"name":"Palette","type":[{"name":"Palette","level":5,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"qualitative":{"colors":[{"hex":"#c05ae0"},{"hex":"#cf2d0c"},{"hex":"#e9ab1e"},{"hex":"#86ffb5"},{"hex":"#64dfff"},{"hex":"#003f7d"}]},"binary":{"colors":[{"hex":"#ff8356"},{"hex":"#0076a1"}]},"sequential":{"colors":[{"hex":"#950431"},{"hex":"#be043e"},{"hex":"#ec326d"},{"hex":"#fc82a9"},{"hex":"#febed2"},{"hex":"#fee6ee"}]},"diverging":{"colors":[{"hex":"#74001a"},{"hex":"#cd2149"},{"hex":"#f23971"},{"hex":"#ff84ab"},{"hex":"#ffc3d7"},{"hex":"#f2f2dd"},{"hex":"#b8d9ed"},{"hex":"#81b1d0"},{"hex":"#3d8bb7"},{"hex":"#0071a8"},{"hex":"#003558"}]},"subtype":{"qualitative":"qualitative","binary":"binary","sequential":"sequential","diverging":"diverging"}}],"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"hint":"qualitative","value":{"colors":[{"hex":"#7d2d21"},{"hex":"#DC5356"},{"hex":"#FFE670"},{"hex":"#dae275"},{"hex":"#4CC786"},{"hex":"#307D99"}],"name":"qualitative"}}},"dimension":{"src":{"type":[],"require":true,"desc":"source"},"des":{"type":[],"require":true,"desc":"destination"},"value":{"type":[{"name":"Number","level":3}],"require":true,"desc":"amount of flow"}},"assets":[],"isType":false,"createdTime":1457368496997,"modifiedTime":1458278656495,"ownerName":"Kirby Wu","likes":0,"parent":null,"basetype":"12","visualencoding":["3","6"],"category":["1"]}