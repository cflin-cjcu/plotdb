{"theme":null,"data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"9rfq1x","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"Radial Chart","desc":"polarized length bar chart","tags":["weather","temperature"],"doc":{"name":"document","type":"html","content":"","lines":1,"size":0},"style":{"name":"stylesheet","type":"css","content":"","lines":1,"size":0},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: d3.range(100).map(function(it) {\n    return {\n      order: it, min: Math.random(), max: 1 + Math.random()\n    };\n  }),\n  dimension: {\n    order: { type: [plotdb.Number], require: true, desc: \"order of data\" },\n    min: { typ: [plotdb.Number], require: true, desc: \"max value\" },\n    max: { typ: [plotdb.Number], require: true, desc: \"min value\" }\n  },\n  config: {\n    fontSize: { name: \"fontSize\", type: [plotdb.Number], default: 12, rebindOnChange: true },\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10, rebindOnChange: true },\n    margin: { name: \"Margin\", type: [plotdb.Number], default: 10, rebindOnChange: true },\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.grids = this.svg.append(\"g\").attr({class: \"grid-group\"});\n    this.values = d3.map(\n      this.data.map(function(it) { return [it.min, it.max]; }).reduce(function(a,b) { return a.concat(b); }, []),\n      function(it) { return it; }\n    ).values();\n    this.valuerange = d3.extent(this.values);\n    this.orders = this.data.map(function(it) { return it.order; });\n    this.orderrange = d3.extent(this.orders);\n  },\n  bind: function() {\n    var that = this;\n    this.svg.selectAll(\"path.data\").data(this.data)\n      .enter().append(\"path\").attr({class: \"data\"});\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height - 10;\n    this.size = (width>height?height:width) - this.config.margin * 2 - this.config.fontSize * 4;\n    this.dangle = 0.9 * Math.PI * 2 / this.data.length;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.rscale = d3.scale.linear().domain(this.valuerange).range([0, this.size/2]);\n    this.ascale = d3.scale.linear().domain(this.orderrange).range([0, Math.PI * 2]);\n    this.gridRadiusTicks = this.rscale.ticks( ((this.size/2)/20)>5 ? 5 : parseInt(this.size/40) ).concat(this.valuerange);\n    this.gridAngleTicks = this.ascale.ticks(12);\n    var update = this.grids.selectAll(\"circle.grid.radius\").data(this.gridRadiusTicks)\n    update.enter().append(\"circle\").attr({class: \"grid radius\"});\n    update.exit().remove();\n    var update = this.grids.selectAll(\"circle.grid.angle\").data(this.gridAngleTicks)\n    update.enter().append(\"line\").attr({class: \"grid angle\"});\n    update.exit().remove();\n\n  },\n  render: function() {\n    var that = this;\n    this.svg.selectAll(\"path.data\").attr({\n      d: function(d,i) {\n        var angle = that.ascale(d.order);\n        var x1 = that.width  / 2 + that.rscale(d.min) * Math.cos(angle - that.dangle / 2); \n        var y1 = that.height / 2 + that.rscale(d.min) * Math.sin(angle - that.dangle / 2); \n        var x2 = that.width  / 2 + that.rscale(d.min) * Math.cos(angle + that.dangle / 2); \n        var y2 = that.height / 2 + that.rscale(d.min) * Math.sin(angle + that.dangle / 2);\n        var x3 = that.width  / 2 + that.rscale(d.max) * Math.cos(angle - that.dangle / 2); \n        var y3 = that.height / 2 + that.rscale(d.max) * Math.sin(angle - that.dangle / 2); \n        var x4 = that.width  / 2 + that.rscale(d.max) * Math.cos(angle + that.dangle / 2); \n        var y4 = that.height / 2 + that.rscale(d.max) * Math.sin(angle + that.dangle / 2); \n        return [\"M\", x1, y1, \n         \"L\", x2, y2, \n         \"L\", x4, y4,\n         \"L\", x3, y3,\"Z\"].join(\" \");\n      },\n      fill: \"#999\",\n      opacity: 0.8\n    });\n    this.grids.selectAll(\"circle.grid.radius\").attr({\n      cx: this.width / 2,\n      cy: this.height / 2,\n      r: function(it) {\n        return that.rscale(it);\n      },\n      fill: \"none\",\n      stroke: \"#222\",\n      \"stroke-dasharray\": \"2 4\"\n    });\n    this.grids.selectAll(\"line.grid.angle\").attr({\n      x1: function(it) { return that.width  / 2 + that.rscale(that.valuerange[0]) * Math.cos(that.ascale(it)) },\n      y1: function(it) { return that.height / 2 + that.rscale(that.valuerange[0]) * Math.sin(that.ascale(it)) },\n      x2: function(it) { return that.width  / 2 + that.rscale(that.valuerange[1]) * Math.cos(that.ascale(it)) },\n      y2: function(it) { return that.height / 2 + that.rscale(that.valuerange[1]) * Math.sin(that.ascale(it)) },\n      fill: \"none\",\n      stroke: \"#222\",\n      \"stroke-dasharray\": \"2 4\"\n    });\n  }\n});","lines":100,"size":4481},"config":{"fontSize":{"name":"fontSize","type":[{"name":"Number","level":3}],"default":12,"rebindOnChange":true,"value":10},"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":true,"value":10},"margin":{"name":"Margin","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":true,"value":10}},"dimension":{"order":{"type":[{"name":"Number","level":3}],"require":true,"desc":"order of data"},"min":{"typ":[{"name":"Number","level":3}],"require":true,"desc":"max value"},"max":{"typ":[{"name":"Number","level":3}],"require":true,"desc":"min value"}},"assets":[],"isType":false,"createdTime":1457804419142,"modifiedTime":1458279477841,"ownerName":"Kirby Wu","likes":0,"parent":null,"basetype":"6","visualencoding":["3","4"],"category":["5"]}