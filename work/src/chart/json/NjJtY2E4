{"theme":"kimbqd","config":{"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":true,"value":10},"marginV":{"name":"V. Margin","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":false,"value":"20"},"marginH":{"name":"H. Margin","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":false,"value":"50"},"palette":{"name":"Palette","type":[{"name":"Palette","level":5,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"qualitative":{"colors":[]},"binary":{"colors":[]},"sequential":{"colors":[]},"diverging":{"colors":[]},"subtype":{"qualitative":"qualitative","binary":"binary","sequential":"sequential","diverging":"diverging"}}],"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"hint":"qualitative","value":{"colors":[{"hex":"#b43743"},{"hex":"#e68061"},{"hex":"#f9cb48"},{"hex":"#3c6a9c"},{"hex":"#0c2a54"},{"hex":"#405067"},{"hex":"#5a5e84"}],"name":"qualitative"}},"title":{"name":"Chart Title","type":[{"name":"String","level":1}],"default":"Stacked Bar Chart","value":"Dancing Stacked Bars"}},"dimension":{"value":{"type":[{"name":"Number","level":3}],"multiple":true,"require":true,"desc":"y axis value","fields":[{"name":"death number by wound","type":"Number","dataset":{"type":{"location":"sample","name":"dataset"},"key":"/dataset/sample/:crimeawar","name":"Deaths in Crimea War, 1854"},"data":[0,0,0,0,1,81,132,287,114,83,42,32,48,49,209,134,164,276,53,33,18,2,0,0]},{"name":"death number by zymotic","type":"Number","dataset":{"type":{"location":"sample","name":"dataset"},"key":"/dataset/sample/:crimeawar","name":"Deaths in Crimea War, 1854"},"data":[1,12,11,359,828,788,503,844,1725,2761,2120,1205,477,508,802,382,483,189,128,178,91,42,24,15]},{"name":"death number by other","type":"Number","dataset":{"type":{"location":"sample","name":"dataset"},"key":"/dataset/sample/:crimeawar","name":"Deaths in Crimea War, 1854"},"data":[5,9,6,23,30,70,128,106,131,324,361,172,57,37,31,33,25,20,18,32,28,48,19,35]}],"fieldName":["death number by wound","death number by zymotic","death number by other"]},"order":{"type":[],"require":true,"desc":"x axis index","fields":[{"name":"month","type":"Date","dataset":{"type":{"location":"sample","name":"dataset"},"key":"/dataset/sample/:crimeawar","name":"Deaths in Crimea War, 1854"},"data":["01/04/1854","01/05/1854","01/06/1854","01/07/1854","01/08/1854","01/09/1854","01/10/1854","01/11/1854","01/12/1854","01/01/1855","01/02/1855","01/03/1855","01/04/1855","01/05/1855","01/06/1855","01/07/1855","01/08/1855","01/09/1855","01/10/1855","01/11/1855","01/12/1855","01/01/1856","01/02/1856","01/03/1856"]}],"fieldName":"month"}},"data":[{"value":[0,1,5],"order":"01/04/1854"},{"value":[0,12,9],"order":"01/05/1854"},{"value":[0,11,6],"order":"01/06/1854"},{"value":[0,359,23],"order":"01/07/1854"},{"value":[1,828,30],"order":"01/08/1854"},{"value":[81,788,70],"order":"01/09/1854"},{"value":[132,503,128],"order":"01/10/1854"},{"value":[287,844,106],"order":"01/11/1854"},{"value":[114,1725,131],"order":"01/12/1854"},{"value":[83,2761,324],"order":"01/01/1855"},{"value":[42,2120,361],"order":"01/02/1855"},{"value":[32,1205,172],"order":"01/03/1855"},{"value":[48,477,57],"order":"01/04/1855"},{"value":[49,508,37],"order":"01/05/1855"},{"value":[209,802,31],"order":"01/06/1855"},{"value":[134,382,33],"order":"01/07/1855"},{"value":[164,483,25],"order":"01/08/1855"},{"value":[276,189,20],"order":"01/09/1855"},{"value":[53,128,18],"order":"01/10/1855"},{"value":[33,178,32],"order":"01/11/1855"},{"value":[18,91,28],"order":"01/12/1855"},{"value":[2,42,48],"order":"01/01/1856"},{"value":[0,24,19],"order":"01/02/1856"},{"value":[0,15,35],"order":"01/03/1856"}],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"62mca8","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"Dancing Stacked Bar","desc":"stacked bar chart variation that vertically aligned to selected bar block.","tags":[""],"doc":{"name":"document","type":"html","content":"<h1 id=\"chart-title\" style=\"text-align:center;font-weight:light\">Line Chart</h1>\n<div id=\"popup\" class=\"popup box\">\n  <div class=\"shape\"></div>\n  <div class=\"title\"></div>\n  <div class=\"desc\"></div>\n</div>\n<svg></svg>\n<div id=\"legend\" class=\"legend\">","lines":8,"size":250},"style":{"name":"stylesheet","type":"css","content":"svg, body, text {\n  font-family: arial;\n  color: #222;\n  fill: #222;\n  font-size: 12px;\n}\ntext {\n  text-anchor: middle;\n  dominant-baseline: central;\n}\ncircle, rect, path {\n  fill: #eee;\n  stroke: #555;\n  stroke-width: 2;\n}\nh3 {\n  text-align: center;\n  font-family: Arial;\n}\n\n.axis.horizontal {\n}\n.axis .tick {\n  display: none;\n}\n.axis .tick:nth-of-type(3n+1) {\n  display: block;\n}\n.axis .tick line {\n  stroke: #222;\n  stroke-width: 2\n}\n.axis.horizontal .tick text {\n}\n\n.axis .domain {\n  fill: none;\n}\n\n.axis.horizontal .label {\n}\n\n.popup {\n  position: absolute;\n  background: rgba(0,0,0,1.0);\n  color: #fff;\n  padding: 5px 10px;\n  border-radius: 5px;\n  display: none;\n}\n.popup .title, .popup .desc {\n  margin-left: 23px;\n}\n.popup .shape {\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  background: #fff;\n  position: absolute;\n  left: 10px;\n  top: 5px;\n}\n.popup:after {\n  content: \" \";\n  display: block;\n  width: 10px;\n  height: 10px;\n  background: #ff0;\n  position: absolute;\n  transform: rotate(45deg);\n  background: rgba(0,0,0,1.0);\n  top: 50%;\n  margin-top: -5px;\n}\n.popup.left:after {\n  right: -5px;\n}\n.popup.right:after {\n  left: -5px;\n}\n.legend {\n  text-align: center;\n}\n.legend .entry{\n  display: inline-block;\n  padding: 5px 15px 5px 5px;\n  margin-right: 5px;\n  cursor: pointer;\n\n}\n.legend .entry:hover {\n  background: rgba(255,255,255,0.5);\n  transform: scale(1.2);\n}\n.legend .entry .mark {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  vertical-align: middle;\n  margin-right: 5px;\n}\n.legend .entry .name {\n  display: inline-block;\n  vertical-align: middle;\n}\n","lines":107,"size":1612},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: [\n    {order: \"1st\", value: [1,2,5,8]},\n    {order: \"2nd\", value: [5,4,2,3]},\n    {order: \"3rd\", value: [4,3,1,3]},\n    {order: \"4th\", value: [5,3,4,2]},\n    {order: \"5th\", value: [8,4,7,5]}\n  ],\n  dimension: {\n    value: { type: [plotdb.Number], multiple: true, require: true, desc: \"y axis value\" },\n    order: { type: [], require: true, desc: \"x axis index\" },\n  },\n  config: {\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10, rebindOnChange: true },\n    marginV: { name: \"V. Margin\", type: [plotdb.Number], default: 10, rebindOnChange: false},\n    marginH: { name: \"H. Margin\", type: [plotdb.Number], default: 10, rebindOnChange: false},\n    palette: { name: \"Palette\", type: [plotdb.Palette], default: plotdb.Palette.default,\n      hint: plotdb.Palette.subtype.qualitative\n    },\n    title: { name: \"Chart Title\", type: [plotdb.String], default: \"Stacked Bar Chart\"}\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).select(\"svg\");\n    this.data.sort(function(a,b) { return b - a; });\n    this.maxsum = 0;\n    this.globalBase = 0;\n    var p = this.parsed = {\n      bars: [],\n      order: [],\n      group: [],\n      values: []\n    };\n    var list = null;\n    if(this.data.length) {\n      isOrderDate = (plotdb.Date.test(this.data[0].order));\n      p.order = this.data.map(function(it) { return {\n        idx: 0,\n        value: it.order,\n        parsed: (isOrderDate?new Date(it.order).getTime()/1000:it.oredr)\n      };});\n      p.order.sort(function(a,b){\n        if(a.parsed > b.parsed) { return 1; }\n        else if (a.parsed < b.parsed) { return -1; }\n        return 0;\n      });\n      p.order.forEach(function(d,i) { d.idx = i; });\n      for(var j=0;j < this.data[0].value.length; j++) {\n        p.group.push({\n          name: (this.dimension.value && this.dimension.value.fieldName\n                 ?(this.dimension.value.fieldName[j] || j):j),\n          idx: j\n        }); /* name: should fetch from field meta */\n        p.values = this.data.map(function(it) { return it.value; }).reduce(function(a,b) { return a.concat(b); }, []);\n        //p.values = p.values.concat(dots.data.map(function(it) { return it.value;}));\n      }\n      var maxsum = 0;\n      for(var j=0; j < this.data.length; j++) {\n        /* order of \"order\" might be re-arranged so we have to lookup again */        \n        var orderIdx = (p.order.filter(function(it) { return it.value == that.data[j].order; })[0] || {idx: -1}).idx;\n        p.bars.push(bars = {order: orderIdx, data: []});\n        bars.data = this.data[j].value.map(function(d,i) {\n          return {\n            name: (that.dimension.value && that.dimension.value.fieldName\n                   ?(that.dimension.value.fieldName[i] || i):i),\n            order: orderIdx,\n            value: d,\n            base: 0,\n            group: i\n          };\n        });\n        bars.data.sort(function(a,b) { return b.order - a.order;});\n        var sum = 0;\n        for(var i=0;i<bars.data.length;i++) {\n          bars.data[i].sum = sum;\n          sum += bars.data[i].value;\n        }\n        if(sum > maxsum) maxsum = sum;\n      }\n      this.maxsum = maxsum;\n    }\n    this.xaxisGroup = this.svg.append(\"g\").attr({class: \"axis horizontal\"});\n    this.xaxisGroupOuter = this.svg.append(\"g\").attr({class: \"axis horizontal\"});\n    this.xaxisGroupOuter.append(\"line\").attr({class: \"axis horizontal domain\"});\n    this.yaxisGroup = this.svg.append(\"g\").attr({class: \"axis vertical\"});\n    this.xaxis = d3.svg.axis().tickValues(this.parsed.order.map(function(it) { return it.idx;}))\n      .orient(\"bottom\").tickSize(6,6).tickPadding(3)\n      .tickFormat(function(it) {\n        return that.parsed.order[it].value;\n      });\n    this.yaxis = d3.svg.axis()\n      .orient(\"bottom\").tickSize(6,6).tickPadding(3);\n    this.popup = {};\n    this.popup.root = d3.select(document.getElementById(\"popup\"));\n    \n    this.popup.title = d3.select(this.popup.root[0][0].querySelector(\".title\"));\n    this.popup.desc = d3.select(this.popup.root[0][0].querySelector(\".desc\"));\n    this.popup.shape = d3.select(this.popup.root[0][0].querySelector(\".shape\"));\n\n    this.legend = d3.select(this.root.querySelector(\".legend\"));\n    this.svg.on(\"mousemove\", function() {\n      if(that.target) { that.target.active = false; }\n      target = d3.select(d3.event.target).datum();\n      if(target) target.active = true;\n      that.target = target;\n      that.render();\n    });\n  },\n  bind: function() {\n    var that = this;\n    this.rectgroup = this.svg.selectAll(\"g.series.bar\").data(this.parsed.bars)\n      .enter().append(\"g\").attr({class: \"series bar\"}).each(function(it) {\n      d3.select(this).selectAll(\"rect.node\").data(it.data)\n        .enter().append(\"rect\").attr({class: \"node\"}).on(\"click\", function(it) {\n          b = that.parsed.bars;\n          that.globalBase = 0;\n          for(var i = 0; i < b.length; i++) {\n            base = 0;\n            for(var j = 0; j < b[i].data.length; j++) {\n              if(b[i].data[j].group == it.group) {\n                base = b[i].data[j].sum;\n                if(base > that.globalBase) that.globalBase = base;\n              }\n            }\n            for(var j = 0; j < b[i].data.length; j++) {\n              b[i].data[j].base = base;\n            }\n          }\n          that.render();\n      });\n    });\n    this.rects = d3.select(this.root).selectAll(\"rect.node\");\n    this.legend.selectAll(\"div.entry\").data(this.parsed.group)\n      .enter().append(\"div\").attr({class: \"entry\"})\n      .each(function(it) {\n        var node = d3.select(this);\n        node.append(\"div\").attr({class: \"mark\"});\n        node.append(\"div\").attr({class: \"name\"}).text(it.name);\n        node.on(\"mouseover\", function(it) { \n          that.activeGroup = it; that.render(); });\n        node.on(\"mouseout\", function(it) { that.activeGroup = null; that.render(); });\n      });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height - 80 - 40;\n    var mv = this.config.marginV;\n    var mh = this.config.marginH;\n    var xAxisHeight = this.xAxisHeight = 20;\n    var yAxisWidth = this.yAxisWidth = 20;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.barWidth = ( width - mh - mh - yAxisWidth ) / this.parsed.order.length;\n    this.xscale = d3.scale.linear()\n      .domain(d3.extent(this.parsed.order.map(function(it) { return it.idx; })))\n      .range([mh + yAxisWidth,width - mh - this.barWidth]);\n    this.yscale = d3.scale.linear()\n      .domain([0, this.maxsum])\n      .range([height - mv - xAxisHeight, mv]);\n    this.colors = d3.scale.ordinal().range(this.config.palette.colors.map(function(it) { return it.hex; }));\n    this.xaxis.scale(this.xscale);\n    this.xaxisGroup.call(this.xaxis);\n    this.yaxis.scale(this.yscale).orient(\"left\");\n    this.yaxisGroup.call(this.yaxis);\n  },\n  render: function() {\n    var that = this;\n    var range = this.xscale.range();\n    this.rects.attr({\n      x: function(it) { return that.xscale(it.order); },\n      width: function(it) { return that.barWidth; },\n      height: function(it) { return that.yscale(it.sum) - that.yscale(it.sum + it.value) },\n      \"stroke-width\": \"2\"\n    }).transition().duration(200).attr({\n      y: function(it) { return that.yscale(it.sum + it.value - it.base * 1 + 1 * that.globalBase) - 2; },\n\n    });\n    this.rects.filter(function(it) { return it.active; }).style({\n      opacity: 0.5\n    });\n    this.rects.filter(function(it) { return !it.active; }).style({\n      fill: function(it) { return that.colors(it.group); },\n      stroke: \"#ffffff\",\n      opacity: 1\n    });\n    if(that.activeGroup) {\n      this.rects.transition().duration(500).style({\n        opacity: function(it) { \n          return (that.activeGroup? (that.activeGroup.idx == it.group ? 1 : 0.2):1);\n        }\n      });\n    }\n    this.xaxisGroup.attr({\n      \"transform\": \"translate(\"+(this.barWidth/2)+\",\" + (this.yscale.range()[0]) + \")\"\n    });\n    this.xaxisGroupOuter.attr({\n      \"transform\": \"translate(0,\" + (this.yscale.range()[0]) + \")\"\n    });\n    this.xaxisGroupOuter.select(\"line.axis.domain\").attr({\n      x1: this.config.marginV + this.yAxisWidth,\n      x2: this.width - this.config.marginV,\n      stroke: \"#000\"\n    });\n    this.yaxisGroup.attr({\n      \"transform\": \"translate(\" + (this.xscale.range()[0] - 20) +\",0)\"\n    });\n    this.yaxisGroup.selectAll(\"text\").each(function(it){ \n      d3.select(this).text(Math.abs(it - that.globalBase));\n    });\n    if(this.target) {\n      this.popup.root.style({display: \"block\"});\n      this.popup.title.text(this.target.name);\n      if(this.parsed.order[this.target.order]) {\n        this.popup.desc.text(\n          this.parsed.order[this.target.order].value + \": \" + this.target.value\n        );\n      }\n      this.popup.shape.style({\n        background: this.colors(this.target.group)\n      });\n      setTimeout(function() {\n        if(!that.target) return;\n        var x = that.xscale(that.target.order) + that.barWidth / 2;\n        var y = that.yscale(that.target.sum + that.target.value / 2);\n        var direction = \"left\";\n\t    var bbox = that.popup.root[0][0].getBoundingClientRect();\n        var svgbox = that.svg[0][0].getBoundingClientRect();\n        if( x < that.width/2 ) {\n          x = x + 20;\n          direction = \"right\";\n        } else {\n          x = x - 20 - (bbox.right - bbox.left);\n        }\n        that.popup.root.attr({\n          class: \"popup \" + direction\n        });\n        that.popup.root.style({\n          left: (x + svgbox.left) + \"px\",\n          top: (y + svgbox.top - (bbox.bottom - bbox.top)/2) + \"px\"\n        });\n      }, 0);\n    }\n    this.legend.selectAll(\".entry .mark\").style({\n      background: function(it) { return that.colors(it.idx); }\n    });\n    d3.select(\"#chart-title\").text(this.config.title);\n  }\n});","lines":254,"size":10052},"assets":[],"isType":false,"createdTime":1455690177489,"modifiedTime":1458279428441,"ownerName":"Kirby Wu","likes":0,"parent":null,"basetype":"1","visualencoding":["1","3","6"],"category":["5"]}