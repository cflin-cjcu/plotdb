{"theme":"1fater3","data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"1rvktdt","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"Gap Between Two","desc":"given two variable, focus on showing the gap between them","tags":[""],"doc":{"name":"document","type":"html","content":"","lines":1,"size":0},"style":{"name":"stylesheet","type":"css","content":".axis .domain, .axis .tick line {\n  fill: none;\n  stroke: #000;\n}","lines":4,"size":65},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: d3.range(30).map(function(it) {\n    return {\n      value1: Math.random(),\n      value2: Math.random(),\n      name: [\"Performance\",\"Salary\",\"Age\",\"Weight\",\"Score\",\"Rank\",\"IQ\"][it % 7]\n    };\n  }),\n  dimension: {\n    value1: { type: [plotdb.Number], require: true, desc: \"value 1\" },\n    value2: { type: [plotdb.Number], require: true, desc: \"value 2\" },\n    name: { type: [], require: true, desc: \"value name\"}\n  },\n  config: {\n    fontSize: { name: \"Font Size\", type: [plotdb.Number], default: 12 },\n    margin: { name: \"Margin\", type: [plotdb.Number], default: 10 },\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10 },\n    value1: { name: \"Value 1\", type: [plotdb.Color], default: \"#940\",\n            hint: plotdb.Color.subtype.positive},\n    value2: { name: \"Value 2\", type: [plotdb.Color], default: \"#049\",\n            hint: plotdb.Color.subtype.negative}\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.xAxisGroup = this.svg.append(\"g\").attr({class: \"axis horizontal\"});\n    this.gridGroup = this.svg.append(\"g\").attr({class: \"grid-group\"});\n    this.values = this.data.map(function(it) { return [it.value1, it.value2]; }).reduce(function(a,b) { return a.concat(b); }, []);\n    this.valuerange = d3.extent(this.values);\n    this.nameMaxLen = d3.max(this.data.map(function(it) { return (it.name || \"\").length; }));\n  },\n  bind: function() {\n    var that = this;\n    this.svg.selectAll(\"g.data-group\").data(this.data)\n    .enter().append(\"g\").attr({class: \"data-group\"})\n    .each(function(d,i) {\n      var node = d3.select(this);\n      node.append(\"text\").attr({class: \"label\"});\n      node.append(\"line\").attr({class: \"connect\"});\n      node.append(\"circle\").attr({class: \"data value1\"});\n      node.append(\"circle\").attr({class: \"data value2\"});\n    });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    this.xAxisHeight = this.config.fontSize * 3;\n    var height = this.config.fontSize * 1.5 * this.data.length + this.xAxisHeight;\n    height = (box.height - 10 > height ? box.height - 10: height );\n    this.yAxisWidth = ( this.nameMaxLen + 2 ) * this.config.fontSize;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.xscale = d3.scale.linear().domain(this.valuerange).range([\n      this.yAxisWidth + this.config.margin, width - this.config.margin\n    ]);\n    this.ticks = this.xscale.ticks(10);\n    this.xaxis = d3.svg.axis().orient(\"top\").scale(this.xscale).tickValues(this.ticks);\n    this.xAxisGroup.call(this.xaxis);\n    var update = this.gridGroup.selectAll(\"line.grid.vertical\").data(this.ticks);\n    update.exit().remove();\n    update.enter().append(\"line\").attr({class: \"grid vertical\"});\n  },\n  render: function() {\n    var that = this;\n    this.svg.selectAll(\"line.grid.vertical\").attr({\n      y1: this.xAxisHeight + this.config.margin,\n      y2: that.config.fontSize * 2.5 * that.data.length + that.xAxisHeight + that.config.margin,\n      x1: function(it) { return that.xscale(it); },\n      x2: function(it) { return that.xscale(it); },\n      stroke: \"#999\",\n      \"stroke-dasharray\": \"2 4\"\n    });\n    this.xAxisGroup.attr({\n      transform: \"translate(0,\"+ ( this.xAxisHeight + this.config.margin) + \")\"\n    });\n    this.svg.selectAll(\"g.data-group\").attr({\n      transform: function(d,i) {\n        return [\n          \"translate(\",\n          0,\n          \",\",\n          i * that.config.fontSize * 2.5 + that.xAxisHeight + that.config.margin,\n          \")\"\n        ].join(\"\");\n      }\n    }).each(function(d,i) {\n      var node = d3.select(this);\n      node.select(\"text\")\n      .attr({\n        x: that.yAxisWidth,\n        y: that.config.fontSize,\n        \"text-anchor\": \"end\",\n        \"dominant-baseline\": \"central\",\n        \"font-size\": that.config.fontSize\n      }).text(function(it) { return it.name; });\n      node.select(\"circle.value1\").attr({\n        cx: function(it) { return that.xscale(it.value1); },\n        cy: function(it) { return that.config.fontSize; },\n        r: that.config.fontSize * 0.5,\n        fill: that.config.value1\n      });\n      node.select(\"circle.value2\").attr({\n        cx: function(it) { return that.xscale(it.value2); },\n        cy: function(it) { return that.config.fontSize; },\n        r: that.config.fontSize * 0.5,\n        fill: that.config.value2\n      });\n      node.select(\"line\").attr({\n        x1: function(it) { return that.xscale(it.value1); },\n        x2: function(it) { return that.xscale(it.value2); },\n        y1: that.config.fontSize, y2: that.config.fontSize,\n        stroke: function(it) {\n          return (it.value1 > it.value2 ? that.config.value1 : that.config.value2 )\n        }\n      });\n    });\n  }\n});","lines":123,"size":4937},"config":{"fontSize":{"name":"Font Size","type":[{"name":"Number","level":3}],"default":12,"value":"10"},"margin":{"name":"Margin","type":[{"name":"Number","level":3}],"default":10,"value":10},"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"value":10},"value1":{"name":"Value 1","type":[{"name":"Color","level":4,"default":"#dc4521","subtype":{"negative":"negative","positive":"positive"}}],"default":"#940","hint":"positive","value":"#b2b09a"},"value2":{"name":"Value 2","type":[{"name":"Color","level":4,"default":"#dc4521","subtype":{"negative":"negative","positive":"positive"}}],"default":"#049","hint":"negative","value":"#7d2d21"}},"dimension":{"value1":{"type":[{"name":"Number","level":3}],"require":true,"desc":"value 1"},"value2":{"type":[{"name":"Number","level":3}],"require":true,"desc":"value 2"},"name":{"type":[],"require":true,"desc":"value name"}},"assets":[],"isType":false,"createdTime":1457944009908,"modifiedTime":1458577399715,"ownerName":"Kirby Wu","likes":0,"parent":null,"basetype":"1","visualencoding":["1","3","9"],"category":["4","5"]}