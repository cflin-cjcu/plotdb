{"theme":null,"data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"kiy65j","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"Treemap","desc":"a two-level treemap","tags":[""],"doc":{"name":"document","type":"html","content":"<h3>D3.js Pack Layout Example</h3>\n<div id=\"popup\" class=\"popup box\">\n  <div class=\"title\"></div>\n  <div class=\"desc\"></div>\n</div>\n<svg></svg>\n<div id=\"legend\" class=\"legend\"></div>","lines":7,"size":182},"style":{"name":"stylesheet","type":"css","content":"h3 {\n  text-align: center;\n  font-family: Arial;\n}\n.popup {\n  position: absolute;\n  background: rgba(0,0,0,1.0);\n  color: #fff;\n  padding: 5px 10px;\n  border-radius: 5px;\n  display: none;\n}\n.popup .title, .popup .desc {\n  margin-left: 5px;\n}\n.popup .shape {\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  background: #fff;\n  position: absolute;\n  left: 10px;\n  top: 7px;\n}\n.popup:after {\n  content: \" \";\n  display: block;\n  width: 10px;\n  height: 10px;\n  background: #ff0;\n  position: absolute;\n  transform: rotate(45deg);\n  background: rgba(0,0,0,1.0);\n  top: 50%;\n  margin-top: -5px;\n}\n.popup.left:after {\n  right: -5px;\n}\n.popup.right:after {\n  left: -5px;\n}\n\n.legend {\n  text-align: center;\n}\n.legend .entry{\n  display: inline-block;\n  padding: 5px 15px 5px 5px;\n  margin-right: 5px;\n  cursor: pointer;\n\n}\n.legend .entry:hover {\n  background: rgba(255,255,255,0.5);\n  transform: scale(1.2);\n}\n.legend .entry .mark {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  vertical-align: middle;\n  margin-right: 5px;\n}\n.legend .entry .name {\n  display: inline-block;\n  vertical-align: middle;\n}","lines":69,"size":1130},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: [\n    {value: 3, name: \"Allen\", category: \"IT\"},\n    {value: 1, name: \"Bob\", category: \"RD\"},\n    {value: 4, name: \"Cindy\", category: \"IT\"},\n    {value: 1, name: \"David\", category: \"RD\"},\n    {value: 5, name: \"Eva\", category: \"FIN\"},\n    {value: 9, name: \"Frank\", category: \"FIN\"},\n    {value: 2, name: \"Gill\", category: \"GM\"},\n    {value: 6, name: \"Hilbert\", category: \"GM\"},\n    {value: 7, name: \"James\", category: \"IT\"}\n  ],\n  dimension: {\n    value: { type: [plotdb.Number], require: true, desc: \"size of block\" },\n    category: { type: [], require: true, desc: \"category of block\" },\n    name: { type: [], require: false, desc: \"name of block\" }\n  },\n  config: {\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10, rebindOnChange: true },\n    palette: { name: \"Palette\", type: [plotdb.Palette], default: plotdb.Palette.default,\n             hint: plotdb.Palette.subtype.qualitative}\n  },\n  init: function() {\n    this.svg = d3.select(this.root).select(\"svg\");\n    this.categories = d3.map(this.data, function(it) { return it.category; }).keys();\n    this.parsed = {values: d3.nest().key(function(it) { return it.category; }).entries(this.data)};\n    \n    this.popup = {};\n    this.popup.root = d3.select(document.getElementById(\"popup\"));\n        this.popup.title = d3.select(this.popup.root[0][0].querySelector(\".title\"));\n    this.popup.desc = d3.select(this.popup.root[0][0].querySelector(\".desc\"));\n    this.legend = d3.select(this.root.querySelector(\".legend\"));\n  },\n  bind: function() {\n    var that = this;\n    this.rects = this.svg.selectAll(\"rect.nodes\")\n      .data(this.nodes.filter(function(it) {\n        return it.name;\n      })).enter().append(\"rect\").attr({class: \"nodes\"})\n      .on(\"mouseover\",function(it) { that.target = it; that.render(); })\n      .on(\"mouseout\",function(it) { that.target = null; that.render(); });\n    this.texts = this.svg.selectAll(\"text\")\n      .data(this.nodes.filter(function(it) {\n        return it.name;\n      })).enter().append(\"text\").text(function(it) { return it.name; })\n      .on(\"mouseover\",function(it) { that.target = it; that.render(); })\n      .on(\"mouseout\",function(it) { that.target = null; that.render(); });\n    this.legend.selectAll(\"div.entry\").data(this.categories)\n      .enter().append(\"div\").attr({class: \"entry\"})\n      .each(function(it) {\n        var node = d3.select(this);\n        node.append(\"div\").attr({class: \"mark\"});\n        node.append(\"div\").attr({class: \"name\"}).text(it);\n        node.on(\"mouseover\", function(it) { that.active = it; that.render(); });\n        node.on(\"mouseout\", function(it) { that.active = null; that.render(); });\n      });\n  },\n  resize: function() {\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height - 100;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.colors = d3.scale.ordinal()\n      .range(this.config.palette.colors.map(function(it) { return it.hex; }));\n    this.treemap = d3.layout.treemap()\n      .size([width, height])\n      .padding(this.config.padding)\n      .children(function(it) { return it.values; })\n    this.nodes = this.treemap.nodes(this.parsed);\n  },\n  render: function() {\n    var that = this;\n    this.rects.attr({\n      x: function(it) { return it.x; },\n      y: function(it) { return it.y; },\n      width: function(it) { return it.dx; },\n      height: function(it) { return it.dy; }\n    }).style({\n      fill: function(it) { return that.colors(it.category || it.name); },\n      stroke: \"#fff\"\n    }).transition().duration(500).style({\n      opacity: function(it) {\n        if(!that.active || that.active == it.category) return 1;\n        return 0.2;\n      }\n    });\n    this.texts.attr({\n      x: function(it) { return it.x + it.dx / 2; },\n      y: function(it) { return it.y + it.dy / 2; },\n    }).style({\n      \"text-anchor\": \"middle\",\n      \"dominant-baseline\": \"central\",\n      \"font-size\": \"15\",\n      fill: function(it) {\n        var hsl = d3.hsl(that.colors(it.category || it.name));\n        if(hsl.l > 0.65) return \"#000\"; else return \"#fff\";\n      },\n    }).transition().duration(500).style({\n      opacity: function(it) {\n        if(!that.active || that.active == it.category) return 1;\n        return 0.2;\n      }\n    });\n    this.legend.selectAll(\".entry .mark\").style({\n      background: function(it) { return that.colors(it); }\n    });\n    if(this.target) {\n      this.popup.root.style({display: \"block\"});\n      this.popup.title.text(that.target.name);\n      this.popup.desc.text([that.target.value, \" ( \", that.target.category,\" )\"].join(\"\"));\n      setTimeout(function() {\n        if(!that.target) return;\n        var x = that.target.x + that.target.dx / 2;\n        var y = that.target.y + that.target.dy / 2;\n        var direction = \"left\";\n\t    var bbox = that.popup.root[0][0].getBoundingClientRect();\n        var svgbox = that.svg[0][0].getBoundingClientRect();\n        if( x < that.width/2 ) {\n          x = x + 20;\n          direction = \"right\";\n        } else {\n          x = x - 20 - (bbox.right - bbox.left);\n        }\n        that.popup.root.attr({\n          class: \"popup \" + direction\n        });\n        that.popup.root.style({\n          left: (x + svgbox.left) + \"px\",\n          top: (y + svgbox.top - (bbox.bottom - bbox.top)/2) + \"px\"\n        });\n      }, 0);\n    }\n  }\n});","lines":139,"size":5529},"config":{"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":true,"value":"0"},"palette":{"name":"Palette","type":[{"name":"Palette","level":5,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"qualitative":{"colors":[{"hex":"#c05ae0"},{"hex":"#cf2d0c"},{"hex":"#e9ab1e"},{"hex":"#86ffb5"},{"hex":"#64dfff"},{"hex":"#003f7d"}]},"binary":{"colors":[{"hex":"#ff8356"},{"hex":"#0076a1"}]},"sequential":{"colors":[{"hex":"#950431"},{"hex":"#be043e"},{"hex":"#ec326d"},{"hex":"#fc82a9"},{"hex":"#febed2"},{"hex":"#fee6ee"}]},"diverging":{"colors":[{"hex":"#74001a"},{"hex":"#cd2149"},{"hex":"#f23971"},{"hex":"#ff84ab"},{"hex":"#ffc3d7"},{"hex":"#f2f2dd"},{"hex":"#b8d9ed"},{"hex":"#81b1d0"},{"hex":"#3d8bb7"},{"hex":"#0071a8"},{"hex":"#003558"}]},"subtype":{"qualitative":"qualitative","binary":"binary","sequential":"sequential","diverging":"diverging"}}],"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"hint":"qualitative","value":{"colors":[{"hex":"#7a322a"},{"hex":"#d52c2a"},{"hex":"#f93634"},{"hex":"#dddb83"},{"hex":"#ede6de"},{"hex":"#fdfffa"},{"hex":"#dbdbdb"},{"hex":"#48462d"}]}},"radius":{"_bytheme":true,"type":[{"name":"Number","level":3}],"default":10},"margin":{"_bytheme":true,"type":[{"name":"Number","level":3}],"default":10},"axisInnerTickSize":{"_bytheme":true,"type":[{"name":"Number","level":3}],"default":1},"axisOuterTickSize":{"_bytheme":true,"type":[{"name":"Number","level":3}],"default":1}},"dimension":{"value":{"type":[{"name":"Number","level":3}],"require":true,"desc":"size of block"},"category":{"type":[],"require":true,"desc":"category of block"},"name":{"type":[],"require":false,"desc":"name of block"}},"assets":[],"isType":false,"createdTime":1456122522047,"modifiedTime":1458579667365,"ownerName":"Kirby Wu","likes":0,"parent":null,"basetype":"8","visualencoding":["6"],"category":["1","5","6"]}