{"theme":"1fater3","data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"r9iwsx","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"100% Stacked Bar Chart","desc":"a standard 100% stacked bar chart","tags":[""],"doc":{"name":"document","type":"html","content":"<h2 style=\"text-align:center\"> Stacked Bar Chart</h2>","lines":1,"size":53},"style":{"name":"stylesheet","type":"css","content":"","lines":1,"size":0},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: [\n    {order: 2000, value: [10, 20, 30, 20]},\n    {order: 2001, value: [20, 10, 20, 50]},\n    {order: 2002, value: [30, 10, 20, 80]},\n    {order: 2003, value: [40, 10, 30, 70]},\n    {order: 2004, value: [50, 20, 30, 60]},\n    {order: 2005, value: [50, 20, 20, 50]},\n    {order: 2006, value: [40, 20, 30, 50]},\n    {order: 2007, value: [40, 30, 30, 30]},\n    {order: 2008, value: [30, 30, 20, 20]},\n    {order: 2009, value: [20, 40, 20, 10]}\n  ],\n  dimension: {\n    value: { type: [plotdb.Number], require: true, multiple: true, desc: \"values in a bar stack\" },\n    order: { type: [plotdb.Number], require: true, desc: \"order of each bar stack\" }\n  },\n  config: {\n    fontSize: { name: \"Font Size\", type: [plotdb.Number], default: 12},\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10, rebindOnChange: true },\n    palette: {\n      name: \"Palette\", type: [plotdb.Palette],\n      default: plotdb.Palette['default'],\n      hint: plotdb.Palette.subtype.qualitative\n    }\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.svg.append(\"g\").attr({class: \"axis horizontal\"});\n    this.svg.select(\"g.axis.horizontal\").selectAll(\"g.tick\").data([0,0.2,0.4,0.6,0.8,1.0])\n      .enter().append(\"g\").attr({class: \"tick\"}).each(function(d,i) {\n      var node = d3.select(this);\n      node.append(\"text\").text(d);\n    });\n    this.orderrange = d3.extent(this.data.map(function(it) { return it.order; }));\n    this.orderCharCount = d3.max(this.data.map(function(it) { return (\"\"+it.order).length; }));\n    this.parsed = this.data.map(function(it) {\n      var total = it.value.reduce(function(a,b) { return a + b; }, 0);\n      var values = [], lastOffset = 0;\n      for(var idx = 0; idx < it.value.length; idx ++) {\n        values.push({\n          order: it.order,\n          size: it.value[idx] / total,\n          offset: lastOffset,\n          cat: (\n            this.dimension && this.dimension.value && this.dimension.value.fieldName?\n              this.dimension.value.fieldName[idx]:idx\n          )\n        });\n        lastOffset += (it.value[idx] / total);\n      }\n      return {\n        order: it.order,\n        value: values\n      };\n    });\n    this.parsed.sort(function(a,b) {\n      return b.order - a.order;\n    });\n  },\n  bind: function() {\n    var that = this;\n    this.svg.selectAll(\"g.group\").data(this.parsed)\n    .enter().append(\"g\").attr({class: \"group\"}).each(function(d,i) {\n      var node = d3.select(this);\n      node.selectAll(\"rect.data\").data(d.value)\n      .enter().append(\"rect\").attr({class: \"data\"});\n      node.append(\"text\").text(d.order);\n    });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var svgbox = d3.select(this.root).select(\"svg\")[0][0].getBoundingClientRect();\n    this.yAxisWidth = (this.orderCharCount + 1) * this.config.fontSize;\n    this.xAxisHeight = this.config.fontSize * 2;\n    var width = this.width = box.width;\n    var height = this.height = box.height - 10 - svgbox.top;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.xscale = d3.scale.linear().domain([0,1]).range([\n      this.yAxisWidth,\n      width - this.yAxisWidth\n    ]);\n    this.barSize = (height - 0) / this.parsed.length;\n    this.yscale = d3.scale.linear().domain(this.orderrange).range([\n      height - this.barSize / 2 - this.xAxisHeight,\n      this.barSize / 2\n    ]);\n    this.cscale = d3.scale.ordinal().range(this.config.palette.colors.map(function(it) { return it.hex; }));\n  },\n  render: function() {\n    var that = this;\n    this.svg.selectAll(\"g.group\").attr({\n      transform: function(it) {\n        return \"translate(0,\"+that.yscale(it.order)+\")\";\n      }\n    });\n    this.svg.selectAll(\"rect.data\").attr({\n      x: function(it) {\n        return that.xscale(it.offset);\n      },\n      y: function(it) { return 0 - that.barSize / 2 + that.config.padding /2; },\n      width: function(it) {\n        return that.xscale(it.offset + it.size) - that.xscale(it.offset);\n      },\n      height: this.barSize - that.config.padding,\n      fill: function(it,i) {\n        return that.cscale(it.cat);\n      }\n    });\n    this.svg.selectAll(\"g.group text\").attr({\n      \"dominant-baseline\": \"central\",\n      \"text-anchor\": \"end\",\n      x: function(it) { return that.yAxisWidth - that.config.fontSize; },\n      dy:0\n    });\n    this.svg.selectAll(\"g.axis.horizontal g.tick\").attr({\n      transform: function(it) {\n        return [\"translate(\",that.xscale(it),\",\",that.height - that.xAxisHeight + that.config.fontSize,\")\"].join(\"\")\n      }\n    })\n    this.svg.selectAll(\".axis.horizontal .tick text\").attr({\n      \"text-anchor\": \"middle\",\n      \"dominant-baseline\": \"top\"\n    });\n  }\n});","lines":133,"size":4896},"config":{"fontSize":{"name":"Font Size","type":[{"name":"Number","level":3}],"default":12,"value":20},"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":true,"value":10},"palette":{"name":"Palette","type":[{"name":"Palette","level":5,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"qualitative":{"colors":[{"hex":"#c05ae0"},{"hex":"#cf2d0c"},{"hex":"#e9ab1e"},{"hex":"#86ffb5"},{"hex":"#64dfff"},{"hex":"#003f7d"}]},"binary":{"colors":[{"hex":"#ff8356"},{"hex":"#0076a1"}]},"sequential":{"colors":[{"hex":"#950431"},{"hex":"#be043e"},{"hex":"#ec326d"},{"hex":"#fc82a9"},{"hex":"#febed2"},{"hex":"#fee6ee"}]},"diverging":{"colors":[{"hex":"#74001a"},{"hex":"#cd2149"},{"hex":"#f23971"},{"hex":"#ff84ab"},{"hex":"#ffc3d7"},{"hex":"#f2f2dd"},{"hex":"#b8d9ed"},{"hex":"#81b1d0"},{"hex":"#3d8bb7"},{"hex":"#0071a8"},{"hex":"#003558"}]},"subtype":{"qualitative":"qualitative","binary":"binary","sequential":"sequential","diverging":"diverging"}}],"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"hint":"qualitative","value":{"colors":[{"hex":"#7d2d21"},{"hex":"#DC5356"},{"hex":"#FFE670"},{"hex":"#dae275"},{"hex":"#4CC786"},{"hex":"#307D99"}]}}},"dimension":{"value":{"type":[{"name":"Number","level":3}],"require":true,"multiple":true,"desc":"values in a bar stack"},"order":{"type":[{"name":"Number","level":3}],"require":true,"desc":"order of each bar stack"}},"assets":[],"isType":false,"createdTime":1457419271926,"modifiedTime":1458629899493,"ownerName":"Kirby Wu","likes":0,"parent":null,"basetype":"1","visualencoding":["1","3"],"category":["5"]}