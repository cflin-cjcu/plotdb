{"theme":"kimbqd","config":{"padding":{"name":"Padding","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":true,"value":10},"marginV":{"name":"V. Margin","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":false,"value":"30"},"marginH":{"name":"H. Margin","type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":false,"value":10},"palette":{"name":"Palette","type":[{"name":"Palette","level":5,"re":{},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"qualitative":{"colors":[{"hex":"#c05ae0"},{"hex":"#cf2d0c"},{"hex":"#e9ab1e"},{"hex":"#86ffb5"},{"hex":"#64dfff"},{"hex":"#003f7d"}]},"binary":{"colors":[{"hex":"#ff8356"},{"hex":"#0076a1"}]},"sequential":{"colors":[{"hex":"#950431"},{"hex":"#be043e"},{"hex":"#ec326d"},{"hex":"#fc82a9"},{"hex":"#febed2"},{"hex":"#fee6ee"}]},"diverging":{"colors":[{"hex":"#74001a"},{"hex":"#cd2149"},{"hex":"#f23971"},{"hex":"#ff84ab"},{"hex":"#ffc3d7"},{"hex":"#f2f2dd"},{"hex":"#b8d9ed"},{"hex":"#81b1d0"},{"hex":"#3d8bb7"},{"hex":"#0071a8"},{"hex":"#003558"}]},"subtype":{"qualitative":"qualitative","binary":"binary","sequential":"sequential","diverging":"diverging"}}],"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"value":{"colors":[{"hex":"#7a322a"},{"hex":"#d52c2a"},{"hex":"#f93634"},{"hex":"#dddb83"},{"hex":"#ede6de"},{"hex":"#fdfffa"},{"hex":"#dbdbdb"},{"hex":"#48462d"}]}},"title":{"name":"Chart Title","type":[{"name":"String","level":1}],"default":"Line Chart","value":"克里米亞戰爭死亡人數"}},"dimension":{"value":{"type":[{"name":"Number","level":3}],"multiple":true,"require":true,"desc":"y axis value","fields":[{"name":"death number by wound","type":"Number","dataset":{"type":{"location":"sample","name":"dataset"},"key":"/dataset/sample/:crimeawar","name":"Deaths in Crimea War, 1854"},"data":[0,0,0,0,1,81,132,287,114,83,42,32,48,49,209,134,164,276,53,33,18,2,0,0]},{"name":"death number by zymotic","type":"Number","dataset":{"type":{"location":"sample","name":"dataset"},"key":"/dataset/sample/:crimeawar","name":"Deaths in Crimea War, 1854"},"data":[1,12,11,359,828,788,503,844,1725,2761,2120,1205,477,508,802,382,483,189,128,178,91,42,24,15]},{"name":"death number by other","type":"Number","dataset":{"type":{"location":"sample","name":"dataset"},"key":"/dataset/sample/:crimeawar","name":"Deaths in Crimea War, 1854"},"data":[5,9,6,23,30,70,128,106,131,324,361,172,57,37,31,33,25,20,18,32,28,48,19,35]}],"fieldName":["death number by wound","death number by zymotic","death number by other"]},"order":{"type":[],"require":true,"desc":"x axis index","fields":[{"name":"month","type":"Date","dataset":{"type":{"location":"sample","name":"dataset"},"key":"/dataset/sample/:crimeawar","name":"Deaths in Crimea War, 1854"},"data":["01/04/1854","01/05/1854","01/06/1854","01/07/1854","01/08/1854","01/09/1854","01/10/1854","01/11/1854","01/12/1854","01/01/1855","01/02/1855","01/03/1855","01/04/1855","01/05/1855","01/06/1855","01/07/1855","01/08/1855","01/09/1855","01/10/1855","01/11/1855","01/12/1855","01/01/1856","01/02/1856","01/03/1856"]}],"fieldName":"month"}},"data":[{"value":[0,1,5],"order":"01/04/1854"},{"value":[0,12,9],"order":"01/05/1854"},{"value":[0,11,6],"order":"01/06/1854"},{"value":[0,359,23],"order":"01/07/1854"},{"value":[1,828,30],"order":"01/08/1854"},{"value":[81,788,70],"order":"01/09/1854"},{"value":[132,503,128],"order":"01/10/1854"},{"value":[287,844,106],"order":"01/11/1854"},{"value":[114,1725,131],"order":"01/12/1854"},{"value":[83,2761,324],"order":"01/01/1855"},{"value":[42,2120,361],"order":"01/02/1855"},{"value":[32,1205,172],"order":"01/03/1855"},{"value":[48,477,57],"order":"01/04/1855"},{"value":[49,508,37],"order":"01/05/1855"},{"value":[209,802,31],"order":"01/06/1855"},{"value":[134,382,33],"order":"01/07/1855"},{"value":[164,483,25],"order":"01/08/1855"},{"value":[276,189,20],"order":"01/09/1855"},{"value":[53,128,18],"order":"01/10/1855"},{"value":[33,178,32],"order":"01/11/1855"},{"value":[18,91,28],"order":"01/12/1855"},{"value":[2,42,48],"order":"01/01/1856"},{"value":[0,24,19],"order":"01/02/1856"},{"value":[0,15,35],"order":"01/03/1856"}],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"3sugdf","permission":{"switch":[],"value":[]},"name":"Line Chart - Copy","desc":"The standard line chart","tags":null,"doc":{"name":"document","type":"html","content":"<h2 style=\"text-align:center\">克里米亞戰爭死亡人數</h2>\n<div id=\"popup\" class=\"popup box\">\n  <div class=\"shape\"></div>\n  <div class=\"title\"></div>\n  <div class=\"desc\"></div>\n</div>\n<svg></svg>\n<div id=\"legend\" class=\"legend\"></div>","lines":8,"size":221},"style":{"name":"stylesheet","type":"css","content":"svg, body, text {\n  font-family: arial;\n  color: #222;\n  fill: #222;\n  font-size: 12px;\n}\ntext {\n  text-anchor: middle;\n  dominant-baseline: central;\n}\ncircle, rect, path {\n  fill: #eee;\n  stroke: #555;\n  stroke-width: 2;\n}\nh3 {\n  text-align: center;\n  font-family: Arial;\n}\n\n.axis.horizontal {\n}\n.axis .tick {\n  display: none;\n}\n.axis .tick:nth-of-type(3n+1) {\n  display: block;\n}\n.axis .tick line {\n  stroke: #222;\n  stroke-width: 2\n}\n.axis.horizontal .tick text {\n}\n\n.axis .domain {\n  fill: none;\n}\n\n.axis.horizontal .label {\n}\n\n.popup {\n  position: absolute;\n  background: rgba(0,0,0,1.0);\n  color: #fff;\n  padding: 5px 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  display: none;\n}\n.popup .title, .popup .desc {\n  margin-left: 23px;\n}\n.popup .shape {\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  background: #fff;\n  position: absolute;\n  left: 10px;\n  top: 7px;\n}\n.popup:after {\n  content: \" \";\n  display: block;\n  width: 10px;\n  height: 10px;\n  background: #ff0;\n  position: absolute;\n  transform: rotate(45deg);\n  background: rgba(0,0,0,1.0);\n  top: 50%;\n  margin-top: -5px;\n}\n.popup.left:after {\n  right: -5px;\n}\n.popup.right:after {\n  left: -5px;\n}\n.legend {\n  text-align: center;\n}\n.legend .entry{\n  display: inline-block;\n  padding: 5px 15px 5px 5px;\n  margin-right: 5px;\n  cursor: pointer;\n\n}\n.legend .entry:hover {\n  background: rgba(255,255,255,0.5);\n  transform: scale(1.2);\n}\n.legend .entry .mark {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  vertical-align: middle;\n  margin-right: 5px;\n}\n.legend .entry .name {\n  display: inline-block;\n  vertical-align: middle;\n}\n","lines":108,"size":1638},"code":{"name":"code","type":"javascript","content":"var module = {};\nmodule.exports = plotdb.chart.create({\n  sample: [\n    {order: \"1st\", value: [1,2,5,8]},\n    {order: \"2nd\", value: [5,4,2,3]},\n    {order: \"3rd\", value: [4,3,1,3]},\n    {order: \"4th\", value: [5,3,4,2]},\n    {order: \"5th\", value: [8,4,7,5]}\n  ],\n  dimension: {\n    value: { type: [plotdb.Number], multiple: true, require: true, desc: \"y axis value\" },\n    order: { type: [], require: true, desc: \"x axis index\" },\n  },\n  config: {\n    padding: { name: \"Padding\", type: [plotdb.Number], default: 10, rebindOnChange: true },\n    marginV: { name: \"V. Margin\", type: [plotdb.Number], default: 10, rebindOnChange: false},\n    marginH: { name: \"H. Margin\", type: [plotdb.Number], default: 10, rebindOnChange: false},\n    palette: { name: \"Palette\", type: [plotdb.Palette], default: plotdb.Palette.default },\n    title: { name: \"Chart Title\", type: [plotdb.String], default: \"Line Chart\"}\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).select(\"svg\");\n    this.data.sort(function(a,b) { return b - a; });\n    var p = this.parsed = {\n      dots: [],\n      lines: [],\n      order: [],\n      group: [],\n      values: []\n    };\n    var list = null;\n    if(this.data.length) {\n      isOrderDate = (plotdb.Date.test(this.data[0].order));\n      p.order = this.data.map(function(it) { return {\n        idx: 0,\n        value: it.order,\n        parsed: (isOrderDate?new Date(it.order).getTime()/1000:it.oredr)\n      };});\n      p.order.sort(function(a,b){\n        if(a.parsed > b.parsed) { return 1; }\n        else if (a.parsed < b.parsed) { return -1; }\n        return 0;\n      });\n      p.order.forEach(function(d,i) { d.idx = i; });\n      for(var j=0;j < this.data[0].value.length; j++) {\n        p.group.push({\n          name: (this.dimension.value && this.dimension.value.fieldName\n                 ?(this.dimension.value.fieldName[j] || j):j),\n          idx: j\n        }); /* name: should fetch from field meta */\n        p.dots.push(dots = {group: j, data: []});\n        for(var i=0;i<this.data.length;i++) {\n          /* order of \"order\" might be re-arranged so we have to lookup again */\n          var orderIdx = (p.order.filter(function(it) { return it.value == that.data[i].order; })[0] || {idx: -1}).idx;\n          dots.data.push({\n            group: j,\n            value: this.data[i].value[j],\n            order: orderIdx\n          });\n        }\n        dots.data.sort(function(a,b) { return b.order - a.order; });\n        p.lines.push({idx: j, data: d3.pairs(dots.data)});\n        p.values = p.values.concat(dots.data.map(function(it) { return it.value;}));\n      }\n    }\n    this.xaxisGroup = this.svg.append(\"g\").attr({class: \"axis horizontal\"});\n    this.yaxisGroup = this.svg.append(\"g\").attr({class: \"axis vertical\"});\n    this.xaxis = d3.svg.axis().tickValues(this.parsed.order.map(function(it) { return it.idx;}))\n      .orient(\"bottom\").tickSize(6,6).tickPadding(3)\n      .tickFormat(function(it) {\n        return that.parsed.order[it].value;\n      });\n    this.yaxis = d3.svg.axis()\n      .orient(\"bottom\").tickSize(6,6).tickPadding(3);\n    this.popup = {};\n    this.popup.root = d3.select(document.getElementById(\"popup\"));\n    \n    this.popup.title = d3.select(this.popup.root[0][0].querySelector(\".title\"));\n    this.popup.desc = d3.select(this.popup.root[0][0].querySelector(\".desc\"));\n    this.popup.shape = d3.select(this.popup.root[0][0].querySelector(\".shape\"));\n\n    this.legend = d3.select(this.root.querySelector(\".legend\"));\n    this.svg.on(\"mousemove\", function() {\n      var box = this.getBoundingClientRect();\n      var x = d3.event.clientX - box.left;\n      var y = d3.event.clientY - box.top;\n      var iy = that.yscale.invert(y);\n      var ix = parseInt(Math.round(that.xscale.invert(x)));\n      var min = -1;\n      var target = null;\n      for(var i = 0; i < that.parsed.dots.length; i++) {\n        ds = that.parsed.dots[i];\n        for(var v,j = 0; j < ds.data.length; j++) {\n          dot = ds.data[j];\n          dot.active = false;\n          if(dot.order != ix) continue;\n          v = Math.abs(dot.value - iy);\n          if(min<0 || v < min) {\n            min = v;\n            target = dot;\n          }\n        }\n      }\n      if(target) target.active = true;\n      that.target = target;\n      that.render();\n    });\n  },\n  bind: function() {\n    var that = this;\n    this.linegroup = this.svg.selectAll(\"g.series.line\").data(this.parsed.lines)\n      .enter().append(\"g\").attr({class: \"series line\"}).each(function(it) {\n      d3.select(this).selectAll(\"line.connect\").data(it.data)\n        .enter().append(\"line\").attr({class: \"connect\"});\n    });\n    this.lines = d3.select(this.root).selectAll(\"line.connect\");\n    this.dotgroup = this.svg.selectAll(\"g.series.dot\").data(this.parsed.dots)\n      .enter().append(\"g\").attr({class: \"series dot\"}).each(function(it) {\n      d3.select(this).selectAll(\"circle.node\").data(it.data)\n        .enter().append(\"circle\").attr({class: \"node\"})\n    });\n    this.dots = d3.select(this.root).selectAll(\"circle.node\");\n    this.legend.selectAll(\"div.entry\").data(this.parsed.group)\n      .enter().append(\"div\").attr({class: \"entry\"})\n      .each(function(it) {\n        var node = d3.select(this);\n        node.append(\"div\").attr({class: \"mark\"});\n        node.append(\"div\").attr({class: \"name\"}).text(it.name);\n        node.on(\"mouseover\", function(it) { that.activeGroup = it; that.render(); });\n        node.on(\"mouseout\", function(it) { that.activeGroup = null; that.render(); });\n      });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height - 80 - 40;\n    var mv = this.config.marginV;\n    var mh = this.config.marginH;\n    var xAxisHeight = 30;\n    var yAxisWidth = 80;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.xscale = d3.scale.linear()\n      .domain(d3.extent(this.parsed.order.map(function(it) { return it.idx; })))\n      .range([mh + yAxisWidth,width - mh]);\n    this.yscale = d3.scale.linear()\n      .domain([d3.min([0,d3.min(this.parsed.values)]),d3.max(this.parsed.values)])\n      .range([height - mv - xAxisHeight, mv]);\n    this.colors = d3.scale.ordinal().range(this.config.palette.colors.map(function(it) { return it.hex; }));\n    this.xaxis.scale(this.xscale);\n    this.xaxisGroup.call(this.xaxis);\n    this.yaxis.scale(this.yscale).orient(\"left\");\n    this.yaxisGroup.call(this.yaxis);\n  },\n  render: function() {\n    var that = this;\n    this.lines.attr({\n      x1: function(it) { return that.xscale(it[0].order); },\n      x2: function(it) { return that.xscale(it[1].order); },\n      y1: function(it) { return that.yscale(it[0].value); },\n      y2: function(it) { return that.yscale(it[1].value); },\n      \"stroke-width\": 2\n    }).style({\n      stroke: function(it) {   return that.colors(it[0].group); }\n    });\n    this.dots.attr({\n      cx: function(it) { return that.xscale(it.order); },\n      cy: function(it) { return that.yscale(it.value); },\n      r: 6,\n      \"stroke-width\": \"2\"\n    })\n    this.dots.filter(function(it) { return it.active; }).style({\n      stroke: function(it) { return that.colors(it.group); },\n      fill: \"#ffffff\"\n    });\n    this.dots.filter(function(it) { return !it.active; }).style({\n      fill: function(it) { return that.colors(it.group); },\n      stroke: \"#ffffff\"\n    });\n    this.lines.transition().duration(500).attr({\n      opacity: function(it) { return (that.activeGroup? (that.activeGroup.idx == it[0].group ? 1 : 0.2):1); }\n    });\n    this.dots.transition().duration(500).attr({\n      opacity: function(it) { return (that.activeGroup? (that.activeGroup.idx == it.group ? 1 : 0.2):1); }\n    });\n    this.xaxisGroup.attr({\n      \"transform\": \"translate(0,\" + (this.yscale.range()[0]) + \")\"\n    });\n    this.yaxisGroup.attr({\n      \"transform\": \"translate(\" + (this.xscale.range()[0] - 20) +\",0)\"\n    });\n    if(this.target) {\n      this.popup.root.style({display: \"block\"});\n      this.popup.title.text(this.parsed.group[this.target.group].name);\n      this.popup.desc.text(this.parsed.order[this.target.order].value + \": \" + this.target.value);\n      this.popup.shape.style({\n        background: this.colors(this.target.group)\n      });\n      setTimeout(function() {\n        if(!that.target) return;\n        var x = that.xscale(that.target.order);\n        var y = that.yscale(that.target.value);\n        var direction = \"left\";\n\t    var bbox = that.popup.root[0][0].getBoundingClientRect();\n        var svgbox = that.svg[0][0].getBoundingClientRect();\n        if( x < that.width/2 ) {\n          x = x + 20;\n          direction = \"right\";\n        } else {\n          x = x - 20 - (bbox.right - bbox.left);\n        }\n        that.popup.root.attr({\n          class: \"popup \" + direction\n        });\n        that.popup.root.style({\n          left: (x + svgbox.left) + \"px\",\n          top: (y + svgbox.top - (bbox.bottom - bbox.top)/2) + \"px\"\n        });\n      }, 0);\n    }\n    this.legend.selectAll(\".entry .mark\").style({\n      background: function(it) { return that.colors(it.idx); }\n    });\n    d3.select(\"#chart-title\").text(this.config.title);\n  }\n});","lines":231,"size":9290},"assets":[],"isType":false,"datamap":{"value":["death number by wound","death number by zymotic","death number by other"],"order":"month"},"modifiedTime":1458141356907,"createdTime":1455687631372,"likes":1,"parent":"3cf85n","ownerName":"Kirby Wu"}