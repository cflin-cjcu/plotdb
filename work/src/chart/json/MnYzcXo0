{"0":"b","1":"5","2":"d","3":"v","4":"k","5":"s","6":"f","7":"6","8":"e","9":"0","10":"9","11":"t","12":"3","13":"x","14":"r","theme":null,"data":[],"type":{"location":"server","name":"chart"},"owner":"o3tgs6","key":"2v3qz4","permission":{"switch":["public"],"value":[{"switch":"public","perm":"fork"}]},"name":"High Score Scatter Plot","desc":"specialized scatter plot which highlight the recorded-highest data and how it lasts.","tags":[""],"doc":{"name":"document","type":"html","content":"<div id=\"chartPopup\">\n  <div id=\"chartTitle\"></div>\n  <div id=\"chartTime\"></div>\n  <div id=\"chartValue\"></div>\n</div>","lines":5,"size":117},"style":{"name":"stylesheet","type":"css","content":"#chartPopup {\n  position: absolute;\n  top: 100px;\n  left: 100px;\n  background: #fff;\n  border: 1px solid #ccc;\n  box-shadow: 0 2px 2px rgba(0,0,0,0.3);\n  border-radius: 2px;\n  width: 180px;\n  height: 80px;\n  margin-left: -90px;\n  margin-top: 20px;\n  padding: 10px 5px;\n  display: none;\n  text-align: center;\n}\n#chartTitle {\n  height: 20px;\n  font-size: 1.2em;\n  font-weight: bold;\n}\n#chartTime {\n  font-weight: bold;\n  font-size: 0.8em;\n  margin-bottom: 5px;\n}\n\n#chartValue {\n  font-size: 0.9em;\n}","lines":30,"size":497},"code":{"name":"code","type":"javascript","content":"module = {};\nmodule.exports = plotdb.chart.create({\n  name: \"New Chart\",\n  title: \"New Chart\",\n  desc: \"No Description\",\n  author: \"Your Name\",\n  ref: \"http://www.nytimes.com/interactive/2015/04/03/sports/baseball/mlb-records.html\",\n  sample: d3.range(1000).map(function(it) {\n    var names = [\"Simon\",\"James\",\"John\",\"Amelie\",\"Eva\",\"Sharon\",\"Justin\",\"Andy\",\"Smith\"];\n    var seed = Math.random();\n    var time = parseInt(seed * 100 + 1900);\n    var range = seed * 20 + 5;\n    var delta = seed * 10;\n    var value = parseInt(Math.sin(seed * 6.28 * 4) * delta + 2 * delta) + parseInt(Math.random()*range - range/2) + range / 2;\n    return {time: time, value: value, name: names[parseInt(Math.random()*names.length)]};\n  }),\n  dimension: {\n    value: { type: [plotdb.Number], require: true, desc: \"value (y-axis)\" },\n    time: { type: [plotdb.Number], require: true, desc: \"time (x-axis)\" },\n    name: { type: [], require: false, desc: \"name for this event\" }\n  },\n  config: {\n    padding: { type: [plotdb.Number], default: 10, rebindOnChange: true },\n    radius: { type: [plotdb.Number], default: 5, rebindOnChnage: false},\n    highColor: {type: [plotdb.Color], default: \"rgba(206,122,156,0.8)\"},\n    baseColor: {type: [plotdb.Color], default: \"#000\"},\n    hoverColor: {type: [plotdb.Color], default: \"#000\"},\n    lineAlwaysOn: {type: [plotdb.Boolean], default: true}\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\")\n    if(!this.data || !this.data.length) this.data = this.sample;\n    hash = {}\n    this.data.forEach(function(it) {\n      if(!hash[it.time]) hash[it.time] = {}\n      if(!hash[it.time][it.value]) hash[it.time][it.value] = {\n        name: it.name, time: it.time, value: it.value, count: 0\n      };\n      hash[it.time][it.value].count++;\n    });\n    ret = []\n    for(time in hash) {\n      for(value in hash[time]) {\n        ret.push(hash[time][value]);\n      }\n    }\n    this.data = data = ret;\n    this.times = data.map(function(it) { return it.time; });\n    this.values = data.map(function(it) { return it.value; });\n    this.counts = data.map(function(it) { return it.count; });\n    for(var byYear,last = null, idx = 0, max = d3.min(this.values); idx < this.times.length; idx ++ ){\n      byYear = data.filter(function(it){return it.time==that.times[idx]});\n      byYear.sort(function(a,b) { return b.value - a.value; });\n      if(!byYear[0]) { continue; }\n      byYear[0].yearHigh = true;\n      if(byYear[0].value > max) {\n        if(last) { \n          last.next = byYear[0];\n          byYear[0].prev = last;\n        }\n        last = byYear[0];\n        last.recordHigh = true;\n        max = last.value;\n        last.next = last;\n      }\n    }    \n    data.sort(function(a,b) { return a.time - b.time;});\n    this.xticks = this.svg.append(\"g\").attr({class: \"xticks\"});\n    this.yticks = this.svg.append(\"g\").attr({class: \"yticks\"});\n    this.legend = this.svg.append(\"g\").attr({class: \"legend\"});\n    this.legend.append(\"circle\").attr({\n      class: \"legend\"\n    });\n    this.legend.append(\"text\").attr({\n      class: \"legend\",\n      \"dominant-baseline\": \"central\",\n      \"text-anchor\": \"start\",\n      \"font-size\": 12\n    }).text(\"Record Highest\");\n  },\n  bind: function() {\n\n    var data = this.data;\n    var that = this;\n    this.cscale = d3.scale.linear().domain(d3.extent(that.counts)).range([0.4, 0.8]);\n    this.dots = this.svg.selectAll(\"circle.dot\").data(data);\n    this.dots.enter().append(\"circle\").attr({\"class\": \"dot\"});\n    this.dots.exit().remove();\n    this.lines = this.svg.selectAll(\"line.extend\").data(data.filter(function(it) { return it.recordHigh; }));\n    this.lines.enter().append(\"line\").attr({\"class\": \"extend\"});\n    this.svg.on(\"mousemove\",function() {\n      var x = d3.event.clientX;\n      var y = d3.event.clientY;\n      var rx = x;\n      var ry = y;\n      var time = 0;\n      var value = 0;\n      x = that.xscale.invert(x);\n      y = that.yscale.invert(y);\n      for(var idx = 0, min = -1; idx < that.times.length; idx++ ) {\n        d = Math.abs(that.times[idx] - x);\n        if(d < min || min == -1) { min = d; time = that.times[idx]; }\n      }\n      values = d3.keys(hash[time]);\n      for(var idx = 0, min = -1; idx < values.length; idx++ ) {\n        d = Math.abs(values[idx] - y);\n        if(d < min || min == -1) { min = d; value = values[idx]; }\n      }\n      target = hash[time][value];\n      if(that.hover) { that.hover.hover = false; }\n      if(target) { target.hover = true; }\n      that.hover = target;\n      that.render(that.root,that.data,that.config);\n      if(target) {\n        d3.select(\"#chartPopup\").style({\n          display: \"block\",\n          top: ry + \"px\",\n          left: rx + \"px\"\n        });\n        d3.select(\"#chartTitle\").text(target.name);\n        d3.select(\"#chartTime\").text(parseInt(100 * target.time)/100);\n        d3.select(\"#chartValue\").text(parseInt(100 * target.value)/100);\n      }\n    });\n  },\n  resize: function() {\n    var w = $(this.root).width();\n    var h = $(this.root).height();\n    var that = this;\n    this.mw = 20;\n    this.mh = 20;\n    this.w = w;\n    this.h = h;\n    this.svg.attr({\n      width: \"100%\",\n      height: \"100%\",\n      viewBox: [0,0,w,h].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    var config = this.config;\n    this.yscale = d3.scale.linear().domain([0,d3.max(that.values)]).range([that.h - 2 * that.mh,2 * that.mh]);\n    var ytick = that.yscale.ticks(3);\n    this.lwm = 12 * d3.max(ytick.map(function(it) { return (it + \"\").length; }));\n    this.xscale = d3.scale.linear().domain(d3.extent(that.times)).range([that.mw, that.w - 2 * that.mw - this.lwm]);\n    var update = this.xticks.selectAll(\"g.xtick\").data(this.xscale.ticks(10));\n    update.exit().remove();\n    update.enter().append(\"g\").attr({\n      class: \"xtick\"\n    }).each(function() {\n      d3.select(this).append(\"text\")\n        .text(function(it) { return it;})\n        .attr({\n          fill: \"#999\",\n          dx: 5,\n          \"font-size\": 12\n        });\n      d3.select(this).append(\"line\").attr({\n        x1: 0,\n        y1: 2,\n        x2: 0,\n        y2: -10,\n        stroke: \"#999\",\n        \"stroke-width\": 1\n      });\n    });\n\n    update = this.yticks.selectAll(\"g.ytick\").data(ytick);\n    update.exit().remove();\n    update.enter().append(\"g\").attr({\n      class: \"ytick\"\n    }).each(function() {\n      d3.select(this).append(\"text\").text(function(it) {\n        return it;\n      }).attr({\n        fill: \"#999\",\n        \"dominant-baseline\": \"central\"\n      });\n      d3.select(this).append(\"line\").attr({\n        x1: -that.mw + config.radius,\n        x2: -that.w + that.lwm + that.mw * 2 - config.radius,\n        y1: 0,\n        y2: 0,\n        stroke: \"#999\",\n        \"stroke-width\": 1,\n        \"stroke-dasharray\": \"1 3\"\n      });\n    });\n  },\n  render: function() {\n    var that = this;\n    var config = this.config;\n    this.svg.select(\"circle.legend\").attr({\n      cx: this.mw + config.radius,\n      cy: this.mh + config.radius,\n      r: config.radius,\n      fill: config.highColor\n    });\n    this.svg.select(\"text.legend\").attr({\n      x: this.mw + config.radius * 3,\n      y: this.mh + config.radius,\n      fill: config.baseColor\n    });\n    this.svg.attr({\n      viewBox: [0,0,that.w,that.h].join(\" \")\n    });\n    this.svg.selectAll(\"g.xtick\").attr({\n      transform: function(it) {\n        return \"translate(\"+(that.xscale(it))+\",\"+(that.h - that.mh)+\")\";\n      },\n    });\n    this.svg.selectAll(\"g.ytick\").attr({\n      transform: function(it) {\n        return \"translate(\"+(that.w - that.mw - that.lwm)+\",\"+that.yscale(it)+\")\";\n      }\n    });\n    this.svg.selectAll(\"line.extend\").attr({\n      x1: function(it) { return that.xscale(it.time); },\n      x2: function(it) { return that.xscale(it.next.time); },\n      y1: function(it) { return that.yscale(it.value); },\n      y2: function(it) { return that.yscale(it.value); },\n      stroke: config.highColor,\n      \"stroke-width\": 1,\n      opacity: function(it) {\n        if(!config.lineAlwaysOn) { if(it.hover) return 1; else return 0; }\n        return 1;\n      }\n    });\n    this.svg.selectAll(\"circle.dot\").attr({\n      cx: function(it) { return that.xscale(it.time); },\n      cy: function(it) { return that.yscale(it.value); },\n      r:  function(it) { \n        if(it.hover) { return config.radius * 2; }\n        return config.radius;\n      },\n      fill: function(it) {\n        if(it.recordHigh) { return config.highColor; }\n\t    if(it.hover) { return config.hoverColor; }\n        return config.baseColor;\n      },\n      opacity: function(it) {\n        if(it.hover || it.recordHigh) { return 1;}\n        return that.cscale(it.count);\n      }\n    })\n  }\n});","lines":247,"size":8660},"config":{"padding":{"type":[{"name":"Number","level":3}],"default":10,"rebindOnChange":true,"value":10},"radius":{"type":[{"name":"Number","level":3}],"default":5,"rebindOnChnage":false,"value":"3"},"highColor":{"type":[{"name":"Color","level":4,"default":"#dc4521"}],"default":"rgba(206,122,156,0.8)","value":"rgba(255,0,103,0.8)"},"baseColor":{"type":[{"name":"Color","level":4,"default":"#dc4521"}],"default":"#000","value":"rgba(145,145,145,0.8)"},"hoverColor":{"type":[{"name":"Color","level":4,"default":"#dc4521"}],"default":"#000","value":"#242424"},"lineAlwaysOn":{"type":[{"name":"Boolean","level":2}],"default":true,"value":false}},"dimension":{"value":{"type":[{"name":"Number","level":3}],"require":true,"desc":"value (y-axis)","fields":[]},"time":{"type":[{"name":"Number","level":3}],"require":true,"desc":"time (x-axis)","fields":[]},"name":{"type":[],"require":false,"desc":"name for this event","fields":[]}},"assets":[],"isType":false,"createdTime":1455695457533,"modifiedTime":1458279297244,"ownerName":"Kirby Wu","likes":0,"parent":null,"basetype":"18","visualencoding":["1","9"],"category":["4"]}